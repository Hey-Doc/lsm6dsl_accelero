
lsm6dsl_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b344  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800b508  0800b508  0001b508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b648  0800b648  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b648  0800b648  0001b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b650  0800b650  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b650  0800b650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b654  0800b654  0001b654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800b658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200000a8  0800b700  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800b700  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021054  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000360d  00000000  00000000  0004112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d88  00000000  00000000  00044740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001be0  00000000  00000000  000464c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000306da  00000000  00000000  000480a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016745  00000000  00000000  00078782  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012b2ef  00000000  00000000  0008eec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ba1b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008944  00000000  00000000  001ba234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b4ec 	.word	0x0800b4ec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	0800b4ec 	.word	0x0800b4ec

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b972 	b.w	8000e74 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4688      	mov	r8, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14b      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4615      	mov	r5, r2
 8000bba:	d967      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0720 	rsb	r7, r2, #32
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	fa20 f707 	lsr.w	r7, r0, r7
 8000bce:	4095      	lsls	r5, r2
 8000bd0:	ea47 0803 	orr.w	r8, r7, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be0:	fa1f fc85 	uxth.w	ip, r5
 8000be4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bec:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x60>
 8000bf4:	18eb      	adds	r3, r5, r3
 8000bf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfa:	f080 811b 	bcs.w	8000e34 <__udivmoddi4+0x28c>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 8118 	bls.w	8000e34 <__udivmoddi4+0x28c>
 8000c04:	3f02      	subs	r7, #2
 8000c06:	442b      	add	r3, r5
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x8c>
 8000c20:	192c      	adds	r4, r5, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c2a:	45a4      	cmp	ip, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c30:	3802      	subs	r0, #2
 8000c32:	442c      	add	r4, r5
 8000c34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c38:	eba4 040c 	sub.w	r4, r4, ip
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	b11e      	cbz	r6, 8000c48 <__udivmoddi4+0xa0>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c6 4300 	strd	r4, r3, [r6]
 8000c48:	4639      	mov	r1, r7
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xbe>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80eb 	beq.w	8000e2e <__udivmoddi4+0x286>
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f783 	clz	r7, r3
 8000c6a:	2f00      	cmp	r7, #0
 8000c6c:	d147      	bne.n	8000cfe <__udivmoddi4+0x156>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd0>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fa 	bhi.w	8000e6c <__udivmoddi4+0x2c4>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa0>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xe8>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 808f 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c9a:	1b49      	subs	r1, r1, r5
 8000c9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca0:	fa1f f885 	uxth.w	r8, r5
 8000ca4:	2701      	movs	r7, #1
 8000ca6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2bc>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x14c>
 8000ce4:	192c      	adds	r4, r5, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x14a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80b6 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e79f      	b.n	8000c3e <__udivmoddi4+0x96>
 8000cfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000d02:	40bb      	lsls	r3, r7
 8000d04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d1c:	4325      	orrs	r5, r4
 8000d1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d22:	0c2c      	lsrs	r4, r5, #16
 8000d24:	fb08 3319 	mls	r3, r8, r9, r3
 8000d28:	fa1f fa8e 	uxth.w	sl, lr
 8000d2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d30:	fb09 f40a 	mul.w	r4, r9, sl
 8000d34:	429c      	cmp	r4, r3
 8000d36:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1e 0303 	adds.w	r3, lr, r3
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	f080 8087 	bcs.w	8000e5a <__udivmoddi4+0x2b2>
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	f240 8084 	bls.w	8000e5a <__udivmoddi4+0x2b2>
 8000d52:	f1a9 0902 	sub.w	r9, r9, #2
 8000d56:	4473      	add	r3, lr
 8000d58:	1b1b      	subs	r3, r3, r4
 8000d5a:	b2ad      	uxth	r5, r5
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1e 0404 	adds.w	r4, lr, r4
 8000d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d78:	d26b      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7a:	45a2      	cmp	sl, r4
 8000d7c:	d969      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4474      	add	r4, lr
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	eba4 040a 	sub.w	r4, r4, sl
 8000d8e:	454c      	cmp	r4, r9
 8000d90:	46c2      	mov	sl, r8
 8000d92:	464b      	mov	r3, r9
 8000d94:	d354      	bcc.n	8000e40 <__udivmoddi4+0x298>
 8000d96:	d051      	beq.n	8000e3c <__udivmoddi4+0x294>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d069      	beq.n	8000e70 <__udivmoddi4+0x2c8>
 8000d9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000da0:	eb64 0403 	sbc.w	r4, r4, r3
 8000da4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da8:	40fd      	lsrs	r5, r7
 8000daa:	40fc      	lsrs	r4, r7
 8000dac:	ea4c 0505 	orr.w	r5, ip, r5
 8000db0:	e9c6 5400 	strd	r5, r4, [r6]
 8000db4:	2700      	movs	r7, #0
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000db8:	f1c2 0320 	rsb	r3, r2, #32
 8000dbc:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc0:	4095      	lsls	r5, r2
 8000dc2:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	4338      	orrs	r0, r7
 8000dd0:	0c01      	lsrs	r1, r0, #16
 8000dd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd6:	fa1f f885 	uxth.w	r8, r5
 8000dda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb07 f308 	mul.w	r3, r7, r8
 8000de6:	428b      	cmp	r3, r1
 8000de8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x256>
 8000dee:	1869      	adds	r1, r5, r1
 8000df0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df4:	d22f      	bcs.n	8000e56 <__udivmoddi4+0x2ae>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d92d      	bls.n	8000e56 <__udivmoddi4+0x2ae>
 8000dfa:	3f02      	subs	r7, #2
 8000dfc:	4429      	add	r1, r5
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	b281      	uxth	r1, r0
 8000e02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb00 f308 	mul.w	r3, r0, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x27e>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1c:	d217      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d915      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e2c:	e73b      	b.n	8000ca6 <__udivmoddi4+0xfe>
 8000e2e:	4637      	mov	r7, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e709      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000e34:	4607      	mov	r7, r0
 8000e36:	e6e7      	b.n	8000c08 <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x8c>
 8000e3c:	4541      	cmp	r1, r8
 8000e3e:	d2ab      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e44:	eb69 020e 	sbc.w	r2, r9, lr
 8000e48:	3801      	subs	r0, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	e7a4      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e4e:	4660      	mov	r0, ip
 8000e50:	e7e9      	b.n	8000e26 <__udivmoddi4+0x27e>
 8000e52:	4618      	mov	r0, r3
 8000e54:	e795      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e56:	4667      	mov	r7, ip
 8000e58:	e7d1      	b.n	8000dfe <__udivmoddi4+0x256>
 8000e5a:	4681      	mov	r9, r0
 8000e5c:	e77c      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	442c      	add	r4, r5
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0x14c>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	442b      	add	r3, r5
 8000e6a:	e72f      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	e708      	b.n	8000c82 <__udivmoddi4+0xda>
 8000e70:	4637      	mov	r7, r6
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0xa0>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000e86:	2110      	movs	r1, #16
 8000e88:	20d4      	movs	r0, #212	; 0xd4
 8000e8a:	f001 fb39 	bl	8002500 <SENSOR_IO_Read>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000e9e:	7bba      	ldrb	r2, [r7, #14]
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2110      	movs	r1, #16
 8000eac:	20d4      	movs	r0, #212	; 0xd4
 8000eae:	f001 fb0d 	bl	80024cc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000eb2:	2112      	movs	r1, #18
 8000eb4:	20d4      	movs	r0, #212	; 0xd4
 8000eb6:	f001 fb23 	bl	8002500 <SENSOR_IO_Read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000ecc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000ece:	7bba      	ldrb	r2, [r7, #14]
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	2112      	movs	r1, #18
 8000edc:	20d4      	movs	r0, #212	; 0xd4
 8000ede:	f001 faf5 	bl	80024cc <SENSOR_IO_Write>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	20d4      	movs	r0, #212	; 0xd4
 8000ef8:	f001 fb02 	bl	8002500 <SENSOR_IO_Read>
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	20d4      	movs	r0, #212	; 0xd4
 8000f10:	f001 fadc 	bl	80024cc <SENSOR_IO_Write>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000f20:	f001 faca 	bl	80024b8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000f24:	210f      	movs	r1, #15
 8000f26:	20d4      	movs	r0, #212	; 0xd4
 8000f28:	f001 faea 	bl	8002500 <SENSOR_IO_Read>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000f40:	2115      	movs	r1, #21
 8000f42:	20d4      	movs	r0, #212	; 0xd4
 8000f44:	f001 fadc 	bl	8002500 <SENSOR_IO_Read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f023 0310 	bic.w	r3, r3, #16
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f043 0310 	orr.w	r3, r3, #16
 8000f60:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	461a      	mov	r2, r3
 8000f66:	2115      	movs	r1, #21
 8000f68:	20d4      	movs	r0, #212	; 0xd4
 8000f6a:	f001 faaf 	bl	80024cc <SENSOR_IO_Write>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000f8e:	2110      	movs	r1, #16
 8000f90:	20d4      	movs	r0, #212	; 0xd4
 8000f92:	f001 fab5 	bl	8002500 <SENSOR_IO_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000f9a:	f107 0208 	add.w	r2, r7, #8
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	2128      	movs	r1, #40	; 0x28
 8000fa2:	20d4      	movs	r0, #212	; 0xd4
 8000fa4:	f001 faca 	bl	800253c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	77fb      	strb	r3, [r7, #31]
 8000fac:	e01f      	b.n	8000fee <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f107 0220 	add.w	r2, r7, #32
 8000fb8:	4413      	add	r3, r2
 8000fba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	f107 0120 	add.w	r1, r7, #32
 8000fcc:	440b      	add	r3, r1
 8000fce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	b212      	sxth	r2, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	f107 0120 	add.w	r1, r7, #32
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	3301      	adds	r3, #1
 8000fec:	77fb      	strb	r3, [r7, #31]
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d9dc      	bls.n	8000fae <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d828      	bhi.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <LSM6DSL_AccReadXYZ+0x8c>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001039 	.word	0x08001039
 8001008:	08001051 	.word	0x08001051
 800100c:	08001051 	.word	0x08001051
 8001010:	08001051 	.word	0x08001051
 8001014:	0800104b 	.word	0x0800104b
 8001018:	08001051 	.word	0x08001051
 800101c:	08001051 	.word	0x08001051
 8001020:	08001051 	.word	0x08001051
 8001024:	0800103f 	.word	0x0800103f
 8001028:	08001051 	.word	0x08001051
 800102c:	08001051 	.word	0x08001051
 8001030:	08001051 	.word	0x08001051
 8001034:	08001045 	.word	0x08001045
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <LSM6DSL_AccReadXYZ+0x124>)
 800103a:	61bb      	str	r3, [r7, #24]
    break;
 800103c:	e008      	b.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <LSM6DSL_AccReadXYZ+0x128>)
 8001040:	61bb      	str	r3, [r7, #24]
    break;
 8001042:	e005      	b.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <LSM6DSL_AccReadXYZ+0x12c>)
 8001046:	61bb      	str	r3, [r7, #24]
    break;
 8001048:	e002      	b.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <LSM6DSL_AccReadXYZ+0x130>)
 800104c:	61bb      	str	r3, [r7, #24]
    break;    
 800104e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
 8001054:	e01b      	b.n	800108e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001056:	7ffb      	ldrb	r3, [r7, #31]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	f107 0220 	add.w	r2, r7, #32
 800105e:	4413      	add	r3, r2
 8001060:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001080:	ee17 2a90 	vmov	r2, s15
 8001084:	b212      	sxth	r2, r2
 8001086:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	3301      	adds	r3, #1
 800108c:	77fb      	strb	r3, [r7, #31]
 800108e:	7ffb      	ldrb	r3, [r7, #31]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d9e0      	bls.n	8001056 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	3d79db23 	.word	0x3d79db23
 80010a0:	3df9db23 	.word	0x3df9db23
 80010a4:	3e79db23 	.word	0x3e79db23
 80010a8:	3ef9db23 	.word	0x3ef9db23

080010ac <__io_putchar>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2301      	movs	r3, #1
 80010b8:	2201      	movs	r2, #1
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <__io_putchar+0x20>)
 80010bc:	f007 feda 	bl	8008e74 <HAL_UART_Transmit>
 return ch;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000033c 	.word	0x2000033c

080010d0 <magnitude>:

float magnitude(float *vec)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return sqrt(pow(vec[0],2) + pow(vec[1],2) + pow(vec[2],2));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9f3 	bl	80004c8 <__aeabi_f2d>
 80010e2:	4603      	mov	r3, r0
 80010e4:	460c      	mov	r4, r1
 80010e6:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001180 <magnitude+0xb0>
 80010ea:	ec44 3b10 	vmov	d0, r3, r4
 80010ee:	f009 f94d 	bl	800a38c <pow>
 80010f2:	ec55 4b10 	vmov	r4, r5, d0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f9e3 	bl	80004c8 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001180 <magnitude+0xb0>
 800110a:	ec43 2b10 	vmov	d0, r2, r3
 800110e:	f009 f93d 	bl	800a38c <pow>
 8001112:	ec53 2b10 	vmov	r2, r3, d0
 8001116:	4620      	mov	r0, r4
 8001118:	4629      	mov	r1, r5
 800111a:	f7ff f877 	bl	800020c <__adddf3>
 800111e:	4603      	mov	r3, r0
 8001120:	460c      	mov	r4, r1
 8001122:	4625      	mov	r5, r4
 8001124:	461c      	mov	r4, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3308      	adds	r3, #8
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f9cb 	bl	80004c8 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001180 <magnitude+0xb0>
 800113a:	ec43 2b10 	vmov	d0, r2, r3
 800113e:	f009 f925 	bl	800a38c <pow>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff f85f 	bl	800020c <__adddf3>
 800114e:	4603      	mov	r3, r0
 8001150:	460c      	mov	r4, r1
 8001152:	ec44 3b17 	vmov	d7, r3, r4
 8001156:	eeb0 0a47 	vmov.f32	s0, s14
 800115a:	eef0 0a67 	vmov.f32	s1, s15
 800115e:	f009 fa85 	bl	800a66c <sqrt>
 8001162:	ec54 3b10 	vmov	r3, r4, d0
 8001166:	4618      	mov	r0, r3
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fcb5 	bl	8000ad8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	ee07 3a90 	vmov	s15, r3
}
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bdb0      	pop	{r4, r5, r7, pc}
 800117e:	bf00      	nop
 8001180:	00000000 	.word	0x00000000
 8001184:	40000000 	.word	0x40000000

08001188 <mean>:
float mean(float *vec)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  float sum=0.0;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  for (int i=0;i<10;i++){sum+=vec[i];}
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	e00e      	b.n	80011ba <mean+0x32>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b0:	edc7 7a03 	vstr	s15, [r7, #12]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	dded      	ble.n	800119c <mean+0x14>
  return sum/10;
 80011c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011cc:	eef0 7a66 	vmov.f32	s15, s13
}
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <stnd>:
float stnd(float *vec)
{
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  float s=0;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  float m=mean(vec);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffca 	bl	8001188 <mean>
 80011f4:	ed87 0a03 	vstr	s0, [r7, #12]
  for (int i=0;i<10;i++){s+=pow((vec[i]-m),2);}
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	e02d      	b.n	800125a <stnd+0x7a>
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	ed93 7a00 	vldr	s14, [r3]
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f957 	bl	80004c8 <__aeabi_f2d>
 800121a:	4603      	mov	r3, r0
 800121c:	460c      	mov	r4, r1
 800121e:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80012a0 <stnd+0xc0>
 8001222:	ec44 3b10 	vmov	d0, r3, r4
 8001226:	f009 f8b1 	bl	800a38c <pow>
 800122a:	ec56 5b10 	vmov	r5, r6, d0
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff f94a 	bl	80004c8 <__aeabi_f2d>
 8001234:	4603      	mov	r3, r0
 8001236:	460c      	mov	r4, r1
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	4628      	mov	r0, r5
 800123e:	4631      	mov	r1, r6
 8001240:	f7fe ffe4 	bl	800020c <__adddf3>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fc44 	bl	8000ad8 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	3301      	adds	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	2b09      	cmp	r3, #9
 800125e:	ddce      	ble.n	80011fe <stnd+0x1e>
  return sqrt(s/10);
 8001260:	edd7 7a05 	vldr	s15, [r7, #20]
 8001264:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001268:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800126c:	ee16 0a90 	vmov	r0, s13
 8001270:	f7ff f92a 	bl	80004c8 <__aeabi_f2d>
 8001274:	4603      	mov	r3, r0
 8001276:	460c      	mov	r4, r1
 8001278:	ec44 3b10 	vmov	d0, r3, r4
 800127c:	f009 f9f6 	bl	800a66c <sqrt>
 8001280:	ec54 3b10 	vmov	r3, r4, d0
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fc26 	bl	8000ad8 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	ee07 3a90 	vmov	s15, r3
}
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	f3af 8000 	nop.w
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40000000 	.word	0x40000000

080012a8 <detect>:
void detect(float stdv, float meanv, float stdm, float meanm)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80012b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80012b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80012ba:	edc7 1a00 	vstr	s3, [r7]
	if(meanv<=-0.131){
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff f902 	bl	80004c8 <__aeabi_f2d>
 80012c4:	a31e      	add	r3, pc, #120	; (adr r3, 8001340 <detect+0x98>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff fbd1 	bl	8000a70 <__aeabi_dcmple>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d012      	beq.n	80012fa <detect+0x52>
		if(stdm<=0.055){
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff f8f7 	bl	80004c8 <__aeabi_f2d>
 80012da:	a31b      	add	r3, pc, #108	; (adr r3, 8001348 <detect+0xa0>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff fbc6 	bl	8000a70 <__aeabi_dcmple>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <detect+0x4a>
			printf("case1\n");
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <detect+0x88>)
 80012ec:	f008 fc42 	bl	8009b74 <puts>
		}
		else{
			printf("case4\n");
		}
	}
}
 80012f0:	e015      	b.n	800131e <detect+0x76>
			printf("case2\n");
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <detect+0x8c>)
 80012f4:	f008 fc3e 	bl	8009b74 <puts>
}
 80012f8:	e011      	b.n	800131e <detect+0x76>
		if(meanm<=1.11){
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f7ff f8e4 	bl	80004c8 <__aeabi_f2d>
 8001300:	a309      	add	r3, pc, #36	; (adr r3, 8001328 <detect+0x80>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff fbb3 	bl	8000a70 <__aeabi_dcmple>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <detect+0x70>
			printf("case3\n");
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <detect+0x90>)
 8001312:	f008 fc2f 	bl	8009b74 <puts>
}
 8001316:	e002      	b.n	800131e <detect+0x76>
			printf("case4\n");
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <detect+0x94>)
 800131a:	f008 fc2b 	bl	8009b74 <puts>
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	5c28f5c3 	.word	0x5c28f5c3
 800132c:	3ff1c28f 	.word	0x3ff1c28f
 8001330:	0800b508 	.word	0x0800b508
 8001334:	0800b510 	.word	0x0800b510
 8001338:	0800b518 	.word	0x0800b518
 800133c:	0800b520 	.word	0x0800b520
 8001340:	a5e353f8 	.word	0xa5e353f8
 8001344:	bfc0c49b 	.word	0xbfc0c49b
 8001348:	c28f5c29 	.word	0xc28f5c29
 800134c:	3fac28f5 	.word	0x3fac28f5

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	f2ad 5d64 	subw	sp, sp, #1380	; 0x564
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int16_t axyz[3]={};
 8001358:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	809a      	strh	r2, [r3, #4]
  float Axyz[3]={};
 8001362:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
  float buffer_a[buflen][3]={};
 800136e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001372:	4618      	mov	r0, r3
 8001374:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001378:	461a      	mov	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	f008 fb96 	bl	8009aac <memset>
  float V[3]={0,0,0};
 8001380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  float pastAxyz[3]={0,0,0};
 800139e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  float magV[10]={};
 80013bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c0:	4618      	mov	r0, r3
 80013c2:	2328      	movs	r3, #40	; 0x28
 80013c4:	461a      	mov	r2, r3
 80013c6:	2100      	movs	r1, #0
 80013c8:	f008 fb70 	bl	8009aac <memset>
  float magM[10]={};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	4618      	mov	r0, r3
 80013d2:	2328      	movs	r3, #40	; 0x28
 80013d4:	461a      	mov	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	f008 fb68 	bl	8009aac <memset>
  float meanV=0.0;
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	f207 524c 	addw	r2, r7, #1356	; 0x54c
 80013e4:	6013      	str	r3, [r2, #0]
  float stdV=0.0;
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 80013ee:	6013      	str	r3, [r2, #0]
  float meanM=0.0;
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	f207 5244 	addw	r2, r7, #1348	; 0x544
 80013f8:	6013      	str	r3, [r2, #0]
  float stdM=0.0;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8001402:	6013      	str	r3, [r2, #0]
  float sizV=0.0;
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 800140c:	6013      	str	r3, [r2, #0]
  int cyc = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
  int CycTrue = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141a:	f001 fde0 	bl	8002fde <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 800141e:	f001 f8ab 	bl	8002578 <BSP_ACCELERO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001422:	f000 f9e7 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001426:	f000 fe25 	bl	8002074 <MX_GPIO_Init>
  MX_DMA_Init();
 800142a:	f000 fdf9 	bl	8002020 <MX_DMA_Init>
  MX_ADC1_Init();
 800142e:	f000 fa7d 	bl	800192c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8001432:	f000 fadf 	bl	80019f4 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8001436:	f000 fb15 	bl	8001a64 <MX_I2C1_Init>
  MX_I2C2_Init();
 800143a:	f000 fb53 	bl	8001ae4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800143e:	f000 fb91 	bl	8001b64 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8001442:	f000 fbe5 	bl	8001c10 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001446:	f000 fc21 	bl	8001c8c <MX_SPI3_Init>
  MX_UART4_Init();
 800144a:	f000 fcb7 	bl	8001dbc <MX_UART4_Init>
  MX_USART2_UART_Init();
 800144e:	f000 fd4d 	bl	8001eec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001452:	f000 fd99 	bl	8001f88 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001456:	f000 fcfd 	bl	8001e54 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800145a:	f000 fc55 	bl	8001d08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800145e:	2100      	movs	r1, #0
 8001460:	48dc      	ldr	r0, [pc, #880]	; (80017d4 <main+0x484>)
 8001462:	f006 fe83 	bl	800816c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_val, 2); // Start ADC in DMA mode
 8001466:	463b      	mov	r3, r7
 8001468:	2202      	movs	r2, #2
 800146a:	4619      	mov	r1, r3
 800146c:	48da      	ldr	r0, [pc, #872]	; (80017d8 <main+0x488>)
 800146e:	f002 f971 	bl	8003754 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Buzzer
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001478:	48d8      	ldr	r0, [pc, #864]	; (80017dc <main+0x48c>)
 800147a:	f003 fe09 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f001 fe22 	bl	80030c8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148a:	48d4      	ldr	r0, [pc, #848]	; (80017dc <main+0x48c>)
 800148c:	f003 fe00 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f001 fe19 	bl	80030c8 <HAL_Delay>
  	// Section about accelerometer
	  BSP_ACCELERO_AccGetXYZ(axyz);
 8001496:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f8aa 	bl	80025f4 <BSP_ACCELERO_AccGetXYZ>
	  Axyz[0]=(float)19.62*axyz[0]/16384;
 80014a0:	f9b7 352c 	ldrsh.w	r3, [r7, #1324]	; 0x52c
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80017e0 <main+0x490>
 80014b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b4:	eddf 6acb 	vldr	s13, [pc, #812]	; 80017e4 <main+0x494>
 80014b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014bc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80014c0:	edc3 7a00 	vstr	s15, [r3]
	  Axyz[1]=(float)19.62*axyz[1]/16384;
 80014c4:	f9b7 352e 	ldrsh.w	r3, [r7, #1326]	; 0x52e
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d0:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80017e0 <main+0x490>
 80014d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d8:	eddf 6ac2 	vldr	s13, [pc, #776]	; 80017e4 <main+0x494>
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80014e4:	edc3 7a00 	vstr	s15, [r3]
	  Axyz[2]=(float)19.62*axyz[2]/16384;
 80014e8:	f9b7 3530 	ldrsh.w	r3, [r7, #1328]	; 0x530
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f4:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80017e0 <main+0x490>
 80014f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014fc:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80017e4 <main+0x494>
 8001500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001504:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001508:	edc3 7a00 	vstr	s15, [r3]
	  pastAxyz[0]=buffer_a[cyc][0];
 800150c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001510:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001524:	601a      	str	r2, [r3, #0]
	  pastAxyz[1]=buffer_a[cyc][1];
 8001526:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800152a:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3304      	adds	r3, #4
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001540:	605a      	str	r2, [r3, #4]
	  pastAxyz[2]=buffer_a[cyc][2];
 8001542:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001546:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3308      	adds	r3, #8
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800155c:	609a      	str	r2, [r3, #8]
      buffer_a[cyc][0]=Axyz[0];
 800155e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001568:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4403      	add	r3, r0
 8001576:	6019      	str	r1, [r3, #0]
  	  buffer_a[cyc][1]=Axyz[1];
 8001578:	f207 5324 	addw	r3, r7, #1316	; 0x524
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001582:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4403      	add	r3, r0
 8001590:	3304      	adds	r3, #4
 8001592:	6019      	str	r1, [r3, #0]
  	  buffer_a[cyc][2]=Axyz[2];
 8001594:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800159e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4403      	add	r3, r0
 80015ac:	3308      	adds	r3, #8
 80015ae:	6019      	str	r1, [r3, #0]
	  magM[cyc%10]=magnitude(Axyz);
 80015b0:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80015b4:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <main+0x498>)
 80015b6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ba:	1099      	asrs	r1, r3, #2
 80015bc:	17d3      	asrs	r3, r2, #31
 80015be:	1acc      	subs	r4, r1, r3
 80015c0:	4623      	mov	r3, r4
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4423      	add	r3, r4
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	1ad4      	subs	r4, r2, r3
 80015ca:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fd7e 	bl	80010d0 <magnitude>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	f107 0208 	add.w	r2, r7, #8
 80015dc:	00a3      	lsls	r3, r4, #2
 80015de:	4413      	add	r3, r2
 80015e0:	edc3 7a00 	vstr	s15, [r3]
	  for (int i=0;i<3;i++){
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 80015ea:	e02d      	b.n	8001648 <main+0x2f8>
	  	V[i]+=(Axyz[i]-pastAxyz[i])/buflen;
 80015ec:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80015f0:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	ed93 7a00 	vldr	s14, [r3]
 80015fc:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8001606:	4413      	add	r3, r2
 8001608:	3b40      	subs	r3, #64	; 0x40
 800160a:	edd3 6a00 	vldr	s13, [r3]
 800160e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001612:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001622:	ed9f 6a72 	vldr	s12, [pc, #456]	; 80017ec <main+0x49c>
 8001626:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001632:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	edc3 7a00 	vstr	s15, [r3]
	  for (int i=0;i<3;i++){
 800163e:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8001648:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800164c:	2b02      	cmp	r3, #2
 800164e:	ddcd      	ble.n	80015ec <main+0x29c>
	  }
	  sizV=magnitude(V);
 8001650:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fd3b 	bl	80010d0 <magnitude>
 800165a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 800165e:	ed83 0a00 	vstr	s0, [r3]
	  magV[cyc%10]=0;
 8001662:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8001666:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <main+0x498>)
 8001668:	fb83 2301 	smull	r2, r3, r3, r1
 800166c:	109a      	asrs	r2, r3, #2
 800166e:	17cb      	asrs	r3, r1, #31
 8001670:	1ad2      	subs	r2, r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	1aca      	subs	r2, r1, r3
 800167c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001680:	0093      	lsls	r3, r2, #2
 8001682:	440b      	add	r3, r1
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
	  for (int i=0;i<3;i++){
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8001690:	e038      	b.n	8001704 <main+0x3b4>
	  	magV[cyc%10]+=Axyz[i]*V[i]/sizV;
 8001692:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <main+0x498>)
 8001698:	fb83 2301 	smull	r2, r3, r3, r1
 800169c:	109a      	asrs	r2, r3, #2
 800169e:	17cb      	asrs	r3, r1, #31
 80016a0:	1ad2      	subs	r2, r2, r3
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	1aca      	subs	r2, r1, r3
 80016ac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80016b0:	0093      	lsls	r3, r2, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	ed93 7a00 	vldr	s14, [r3]
 80016b8:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80016c2:	440b      	add	r3, r1
 80016c4:	3b40      	subs	r3, #64	; 0x40
 80016c6:	edd3 6a00 	vldr	s13, [r3]
 80016ca:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80016ce:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80016de:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 80016e2:	edd3 6a00 	vldr	s13, [r3]
 80016e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80016f2:	0093      	lsls	r3, r2, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	edc3 7a00 	vstr	s15, [r3]
	  for (int i=0;i<3;i++){
 80016fa:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80016fe:	3301      	adds	r3, #1
 8001700:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8001704:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8001708:	2b02      	cmp	r3, #2
 800170a:	ddc2      	ble.n	8001692 <main+0x342>
	  }
	  meanM=mean(magM);
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fd39 	bl	8001188 <mean>
 8001716:	f207 5344 	addw	r3, r7, #1348	; 0x544
 800171a:	ed83 0a00 	vstr	s0, [r3]
	  stdM=stnd(magM);
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fd5c 	bl	80011e0 <stnd>
 8001728:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800172c:	ed83 0a00 	vstr	s0, [r3]
	  meanV=mean(magV);
 8001730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fd27 	bl	8001188 <mean>
 800173a:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 800173e:	ed83 0a00 	vstr	s0, [r3]
	  stdV=stnd(magV);
 8001742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fd4a 	bl	80011e0 <stnd>
 800174c:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8001750:	ed83 0a00 	vstr	s0, [r3]

	  cyc++;
 8001754:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8001758:	3301      	adds	r3, #1
 800175a:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
	  if(cyc==buflen && !CycTrue){CycTrue=1;}
 800175e:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d106      	bne.n	8001774 <main+0x424>
 8001766:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <main+0x424>
 800176e:	2301      	movs	r3, #1
 8001770:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	  cyc=cyc%buflen;
 8001774:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <main+0x4a0>)
 800177a:	fb82 1203 	smull	r1, r2, r2, r3
 800177e:	1151      	asrs	r1, r2, #5
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	1a8a      	subs	r2, r1, r2
 8001784:	2164      	movs	r1, #100	; 0x64
 8001786:	fb01 f202 	mul.w	r2, r1, r2
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
	  if(CycTrue){
 8001790:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8001794:	2b00      	cmp	r3, #0
 8001796:	d011      	beq.n	80017bc <main+0x46c>
	  	detect(stdV, meanV, stdM, meanM);
 8001798:	f207 5344 	addw	r3, r7, #1348	; 0x544
 800179c:	edd3 1a00 	vldr	s3, [r3]
 80017a0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80017a4:	ed93 1a00 	vldr	s2, [r3]
 80017a8:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 80017ac:	edd3 0a00 	vldr	s1, [r3]
 80017b0:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80017b4:	ed93 0a00 	vldr	s0, [r3]
 80017b8:	f7ff fd76 	bl	80012a8 <detect>
	  uint16_t raw = HAL_ADC_GetValue(&hadc1);

	  emg_val = raw / (4095 / 3.3 * 3.0); // Max output voltage of EMG sensor is 3.0V, STM32L4+'s ADC is 12bit
	  */
	  // New code using DMA to read multiple channels
	  uint32_t emg = adc_val[0];
 80017bc:	463b      	mov	r3, r7
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
	  uint32_t heart = adc_val[1];
 80017c4:	463b      	mov	r3, r7
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
	  // Print out in terminal
	  //sprintf(msg, "EMG: %hu\r\nHeart Rate: %hu\r\n\r\n", emg, heart);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	  // Delay
	  HAL_Delay(100);
 80017cc:	2064      	movs	r0, #100	; 0x64
 80017ce:	f001 fc7b 	bl	80030c8 <HAL_Delay>
  {
 80017d2:	e64e      	b.n	8001472 <main+0x122>
 80017d4:	20000518 	.word	0x20000518
 80017d8:	200002d4 	.word	0x200002d4
 80017dc:	48000c00 	.word	0x48000c00
 80017e0:	419cf5c3 	.word	0x419cf5c3
 80017e4:	46800000 	.word	0x46800000
 80017e8:	66666667 	.word	0x66666667
 80017ec:	42c80000 	.word	0x42c80000
 80017f0:	51eb851f 	.word	0x51eb851f

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0bc      	sub	sp, #240	; 0xf0
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017fe:	2244      	movs	r2, #68	; 0x44
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f008 f952 	bl	8009aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2294      	movs	r2, #148	; 0x94
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f008 f944 	bl	8009aac <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001824:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001828:	f004 ff24 	bl	8006674 <HAL_PWREx_ControlVoltageScaling>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001832:	f000 fd4d 	bl	80022d0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001836:	2310      	movs	r3, #16
 8001838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001848:	2360      	movs	r3, #96	; 0x60
 800184a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001854:	2301      	movs	r3, #1
 8001856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001860:	2310      	movs	r3, #16
 8001862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800187c:	4618      	mov	r0, r3
 800187e:	f004 ff9d 	bl	80067bc <HAL_RCC_OscConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001888:	f000 fd22 	bl	80022d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188c:	230f      	movs	r3, #15
 800188e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001892:	2303      	movs	r3, #3
 8001894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 fba9 	bl	8007008 <HAL_RCC_ClockConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80018bc:	f000 fd08 	bl	80022d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <SystemClock_Config+0x134>)
 80018c2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018c4:	2300      	movs	r3, #0
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80018f0:	2301      	movs	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80018f8:	2310      	movs	r3, #16
 80018fa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001904:	2302      	movs	r3, #2
 8001906:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f005 fe29 	bl	8007568 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800191c:	f000 fcd8 	bl	80022d0 <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	37f0      	adds	r7, #240	; 0xf0
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	010140cf 	.word	0x010140cf

0800192c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001932:	463b      	mov	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <MX_ADC1_Init+0xc0>)
 8001946:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <MX_ADC1_Init+0xbc>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <MX_ADC1_Init+0xbc>)
 800195c:	2201      	movs	r2, #1
 800195e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001962:	2204      	movs	r2, #4
 8001964:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001968:	2200      	movs	r2, #0
 800196a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <MX_ADC1_Init+0xbc>)
 800196e:	2201      	movs	r2, #1
 8001970:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001974:	2202      	movs	r2, #2
 8001976:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_ADC1_Init+0xbc>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001988:	2200      	movs	r2, #0
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MX_ADC1_Init+0xbc>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_ADC1_Init+0xbc>)
 8001996:	2200      	movs	r2, #0
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_ADC1_Init+0xbc>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <MX_ADC1_Init+0xbc>)
 80019a4:	f001 fd8c 	bl	80034c0 <HAL_ADC_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019ae:	f000 fc8f 	bl	80022d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_ADC1_Init+0xc4>)
 80019b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019b6:	230c      	movs	r3, #12
 80019b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019be:	237f      	movs	r3, #127	; 0x7f
 80019c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c2:	2304      	movs	r3, #4
 80019c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_ADC1_Init+0xbc>)
 80019d0:	f001 ff62 	bl	8003898 <HAL_ADC_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80019da:	f000 fc79 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002d4 	.word	0x200002d4
 80019ec:	50040000 	.word	0x50040000
 80019f0:	08600004 	.word	0x08600004

080019f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 80019fa:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <MX_DFSDM1_Init+0x6c>)
 80019fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_DFSDM1_Init+0x68>)
 8001a48:	f002 fd20 	bl	800448c <HAL_DFSDM_ChannelInit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001a52:	f000 fc3d 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200005f0 	.word	0x200005f0
 8001a60:	40016040 	.word	0x40016040

08001a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <MX_I2C1_Init+0x78>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a70:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <MX_I2C1_Init+0x7c>)
 8001a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001aa0:	f003 fb31 	bl	8005106 <HAL_I2C_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aaa:	f000 fc11 	bl	80022d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ab2:	f004 f831 	bl	8005b18 <HAL_I2CEx_ConfigAnalogFilter>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001abc:	f000 fc08 	bl	80022d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ac4:	f004 f873 	bl	8005bae <HAL_I2CEx_ConfigDigitalFilter>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ace:	f000 fbff 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000188 	.word	0x20000188
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	00707cbb 	.word	0x00707cbb

08001ae4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <MX_I2C2_Init+0x78>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <MX_I2C2_Init+0x7c>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b1e:	480e      	ldr	r0, [pc, #56]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b20:	f003 faf1 	bl	8005106 <HAL_I2C_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b2a:	f000 fbd1 	bl	80022d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b32:	f003 fff1 	bl	8005b18 <HAL_I2CEx_ConfigAnalogFilter>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b3c:	f000 fbc8 	bl	80022d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b40:	2100      	movs	r1, #0
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_I2C2_Init+0x74>)
 8001b44:	f004 f833 	bl	8005bae <HAL_I2CEx_ConfigDigitalFilter>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b4e:	f000 fbbf 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000224 	.word	0x20000224
 8001b5c:	40005800 	.word	0x40005800
 8001b60:	00707cbb 	.word	0x00707cbb

08001b64 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001b7a:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <MX_OCTOSPI1_Init+0xa8>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b90:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001b94:	2220      	movs	r2, #32
 8001b96:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001bc8:	480f      	ldr	r0, [pc, #60]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001bca:	f004 f83d 	bl	8005c48 <HAL_OSPI_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001bd4:	f000 fb7c 	bl	80022d0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001be0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001be4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <MX_OCTOSPI1_Init+0xa4>)
 8001bf0:	f004 f8e4 	bl	8005dbc <HAL_OSPIM_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001bfa:	f000 fb69 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001d4 	.word	0x200001d4
 8001c0c:	a0001000 	.word	0xa0001000

08001c10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_SPI1_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c46:	2208      	movs	r2, #8
 8001c48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c5e:	2207      	movs	r2, #7
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_SPI1_Init+0x74>)
 8001c70:	f006 f982 	bl	8007f78 <HAL_SPI_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c7a:	f000 fb29 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200004b4 	.word	0x200004b4
 8001c88:	40013000 	.word	0x40013000

08001c8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <MX_SPI3_Init+0x78>)
 8001c94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001ca6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001caa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cbe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cda:	2207      	movs	r2, #7
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_SPI3_Init+0x74>)
 8001cec:	f006 f944 	bl	8007f78 <HAL_SPI_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001cf6:	f000 faeb 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000270 	.word	0x20000270
 8001d04:	40003c00 	.word	0x40003c00

08001d08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600;
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d36:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d44:	220a      	movs	r2, #10
 8001d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d56:	f006 f9b2 	bl	80080be <HAL_TIM_PWM_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d60:	f000 fab6 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	4811      	ldr	r0, [pc, #68]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d74:	f006 ffa6 	bl	8008cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d7e:	f000 faa7 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d82:	2360      	movs	r3, #96	; 0x60
 8001d84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4;
 8001d86:	2304      	movs	r3, #4
 8001d88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001d9a:	f006 faed 	bl	8008378 <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001da4:	f000 fa94 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM2_Init+0xb0>)
 8001daa:	f000 feab 	bl	8002b04 <HAL_TIM_MspPostInit>

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000518 	.word	0x20000518

08001dbc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <MX_UART4_Init+0x90>)
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <MX_UART4_Init+0x94>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <MX_UART4_Init+0x90>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_UART4_Init+0x90>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <MX_UART4_Init+0x90>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_UART4_Init+0x90>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_UART4_Init+0x90>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <MX_UART4_Init+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_UART4_Init+0x90>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_UART4_Init+0x90>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_UART4_Init+0x90>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_UART4_Init+0x90>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e04:	4811      	ldr	r0, [pc, #68]	; (8001e4c <MX_UART4_Init+0x90>)
 8001e06:	f006 ffe5 	bl	8008dd4 <HAL_UART_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001e10:	f000 fa5e 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e14:	2100      	movs	r1, #0
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <MX_UART4_Init+0x90>)
 8001e18:	f007 fd39 	bl	800988e <HAL_UARTEx_SetTxFifoThreshold>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001e22:	f000 fa55 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e26:	2100      	movs	r1, #0
 8001e28:	4808      	ldr	r0, [pc, #32]	; (8001e4c <MX_UART4_Init+0x90>)
 8001e2a:	f007 fd6e 	bl	800990a <HAL_UARTEx_SetRxFifoThreshold>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001e34:	f000 fa4c 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_UART4_Init+0x90>)
 8001e3a:	f007 fcef 	bl	800981c <HAL_UARTEx_DisableFifoMode>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001e44:	f000 fa44 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000428 	.word	0x20000428
 8001e50:	40004c00 	.word	0x40004c00

08001e54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e5a:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <MX_USART1_UART_Init+0x94>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e9c:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001e9e:	f006 ff99 	bl	8008dd4 <HAL_UART_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ea8:	f000 fa12 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eac:	2100      	movs	r1, #0
 8001eae:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001eb0:	f007 fced 	bl	800988e <HAL_UARTEx_SetTxFifoThreshold>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001eba:	f000 fa09 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4808      	ldr	r0, [pc, #32]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001ec2:	f007 fd22 	bl	800990a <HAL_UARTEx_SetRxFifoThreshold>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ecc:	f000 fa00 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_USART1_UART_Init+0x90>)
 8001ed2:	f007 fca3 	bl	800981c <HAL_UARTEx_DisableFifoMode>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001edc:	f000 f9f8 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000033c 	.word	0x2000033c
 8001ee8:	40013800 	.word	0x40013800

08001eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001ef2:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <MX_USART2_UART_Init+0x98>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f18:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f1c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f36:	4812      	ldr	r0, [pc, #72]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f38:	f006 ff4c 	bl	8008dd4 <HAL_UART_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001f42:	f000 f9c5 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f46:	2100      	movs	r1, #0
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f4a:	f007 fca0 	bl	800988e <HAL_UARTEx_SetTxFifoThreshold>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001f54:	f000 f9bc 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4809      	ldr	r0, [pc, #36]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f5c:	f007 fcd5 	bl	800990a <HAL_UARTEx_SetRxFifoThreshold>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001f66:	f000 f9b3 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART2_UART_Init+0x94>)
 8001f6c:	f007 fc56 	bl	800981c <HAL_UARTEx_DisableFifoMode>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001f76:	f000 f9ab 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000564 	.word	0x20000564
 8001f84:	40004400 	.word	0x40004400

08001f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <MX_USART3_UART_Init+0x94>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fd0:	4811      	ldr	r0, [pc, #68]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fd2:	f006 feff 	bl	8008dd4 <HAL_UART_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fdc:	f000 f978 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001fe4:	f007 fc53 	bl	800988e <HAL_UARTEx_SetTxFifoThreshold>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fee:	f000 f96f 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4808      	ldr	r0, [pc, #32]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8001ff6:	f007 fc88 	bl	800990a <HAL_UARTEx_SetRxFifoThreshold>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002000:	f000 f966 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_USART3_UART_Init+0x90>)
 8002006:	f007 fc09 	bl	800981c <HAL_UARTEx_DisableFifoMode>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002010:	f000 f95e 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200000fc 	.word	0x200000fc
 800201c:	40004800 	.word	0x40004800

08002020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_DMA_Init+0x50>)
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <MX_DMA_Init+0x50>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6493      	str	r3, [r2, #72]	; 0x48
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_DMA_Init+0x50>)
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_DMA_Init+0x50>)
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <MX_DMA_Init+0x50>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6493      	str	r3, [r2, #72]	; 0x48
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_DMA_Init+0x50>)
 800204c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	200b      	movs	r0, #11
 800205c:	f002 f9df 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002060:	200b      	movs	r0, #11
 8002062:	f002 f9f8 	bl	8004456 <HAL_NVIC_EnableIRQ>

}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <MX_GPIO_Init+0x244>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	4a8a      	ldr	r2, [pc, #552]	; (80022b8 <MX_GPIO_Init+0x244>)
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <MX_GPIO_Init+0x244>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	4a84      	ldr	r2, [pc, #528]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ae:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ba:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	4a7e      	ldr	r2, [pc, #504]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c6:	4b7c      	ldr	r3, [pc, #496]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	4b79      	ldr	r3, [pc, #484]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	4a78      	ldr	r2, [pc, #480]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020de:	4b76      	ldr	r3, [pc, #472]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f6:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <MX_GPIO_Init+0x244>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002102:	4b6d      	ldr	r3, [pc, #436]	; (80022b8 <MX_GPIO_Init+0x244>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a6c      	ldr	r2, [pc, #432]	; (80022b8 <MX_GPIO_Init+0x244>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210e:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <MX_GPIO_Init+0x244>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f240 1105 	movw	r1, #261	; 0x105
 8002120:	4866      	ldr	r0, [pc, #408]	; (80022bc <MX_GPIO_Init+0x248>)
 8002122:	f002 ffb5 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002126:	2200      	movs	r2, #0
 8002128:	f241 111c 	movw	r1, #4380	; 0x111c
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f002 ffae 	bl	8005090 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002134:	2200      	movs	r2, #0
 8002136:	f24f 0134 	movw	r1, #61492	; 0xf034
 800213a:	4861      	ldr	r0, [pc, #388]	; (80022c0 <MX_GPIO_Init+0x24c>)
 800213c:	f002 ffa8 	bl	8005090 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002140:	2200      	movs	r2, #0
 8002142:	f242 0183 	movw	r1, #8323	; 0x2083
 8002146:	485f      	ldr	r0, [pc, #380]	; (80022c4 <MX_GPIO_Init+0x250>)
 8002148:	f002 ffa2 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002152:	485d      	ldr	r0, [pc, #372]	; (80022c8 <MX_GPIO_Init+0x254>)
 8002154:	f002 ff9c 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002158:	f240 1305 	movw	r3, #261	; 0x105
 800215c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215e:	2301      	movs	r3, #1
 8002160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4852      	ldr	r0, [pc, #328]	; (80022bc <MX_GPIO_Init+0x248>)
 8002172:	f002 fd09 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002176:	237a      	movs	r3, #122	; 0x7a
 8002178:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <MX_GPIO_Init+0x258>)
 800217c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	4619      	mov	r1, r3
 8002188:	484c      	ldr	r0, [pc, #304]	; (80022bc <MX_GPIO_Init+0x248>)
 800218a:	f002 fcfd 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800218e:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002194:	4b4d      	ldr	r3, [pc, #308]	; (80022cc <MX_GPIO_Init+0x258>)
 8002196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	4849      	ldr	r0, [pc, #292]	; (80022c8 <MX_GPIO_Init+0x254>)
 80021a4:	f002 fcf0 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80021a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80021ac:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c4:	f002 fce0 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <MX_GPIO_Init+0x258>)
 80021ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	4619      	mov	r1, r3
 80021da:	4839      	ldr	r0, [pc, #228]	; (80022c0 <MX_GPIO_Init+0x24c>)
 80021dc:	f002 fcd4 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021f0:	2302      	movs	r3, #2
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	4619      	mov	r1, r3
 80021fa:	4831      	ldr	r0, [pc, #196]	; (80022c0 <MX_GPIO_Init+0x24c>)
 80021fc:	f002 fcc4 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002200:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002204:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	4829      	ldr	r0, [pc, #164]	; (80022c0 <MX_GPIO_Init+0x24c>)
 800221a:	f002 fcb5 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 800221e:	f645 4304 	movw	r3, #23556	; 0x5c04
 8002222:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <MX_GPIO_Init+0x258>)
 8002226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	4824      	ldr	r0, [pc, #144]	; (80022c4 <MX_GPIO_Init+0x250>)
 8002234:	f002 fca8 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002238:	f242 0383 	movw	r3, #8323	; 0x2083
 800223c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	481c      	ldr	r0, [pc, #112]	; (80022c4 <MX_GPIO_Init+0x250>)
 8002252:	f002 fc99 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002256:	f44f 7310 	mov.w	r3, #576	; 0x240
 800225a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4816      	ldr	r0, [pc, #88]	; (80022c8 <MX_GPIO_Init+0x254>)
 8002270:	f002 fc8a 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228c:	f002 fc7c 	bl	8004b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2017      	movs	r0, #23
 8002296:	f002 f8c2 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800229a:	2017      	movs	r0, #23
 800229c:	f002 f8db 	bl	8004456 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	2028      	movs	r0, #40	; 0x28
 80022a6:	f002 f8ba 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022aa:	2028      	movs	r0, #40	; 0x28
 80022ac:	f002 f8d3 	bl	8004456 <HAL_NVIC_EnableIRQ>

}
 80022b0:	bf00      	nop
 80022b2:	3730      	adds	r7, #48	; 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	48001000 	.word	0x48001000
 80022c0:	48000400 	.word	0x48000400
 80022c4:	48000c00 	.word	0x48000c00
 80022c8:	48000800 	.word	0x48000800
 80022cc:	10110000 	.word	0x10110000

080022d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <Error_Handler+0x6>

080022d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <I2Cx_MspInit+0xa8>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <I2Cx_MspInit+0xa8>)
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <I2Cx_MspInit+0xa8>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80022f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002302:	2301      	movs	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800230a:	2304      	movs	r3, #4
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	481b      	ldr	r0, [pc, #108]	; (8002384 <I2Cx_MspInit+0xac>)
 8002316:	f002 fc37 	bl	8004b88 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4818      	ldr	r0, [pc, #96]	; (8002384 <I2Cx_MspInit+0xac>)
 8002322:	f002 fc31 	bl	8004b88 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <I2Cx_MspInit+0xa8>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <I2Cx_MspInit+0xa8>)
 800232c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <I2Cx_MspInit+0xa8>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <I2Cx_MspInit+0xa8>)
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <I2Cx_MspInit+0xa8>)
 8002344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002348:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <I2Cx_MspInit+0xa8>)
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <I2Cx_MspInit+0xa8>)
 8002350:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002354:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	210f      	movs	r1, #15
 800235a:	2021      	movs	r0, #33	; 0x21
 800235c:	f002 f85f 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002360:	2021      	movs	r0, #33	; 0x21
 8002362:	f002 f878 	bl	8004456 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	210f      	movs	r1, #15
 800236a:	2022      	movs	r0, #34	; 0x22
 800236c:	f002 f857 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002370:	2022      	movs	r0, #34	; 0x22
 8002372:	f002 f870 	bl	8004456 <HAL_NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	48000400 	.word	0x48000400

08002388 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <I2Cx_Init+0x54>)
 8002394:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <I2Cx_Init+0x58>)
 800239a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff89 	bl	80022d8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f002 fe9d 	bl	8005106 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80023cc:	2100      	movs	r1, #0
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f003 fba2 	bl	8005b18 <HAL_I2CEx_ConfigAnalogFilter>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40005800 	.word	0x40005800
 80023e0:	00702681 	.word	0x00702681

080023e4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af04      	add	r7, sp, #16
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	72fb      	strb	r3, [r7, #11]
 80023f6:	460b      	mov	r3, r1
 80023f8:	813b      	strh	r3, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002402:	7afb      	ldrb	r3, [r7, #11]
 8002404:	b299      	uxth	r1, r3
 8002406:	88f8      	ldrh	r0, [r7, #6]
 8002408:	893a      	ldrh	r2, [r7, #8]
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	9302      	str	r3, [sp, #8]
 8002410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4603      	mov	r3, r0
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f003 f846 	bl	80054ac <HAL_I2C_Mem_Read>
 8002420:	4603      	mov	r3, r0
 8002422:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	4619      	mov	r1, r3
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f832 	bl	8002498 <I2Cx_Error>
  }
  return status;
 8002434:	7dfb      	ldrb	r3, [r7, #23]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b08a      	sub	sp, #40	; 0x28
 8002442:	af04      	add	r7, sp, #16
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	4608      	mov	r0, r1
 8002448:	4611      	mov	r1, r2
 800244a:	461a      	mov	r2, r3
 800244c:	4603      	mov	r3, r0
 800244e:	72fb      	strb	r3, [r7, #11]
 8002450:	460b      	mov	r3, r1
 8002452:	813b      	strh	r3, [r7, #8]
 8002454:	4613      	mov	r3, r2
 8002456:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	b299      	uxth	r1, r3
 8002460:	88f8      	ldrh	r0, [r7, #6]
 8002462:	893a      	ldrh	r2, [r7, #8]
 8002464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4603      	mov	r3, r0
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f002 ff05 	bl	8005284 <HAL_I2C_Mem_Write>
 800247a:	4603      	mov	r3, r0
 800247c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	4619      	mov	r1, r3
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f805 	bl	8002498 <I2Cx_Error>
  }
  return status;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f002 febd 	bl	8005224 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ff6c 	bl	8002388 <I2Cx_Init>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <SENSOR_IO_Init+0x10>)
 80024be:	f7ff ff63 	bl	8002388 <I2Cx_Init>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200006b4 	.word	0x200006b4

080024cc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	460b      	mov	r3, r1
 80024d8:	71bb      	strb	r3, [r7, #6]
 80024da:	4613      	mov	r3, r2
 80024dc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	79f9      	ldrb	r1, [r7, #7]
 80024e4:	2301      	movs	r3, #1
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	1d7b      	adds	r3, r7, #5
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <SENSOR_IO_Write+0x30>)
 80024f0:	f7ff ffa5 	bl	800243e <I2Cx_WriteMultiple>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200006b4 	.word	0x200006b4

08002500 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af02      	add	r7, sp, #8
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002514:	79bb      	ldrb	r3, [r7, #6]
 8002516:	b29a      	uxth	r2, r3
 8002518:	79f9      	ldrb	r1, [r7, #7]
 800251a:	2301      	movs	r3, #1
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	f107 030f 	add.w	r3, r7, #15
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2301      	movs	r3, #1
 8002526:	4804      	ldr	r0, [pc, #16]	; (8002538 <SENSOR_IO_Read+0x38>)
 8002528:	f7ff ff5c 	bl	80023e4 <I2Cx_ReadMultiple>

  return read_value;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200006b4 	.word	0x200006b4

0800253c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af02      	add	r7, sp, #8
 8002542:	603a      	str	r2, [r7, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
 800254a:	460b      	mov	r3, r1
 800254c:	71bb      	strb	r3, [r7, #6]
 800254e:	4613      	mov	r3, r2
 8002550:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	b29a      	uxth	r2, r3
 8002556:	79f9      	ldrb	r1, [r7, #7]
 8002558:	88bb      	ldrh	r3, [r7, #4]
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	4804      	ldr	r0, [pc, #16]	; (8002574 <SENSOR_IO_ReadMultiple+0x38>)
 8002564:	f7ff ff3e 	bl	80023e4 <I2Cx_ReadMultiple>
 8002568:	4603      	mov	r3, r0
 800256a:	b29b      	uxth	r3, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200006b4 	.word	0x200006b4

08002578 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002582:	2300      	movs	r3, #0
 8002584:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <BSP_ACCELERO_Init+0x74>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4798      	blx	r3
 800258c:	4603      	mov	r3, r0
 800258e:	2b6a      	cmp	r3, #106	; 0x6a
 8002590:	d002      	beq.n	8002598 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e024      	b.n	80025e2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <BSP_ACCELERO_Init+0x78>)
 800259a:	4a14      	ldr	r2, [pc, #80]	; (80025ec <BSP_ACCELERO_Init+0x74>)
 800259c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800259e:	2330      	movs	r3, #48	; 0x30
 80025a0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80025a6:	2300      	movs	r3, #0
 80025a8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80025b6:	797a      	ldrb	r2, [r7, #5]
 80025b8:	7abb      	ldrb	r3, [r7, #10]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80025c0:	7a3b      	ldrb	r3, [r7, #8]
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <BSP_ACCELERO_Init+0x78>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	89ba      	ldrh	r2, [r7, #12]
 80025de:	4610      	mov	r0, r2
 80025e0:	4798      	blx	r3
  }  

  return ret;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000000 	.word	0x20000000
 80025f0:	200000c4 	.word	0x200000c4

080025f4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d009      	beq.n	8002618 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
    }
  }
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200000c4 	.word	0x200000c4

08002624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_MspInit+0x44>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <HAL_MspInit+0x44>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6613      	str	r3, [r2, #96]	; 0x60
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_MspInit+0x44>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_MspInit+0x44>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_MspInit+0x44>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_MspInit+0x44>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2a      	ldr	r2, [pc, #168]	; (8002734 <HAL_ADC_MspInit+0xc8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d14e      	bne.n	800272c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800268e:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_ADC_MspInit+0xcc>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4a29      	ldr	r2, [pc, #164]	; (8002738 <HAL_ADC_MspInit+0xcc>)
 8002694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269a:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_ADC_MspInit+0xcc>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_ADC_MspInit+0xcc>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a23      	ldr	r2, [pc, #140]	; (8002738 <HAL_ADC_MspInit+0xcc>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_ADC_MspInit+0xcc>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A3_Pin|ARD_A2_Pin
 80026be:	233f      	movs	r3, #63	; 0x3f
 80026c0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026c2:	230b      	movs	r3, #11
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	481a      	ldr	r0, [pc, #104]	; (800273c <HAL_ADC_MspInit+0xd0>)
 80026d2:	f002 fa59 	bl	8004b88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_ADC_MspInit+0xd8>)
 80026da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 80026de:	2205      	movs	r2, #5
 80026e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 80026f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 80026fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002702:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 8002706:	2220      	movs	r2, #32
 8002708:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002710:	480b      	ldr	r0, [pc, #44]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 8002712:	f001 ffc7 	bl	80046a4 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 800271c:	f7ff fdd8 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 8002724:	651a      	str	r2, [r3, #80]	; 0x50
 8002726:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_ADC_MspInit+0xd4>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3728      	adds	r7, #40	; 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	50040000 	.word	0x50040000
 8002738:	40021000 	.word	0x40021000
 800273c:	48000800 	.word	0x48000800
 8002740:	200003c8 	.word	0x200003c8
 8002744:	40020008 	.word	0x40020008

08002748 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_DFSDM_ChannelMspInit+0x84>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d12d      	bne.n	80027c4 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002772:	6613      	str	r3, [r2, #96]	; 0x60
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_DFSDM_ChannelMspInit+0x88>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002798:	f44f 7320 	mov.w	r3, #640	; 0x280
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80027aa:	2306      	movs	r3, #6
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4807      	ldr	r0, [pc, #28]	; (80027d4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80027b6:	f002 f9e7 	bl	8004b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_DFSDM_ChannelMspInit+0x84>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	4a02      	ldr	r2, [pc, #8]	; (80027cc <HAL_DFSDM_ChannelMspInit+0x84>)
 80027c2:	6013      	str	r3, [r2, #0]
  }

}
 80027c4:	bf00      	nop
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200000c8 	.word	0x200000c8
 80027d0:	40021000 	.word	0x40021000
 80027d4:	48001000 	.word	0x48001000

080027d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2f      	ldr	r2, [pc, #188]	; (80028b4 <HAL_I2C_MspInit+0xdc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d129      	bne.n	800284e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4a2e      	ldr	r2, [pc, #184]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002818:	2312      	movs	r3, #18
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281c:	2301      	movs	r3, #1
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002824:	2304      	movs	r3, #4
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	4823      	ldr	r0, [pc, #140]	; (80028bc <HAL_I2C_MspInit+0xe4>)
 8002830:	f002 f9aa 	bl	8004b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 800283a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800283e:	6593      	str	r3, [r2, #88]	; 0x58
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800284c:	e02d      	b.n	80028aa <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_I2C_MspInit+0xe8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d128      	bne.n	80028aa <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 8002866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002870:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002876:	2312      	movs	r3, #18
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287a:	2301      	movs	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287e:	2303      	movs	r3, #3
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002882:	2304      	movs	r3, #4
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	480b      	ldr	r0, [pc, #44]	; (80028bc <HAL_I2C_MspInit+0xe4>)
 800288e:	f002 f97b 	bl	8004b88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 8002898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_I2C_MspInit+0xe0>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	bf00      	nop
 80028ac:	3730      	adds	r7, #48	; 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40005400 	.word	0x40005400
 80028b8:	40021000 	.word	0x40021000
 80028bc:	48000400 	.word	0x48000400
 80028c0:	40005800 	.word	0x40005800

080028c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_I2C_MspDeInit+0x68>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d110      	bne.n	80028f8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_I2C_MspDeInit+0x6c>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_I2C_MspDeInit+0x6c>)
 80028dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80028e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028e6:	4813      	ldr	r0, [pc, #76]	; (8002934 <HAL_I2C_MspDeInit+0x70>)
 80028e8:	f002 fae0 	bl	8004eac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80028ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028f0:	4810      	ldr	r0, [pc, #64]	; (8002934 <HAL_I2C_MspDeInit+0x70>)
 80028f2:	f002 fadb 	bl	8004eac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80028f6:	e014      	b.n	8002922 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <HAL_I2C_MspDeInit+0x74>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10f      	bne.n	8002922 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_I2C_MspDeInit+0x6c>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_I2C_MspDeInit+0x6c>)
 8002908:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800290e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002912:	4808      	ldr	r0, [pc, #32]	; (8002934 <HAL_I2C_MspDeInit+0x70>)
 8002914:	f002 faca 	bl	8004eac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800291c:	4805      	ldr	r0, [pc, #20]	; (8002934 <HAL_I2C_MspDeInit+0x70>)
 800291e:	f002 fac5 	bl	8004eac <HAL_GPIO_DeInit>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40005400 	.word	0x40005400
 8002930:	40021000 	.word	0x40021000
 8002934:	48000400 	.word	0x48000400
 8002938:	40005800 	.word	0x40005800

0800293c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_OSPI_MspInit+0x94>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d134      	bne.n	80029c8 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 8002964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 8002978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	6513      	str	r3, [r2, #80]	; 0x50
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 8002994:	f043 0310 	orr.w	r3, r3, #16
 8002998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_OSPI_MspInit+0x98>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80029a6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80029aa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80029b8:	230a      	movs	r3, #10
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <HAL_OSPI_MspInit+0x9c>)
 80029c4:	f002 f8e0 	bl	8004b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	a0001000 	.word	0xa0001000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	48001000 	.word	0x48001000

080029dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2f      	ldr	r2, [pc, #188]	; (8002ab8 <HAL_SPI_MspInit+0xdc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d129      	bne.n	8002a52 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029fe:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a08:	6613      	str	r3, [r2, #96]	; 0x60
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	4a28      	ldr	r2, [pc, #160]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002a2e:	23e0      	movs	r3, #224	; 0xe0
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f002 f89c 	bl	8004b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a50:	e02d      	b.n	8002aae <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <HAL_SPI_MspInit+0xe4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d128      	bne.n	8002aae <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a66:	6593      	str	r3, [r2, #88]	; 0x58
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_SPI_MspInit+0xe0>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002a8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a9e:	2306      	movs	r3, #6
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <HAL_SPI_MspInit+0xe8>)
 8002aaa:	f002 f86d 	bl	8004b88 <HAL_GPIO_Init>
}
 8002aae:	bf00      	nop
 8002ab0:	3730      	adds	r7, #48	; 0x30
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40013000 	.word	0x40013000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40003c00 	.word	0x40003c00
 8002ac4:	48000800 	.word	0x48000800

08002ac8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d10b      	bne.n	8002af2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_TIM_PWM_MspInit+0x38>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_TIM_PWM_MspInit+0x38>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_TIM_PWM_MspInit+0x38>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d11d      	bne.n	8002b62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_TIM_MspPostInit+0x68>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_TIM_MspPostInit+0x68>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <HAL_TIM_MspPostInit+0x68>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b50:	2301      	movs	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f002 f813 	bl	8004b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b62:	bf00      	nop
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000

08002b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b090      	sub	sp, #64	; 0x40
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <HAL_UART_MspInit+0x194>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d129      	bne.n	8002be6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a5c      	ldr	r2, [pc, #368]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9e:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be0:	f001 ffd2 	bl	8004b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002be4:	e089      	b.n	8002cfa <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <HAL_UART_MspInit+0x19c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d128      	bne.n	8002c42 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf0:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	4a44      	ldr	r2, [pc, #272]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfa:	6613      	str	r3, [r2, #96]	; 0x60
 8002bfc:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	4a3e      	ldr	r2, [pc, #248]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c14:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 8002c20:	23c0      	movs	r3, #192	; 0xc0
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c30:	2307      	movs	r3, #7
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4835      	ldr	r0, [pc, #212]	; (8002d10 <HAL_UART_MspInit+0x1a0>)
 8002c3c:	f001 ffa4 	bl	8004b88 <HAL_GPIO_Init>
}
 8002c40:	e05b      	b.n	8002cfa <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <HAL_UART_MspInit+0x1a4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d128      	bne.n	8002c9e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c56:	6593      	str	r3, [r2, #88]	; 0x58
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002c7c:	2378      	movs	r3, #120	; 0x78
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c8c:	2307      	movs	r3, #7
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c94:	4619      	mov	r1, r3
 8002c96:	4820      	ldr	r0, [pc, #128]	; (8002d18 <HAL_UART_MspInit+0x1a8>)
 8002c98:	f001 ff76 	bl	8004b88 <HAL_GPIO_Init>
}
 8002c9c:	e02d      	b.n	8002cfa <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_UART_MspInit+0x1ac>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d128      	bne.n	8002cfa <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002cae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_UART_MspInit+0x198>)
 8002cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002cd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cea:	2307      	movs	r3, #7
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <HAL_UART_MspInit+0x1a8>)
 8002cf6:	f001 ff47 	bl	8004b88 <HAL_GPIO_Init>
}
 8002cfa:	bf00      	nop
 8002cfc:	3740      	adds	r7, #64	; 0x40
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40004c00 	.word	0x40004c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	48000400 	.word	0x48000400
 8002d14:	40004400 	.word	0x40004400
 8002d18:	48000c00 	.word	0x48000c00
 8002d1c:	40004800 	.word	0x40004800

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <NMI_Handler+0x4>

08002d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2a:	e7fe      	b.n	8002d2a <HardFault_Handler+0x4>

08002d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <MemManage_Handler+0x4>

08002d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d36:	e7fe      	b.n	8002d36 <BusFault_Handler+0x4>

08002d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <UsageFault_Handler+0x4>

08002d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d6c:	f000 f98c 	bl	8003088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <DMA1_Channel1_IRQHandler+0x10>)
 8002d7a:	f001 fdb6 	bl	80048ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200003c8 	.word	0x200003c8

08002d88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002d8c:	2020      	movs	r0, #32
 8002d8e:	f002 f997 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d92:	2040      	movs	r0, #64	; 0x40
 8002d94:	f002 f994 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d98:	2080      	movs	r0, #128	; 0x80
 8002d9a:	f002 f991 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002d9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002da2:	f002 f98d 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}

08002daa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002dae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002db2:	f002 f985 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002db6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002dba:	f002 f981 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002dbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002dc2:	f002 f97d 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002dc6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002dca:	f002 f979 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002dce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dd2:	f002 f975 	bl	80050c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e00a      	b.n	8002e02 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dec:	f3af 8000 	nop.w
 8002df0:	4601      	mov	r1, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	60ba      	str	r2, [r7, #8]
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	dbf0      	blt.n	8002dec <_read+0x12>
	}

return len;
 8002e0a:	687b      	ldr	r3, [r7, #4]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e009      	b.n	8002e3a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	60ba      	str	r2, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f93c 	bl	80010ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbf1      	blt.n	8002e26 <_write+0x12>
	}
	return len;
 8002e42:	687b      	ldr	r3, [r7, #4]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_close>:

int _close(int file)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	return -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e74:	605a      	str	r2, [r3, #4]
	return 0;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_isatty>:

int _isatty(int file)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
	return 0;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f006 fdb8 	bl	8009a58 <__errno>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	230c      	movs	r3, #12
 8002eec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	200a0000 	.word	0x200a0000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	200000cc 	.word	0x200000cc
 8002f1c:	20000708 	.word	0x20000708

08002f20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <SystemInit+0x64>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <SystemInit+0x64>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <SystemInit+0x68>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <SystemInit+0x68>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <SystemInit+0x68>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <SystemInit+0x68>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <SystemInit+0x68>)
 8002f4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <SystemInit+0x68>)
 8002f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <SystemInit+0x68>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <SystemInit+0x68>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <SystemInit+0x68>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <SystemInit+0x64>)
 8002f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f76:	609a      	str	r2, [r3, #8]
#endif
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	40021000 	.word	0x40021000

08002f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f90:	f7ff ffc6 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f96:	e003      	b.n	8002fa0 <LoopCopyDataInit>

08002f98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f9e:	3104      	adds	r1, #4

08002fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fa0:	480a      	ldr	r0, [pc, #40]	; (8002fcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fa4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fa6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fa8:	d3f6      	bcc.n	8002f98 <CopyDataInit>
	ldr	r2, =_sbss
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fac:	e002      	b.n	8002fb4 <LoopFillZerobss>

08002fae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fb0:	f842 3b04 	str.w	r3, [r2], #4

08002fb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <LoopForever+0x16>)
	cmp	r2, r3
 8002fb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fb8:	d3f9      	bcc.n	8002fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fba:	f006 fd53 	bl	8009a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fbe:	f7fe f9c7 	bl	8001350 <main>

08002fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fc2:	e7fe      	b.n	8002fc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002fc4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002fc8:	0800b658 	.word	0x0800b658
	ldr	r0, =_sdata
 8002fcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fd0:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8002fd4:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8002fd8:	20000708 	.word	0x20000708

08002fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC1_IRQHandler>

08002fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe8:	2003      	movs	r0, #3
 8002fea:	f001 fa0d 	bl	8004408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 f80e 	bl	8003010 <HAL_InitTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	71fb      	strb	r3, [r7, #7]
 8002ffe:	e001      	b.n	8003004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003000:	f7ff fb10 	bl	8002624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003004:	79fb      	ldrb	r3, [r7, #7]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <HAL_InitTick+0x6c>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <HAL_InitTick+0x70>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_InitTick+0x6c>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003032:	fbb3 f3f1 	udiv	r3, r3, r1
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fa19 	bl	8004472 <HAL_SYSTICK_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b0f      	cmp	r3, #15
 800304a:	d809      	bhi.n	8003060 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800304c:	2200      	movs	r2, #0
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	f001 f9e3 	bl	800441e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_InitTick+0x74>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e007      	b.n	8003070 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e004      	b.n	8003070 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	e001      	b.n	8003070 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000003c 	.word	0x2000003c
 8003080:	20000034 	.word	0x20000034
 8003084:	20000038 	.word	0x20000038

08003088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000003c 	.word	0x2000003c
 80030ac:	20000700 	.word	0x20000700

080030b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000700 	.word	0x20000700

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_Delay+0x40>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	2000003c 	.word	0x2000003c

0800310c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3360      	adds	r3, #96	; 0x60
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <LL_ADC_SetOffset+0x44>)
 8003196:	4013      	ands	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	03fff000 	.word	0x03fff000

080031bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3360      	adds	r3, #96	; 0x60
 80031ca:	461a      	mov	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3360      	adds	r3, #96	; 0x60
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	615a      	str	r2, [r3, #20]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3330      	adds	r3, #48	; 0x30
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	4413      	add	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	211f      	movs	r1, #31
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	401a      	ands	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	f003 011f 	and.w	r1, r3, #31
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	431a      	orrs	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b087      	sub	sp, #28
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3314      	adds	r3, #20
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	0e5b      	lsrs	r3, r3, #25
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	0d1b      	lsrs	r3, r3, #20
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2107      	movs	r1, #7
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	0d1b      	lsrs	r3, r3, #20
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0318 	and.w	r3, r3, #24
 800333a:	4908      	ldr	r1, [pc, #32]	; (800335c <LL_ADC_SetChannelSingleDiff+0x44>)
 800333c:	40d9      	lsrs	r1, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	400b      	ands	r3, r1
 8003342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003346:	431a      	orrs	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	0007ffff 	.word	0x0007ffff

08003360 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6093      	str	r3, [r2, #8]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003398:	d101      	bne.n	800339e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80033bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033e8:	d101      	bne.n	80033ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800340c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003410:	f043 0201 	orr.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <LL_ADC_IsEnabled+0x18>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <LL_ADC_IsEnabled+0x1a>
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800345a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800345e:	f043 0204 	orr.w	r2, r3, #4
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d101      	bne.n	800348a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d101      	bne.n	80034b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e12d      	b.n	8003736 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff f8bf 	bl	800266c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff3f 	bl	8003384 <LL_ADC_IsDeepPowerDownEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff25 	bl	8003360 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ff5a 	bl	80033d4 <LL_ADC_IsInternalRegulatorEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d113      	bne.n	800354e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff3e 	bl	80033ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003530:	4b83      	ldr	r3, [pc, #524]	; (8003740 <HAL_ADC_Init+0x280>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	4a83      	ldr	r2, [pc, #524]	; (8003744 <HAL_ADC_Init+0x284>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003540:	e002      	b.n	8003548 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3b01      	subs	r3, #1
 8003546:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f9      	bne.n	8003542 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff3e 	bl	80033d4 <LL_ADC_IsInternalRegulatorEnabled>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10d      	bne.n	800357a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ff77 	bl	8003472 <LL_ADC_REG_IsConversionOngoing>
 8003584:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 80c8 	bne.w	8003724 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 80c4 	bne.w	8003724 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035a4:	f043 0202 	orr.w	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff37 	bl	8003424 <LL_ADC_IsEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035bc:	4862      	ldr	r0, [pc, #392]	; (8003748 <HAL_ADC_Init+0x288>)
 80035be:	f7ff ff31 	bl	8003424 <LL_ADC_IsEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4619      	mov	r1, r3
 80035ce:	485f      	ldr	r0, [pc, #380]	; (800374c <HAL_ADC_Init+0x28c>)
 80035d0:	f7ff fd9c 	bl	800310c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7e5b      	ldrb	r3, [r3, #25]
 80035d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80035e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80035ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d106      	bne.n	8003610 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	3b01      	subs	r3, #1
 8003608:	045b      	lsls	r3, r3, #17
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_ADC_Init+0x290>)
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	430b      	orrs	r3, r1
 800363e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff14 	bl	8003472 <LL_ADC_REG_IsConversionOngoing>
 800364a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff21 	bl	8003498 <LL_ADC_INJ_IsConversionOngoing>
 8003656:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d140      	bne.n	80036e0 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d13d      	bne.n	80036e0 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7e1b      	ldrb	r3, [r3, #24]
 800366c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800366e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003676:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003686:	f023 0306 	bic.w	r3, r3, #6
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	69b9      	ldr	r1, [r7, #24]
 8003690:	430b      	orrs	r3, r1
 8003692:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800369a:	2b01      	cmp	r3, #1
 800369c:	d118      	bne.n	80036d0 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036b4:	4311      	orrs	r1, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036ba:	4311      	orrs	r1, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036c0:	430a      	orrs	r2, r1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	611a      	str	r2, [r3, #16]
 80036ce:	e007      	b.n	80036e0 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10c      	bne.n	8003702 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f023 010f 	bic.w	r1, r3, #15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003700:	e007      	b.n	8003712 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 020f 	bic.w	r2, r2, #15
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	659a      	str	r2, [r3, #88]	; 0x58
 8003722:	e007      	b.n	8003734 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f043 0210 	orr.w	r2, r3, #16
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003734:	7ffb      	ldrb	r3, [r7, #31]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000034 	.word	0x20000034
 8003744:	053e2d63 	.word	0x053e2d63
 8003748:	50040000 	.word	0x50040000
 800374c:	50040300 	.word	0x50040300
 8003750:	fff0c007 	.word	0xfff0c007

08003754 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fe84 	bl	8003472 <LL_ADC_REG_IsConversionOngoing>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d167      	bne.n	8003840 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_ADC_Start_DMA+0x2a>
 800377a:	2302      	movs	r3, #2
 800377c:	e063      	b.n	8003846 <HAL_ADC_Start_DMA+0xf2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fc80 	bl	800408c <ADC_Enable>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d14f      	bne.n	8003836 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f023 0206 	bic.w	r2, r3, #6
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80037c2:	e002      	b.n	80037ca <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	4a20      	ldr	r2, [pc, #128]	; (8003850 <HAL_ADC_Start_DMA+0xfc>)
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <HAL_ADC_Start_DMA+0x100>)
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_ADC_Start_DMA+0x104>)
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	221c      	movs	r2, #28
 80037e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0210 	orr.w	r2, r2, #16
 8003800:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3340      	adds	r3, #64	; 0x40
 800381c:	4619      	mov	r1, r3
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f000 ffe7 	bl	80047f4 <HAL_DMA_Start_IT>
 8003826:	4603      	mov	r3, r0
 8003828:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fe0b 	bl	800344a <LL_ADC_REG_StartConversion>
 8003834:	e006      	b.n	8003844 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800383e:	e001      	b.n	8003844 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003840:	2302      	movs	r3, #2
 8003842:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	08004141 	.word	0x08004141
 8003854:	08004219 	.word	0x08004219
 8003858:	08004235 	.word	0x08004235

0800385c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b0b6      	sub	sp, #216	; 0xd8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x22>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e3d4      	b.n	8004064 <HAL_ADC_ConfigChannel+0x7cc>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fdd3 	bl	8003472 <LL_ADC_REG_IsConversionOngoing>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 83b9 	bne.w	8004046 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d824      	bhi.n	8003926 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	3b02      	subs	r3, #2
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d81b      	bhi.n	800391e <HAL_ADC_ConfigChannel+0x86>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <HAL_ADC_ConfigChannel+0x54>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	08003905 	.word	0x08003905
 80038f4:	0800390d 	.word	0x0800390d
 80038f8:	08003915 	.word	0x08003915
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	220c      	movs	r2, #12
 8003900:	605a      	str	r2, [r3, #4]
          break;
 8003902:	e011      	b.n	8003928 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2212      	movs	r2, #18
 8003908:	605a      	str	r2, [r3, #4]
          break;
 800390a:	e00d      	b.n	8003928 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2218      	movs	r2, #24
 8003910:	605a      	str	r2, [r3, #4]
          break;
 8003912:	e009      	b.n	8003928 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800391a:	605a      	str	r2, [r3, #4]
          break;
 800391c:	e004      	b.n	8003928 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2206      	movs	r2, #6
 8003922:	605a      	str	r2, [r3, #4]
          break;
 8003924:	e000      	b.n	8003928 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003926:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	f7ff fc98 	bl	800326a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fd97 	bl	8003472 <LL_ADC_REG_IsConversionOngoing>
 8003944:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fda3 	bl	8003498 <LL_ADC_INJ_IsConversionOngoing>
 8003952:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003956:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 81c1 	bne.w	8003ce2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 81bc 	bne.w	8003ce2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003972:	d10f      	bne.n	8003994 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2200      	movs	r2, #0
 800397e:	4619      	mov	r1, r3
 8003980:	f7ff fc9f 	bl	80032c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fc46 	bl	800321e <LL_ADC_SetSamplingTimeCommonConfig>
 8003992:	e00e      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	461a      	mov	r2, r3
 80039a2:	f7ff fc8e 	bl	80032c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2100      	movs	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fc36 	bl	800321e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	08db      	lsrs	r3, r3, #3
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d00a      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6919      	ldr	r1, [r3, #16]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039e4:	f7ff fbc6 	bl	8003174 <LL_ADC_SetOffset>
 80039e8:	e17b      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fbe3 	bl	80031bc <LL_ADC_GetOffsetChannel>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x17e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fbd8 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	0e9b      	lsrs	r3, r3, #26
 8003a10:	f003 021f 	and.w	r2, r3, #31
 8003a14:	e01e      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x1bc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fbcd 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e004      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1d4>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	e018      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x206>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e004      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003a94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d106      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fb9c 	bl	80031e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fb80 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x244>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fb75 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	f003 021f 	and.w	r2, r3, #31
 8003ada:	e01e      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x282>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fb6a 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	e004      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x29a>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	e018      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x2cc>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003b56:	2320      	movs	r3, #32
 8003b58:	e004      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d106      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fb39 	bl	80031e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fb1d 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x30a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2102      	movs	r1, #2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fb12 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	0e9b      	lsrs	r3, r3, #26
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	e01e      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x348>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fb07 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e004      	b.n	8003bde <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d105      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x360>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	e016      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x38e>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e004      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d106      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2102      	movs	r1, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fad8 	bl	80031e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2103      	movs	r1, #3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fabc 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x3cc>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2103      	movs	r1, #3
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fab1 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	0e9b      	lsrs	r3, r3, #26
 8003c5e:	f003 021f 	and.w	r2, r3, #31
 8003c62:	e017      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x3fc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2103      	movs	r1, #3
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff faa6 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003c86:	2320      	movs	r3, #32
 8003c88:	e003      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x414>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0e9b      	lsrs	r3, r3, #26
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	e011      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x438>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e003      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d106      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2103      	movs	r1, #3
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fa83 	bl	80031e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fb9c 	bl	8003424 <LL_ADC_IsEnabled>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 8140 	bne.w	8003f74 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f7ff fb09 	bl	8003318 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4a8f      	ldr	r2, [pc, #572]	; (8003f48 <HAL_ADC_ConfigChannel+0x6b0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	f040 8131 	bne.w	8003f74 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x4a2>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0e9b      	lsrs	r3, r3, #26
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2b09      	cmp	r3, #9
 8003d30:	bf94      	ite	ls
 8003d32:	2301      	movls	r3, #1
 8003d34:	2300      	movhi	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e019      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x4d6>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003d52:	2320      	movs	r3, #32
 8003d54:	e003      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2b09      	cmp	r3, #9
 8003d66:	bf94      	ite	ls
 8003d68:	2301      	movls	r3, #1
 8003d6a:	2300      	movhi	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d079      	beq.n	8003e66 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d107      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x4f6>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	0e9b      	lsrs	r3, r3, #26
 8003d84:	3301      	adds	r3, #1
 8003d86:	069b      	lsls	r3, r3, #26
 8003d88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d8c:	e015      	b.n	8003dba <HAL_ADC_ConfigChannel+0x522>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003da6:	2320      	movs	r3, #32
 8003da8:	e003      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	069b      	lsls	r3, r3, #26
 8003db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x542>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	0e9b      	lsrs	r3, r3, #26
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	e017      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x572>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003df2:	2320      	movs	r3, #32
 8003df4:	e003      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df8:	fab3 f383 	clz	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	ea42 0103 	orr.w	r1, r2, r3
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x598>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	0e9b      	lsrs	r3, r3, #26
 8003e20:	3301      	adds	r3, #1
 8003e22:	f003 021f 	and.w	r2, r3, #31
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	051b      	lsls	r3, r3, #20
 8003e2e:	e018      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x5ca>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003e48:	2320      	movs	r3, #32
 8003e4a:	e003      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	f003 021f 	and.w	r2, r3, #31
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e62:	430b      	orrs	r3, r1
 8003e64:	e081      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x5ea>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	0e9b      	lsrs	r3, r3, #26
 8003e78:	3301      	adds	r3, #1
 8003e7a:	069b      	lsls	r3, r3, #26
 8003e7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e80:	e015      	b.n	8003eae <HAL_ADC_ConfigChannel+0x616>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	e003      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	069b      	lsls	r3, r3, #26
 8003eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x636>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0e9b      	lsrs	r3, r3, #26
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ecc:	e017      	b.n	8003efe <HAL_ADC_ConfigChannel+0x666>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	61fb      	str	r3, [r7, #28]
  return result;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	e003      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	ea42 0103 	orr.w	r1, r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x692>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	0e9b      	lsrs	r3, r3, #26
 8003f14:	3301      	adds	r3, #1
 8003f16:	f003 021f 	and.w	r2, r3, #31
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	3b1e      	subs	r3, #30
 8003f22:	051b      	lsls	r3, r3, #20
 8003f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f28:	e01e      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x6d0>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	613b      	str	r3, [r7, #16]
  return result;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e006      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x6bc>
 8003f46:	bf00      	nop
 8003f48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	f003 021f 	and.w	r2, r3, #31
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	3b1e      	subs	r3, #30
 8003f62:	051b      	lsls	r3, r3, #20
 8003f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f7ff f9a7 	bl	80032c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b3c      	ldr	r3, [pc, #240]	; (800406c <HAL_ADC_ConfigChannel+0x7d4>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d06b      	beq.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f80:	483b      	ldr	r0, [pc, #236]	; (8004070 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f82:	f7ff f8e9 	bl	8003158 <LL_ADC_GetCommonPathInternalCh>
 8003f86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a39      	ldr	r2, [pc, #228]	; (8004074 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d126      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d120      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a34      	ldr	r2, [pc, #208]	; (8004078 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d156      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	482e      	ldr	r0, [pc, #184]	; (8004070 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fb6:	f7ff f8bc 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_ADC_ConfigChannel+0x7e4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <HAL_ADC_ConfigChannel+0x7e8>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	099a      	lsrs	r2, r3, #6
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fd2:	e002      	b.n	8003fda <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f9      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fe0:	e03a      	b.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a27      	ldr	r2, [pc, #156]	; (8004084 <HAL_ADC_ConfigChannel+0x7ec>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d113      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x77c>
 8003fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <HAL_ADC_ConfigChannel+0x7e0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d12a      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400a:	4619      	mov	r1, r3
 800400c:	4818      	ldr	r0, [pc, #96]	; (8004070 <HAL_ADC_ConfigChannel+0x7d8>)
 800400e:	f7ff f890 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004012:	e021      	b.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <HAL_ADC_ConfigChannel+0x7f0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d11c      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800401e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <HAL_ADC_ConfigChannel+0x7e0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d111      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800403c:	4619      	mov	r1, r3
 800403e:	480c      	ldr	r0, [pc, #48]	; (8004070 <HAL_ADC_ConfigChannel+0x7d8>)
 8004040:	f7ff f877 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
 8004044:	e008      	b.n	8004058 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004060:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004064:	4618      	mov	r0, r3
 8004066:	37d8      	adds	r7, #216	; 0xd8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	80080000 	.word	0x80080000
 8004070:	50040300 	.word	0x50040300
 8004074:	c7520000 	.word	0xc7520000
 8004078:	50040000 	.word	0x50040000
 800407c:	20000034 	.word	0x20000034
 8004080:	053e2d63 	.word	0x053e2d63
 8004084:	cb840000 	.word	0xcb840000
 8004088:	80000001 	.word	0x80000001

0800408c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff f9c3 	bl	8003424 <LL_ADC_IsEnabled>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d146      	bne.n	8004132 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <ADC_Enable+0xb0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	f043 0210 	orr.w	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e032      	b.n	8004134 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f992 	bl	80033fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040d8:	f7fe ffea 	bl	80030b0 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040de:	e021      	b.n	8004124 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f99d 	bl	8003424 <LL_ADC_IsEnabled>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff f981 	bl	80033fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040fa:	f7fe ffd9 	bl	80030b0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d90d      	bls.n	8004124 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f043 0210 	orr.w	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e007      	b.n	8004134 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d1d6      	bne.n	80040e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	8000003f 	.word	0x8000003f

08004140 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004156:	2b00      	cmp	r3, #0
 8004158:	d14b      	bne.n	80041f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d021      	beq.n	80041b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f863 	bl	8003244 <LL_ADC_REG_IsTriggerSourceSWStart>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d032      	beq.n	80041ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d12b      	bne.n	80041ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11f      	bne.n	80041ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	659a      	str	r2, [r3, #88]	; 0x58
 80041b6:	e018      	b.n	80041ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d111      	bne.n	80041ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d105      	bne.n	80041ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff fb36 	bl	800385c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041f0:	e00e      	b.n	8004210 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fb40 	bl	8003884 <HAL_ADC_ErrorCallback>
}
 8004204:	e004      	b.n	8004210 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff fb22 	bl	8003870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff fb12 	bl	8003884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800429a:	4a04      	ldr	r2, [pc, #16]	; (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	60d3      	str	r3, [r2, #12]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <__NVIC_GetPriorityGrouping+0x18>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 0307 	and.w	r3, r3, #7
}
 80042be:	4618      	mov	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	db0b      	blt.n	80042f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	4907      	ldr	r1, [pc, #28]	; (8004304 <__NVIC_EnableIRQ+0x38>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2001      	movs	r0, #1
 80042ee:	fa00 f202 	lsl.w	r2, r0, r2
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	e000e100 	.word	0xe000e100

08004308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	; (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	; 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	bf28      	it	cs
 800437a:	2304      	movcs	r3, #4
 800437c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3304      	adds	r3, #4
 8004382:	2b06      	cmp	r3, #6
 8004384:	d902      	bls.n	800438c <NVIC_EncodePriority+0x30>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3b03      	subs	r3, #3
 800438a:	e000      	b.n	800438e <NVIC_EncodePriority+0x32>
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	f04f 32ff 	mov.w	r2, #4294967295
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	401a      	ands	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a4:	f04f 31ff 	mov.w	r1, #4294967295
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43d9      	mvns	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b4:	4313      	orrs	r3, r2
         );
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3724      	adds	r7, #36	; 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d4:	d301      	bcc.n	80043da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00f      	b.n	80043fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <SysTick_Config+0x40>)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043e2:	210f      	movs	r1, #15
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	f7ff ff8e 	bl	8004308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <SysTick_Config+0x40>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <SysTick_Config+0x40>)
 80043f4:	2207      	movs	r2, #7
 80043f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000e010 	.word	0xe000e010

08004408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff29 	bl	8004268 <__NVIC_SetPriorityGrouping>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004430:	f7ff ff3e 	bl	80042b0 <__NVIC_GetPriorityGrouping>
 8004434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	6978      	ldr	r0, [r7, #20]
 800443c:	f7ff ff8e 	bl	800435c <NVIC_EncodePriority>
 8004440:	4602      	mov	r2, r0
 8004442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004446:	4611      	mov	r1, r2
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff5d 	bl	8004308 <__NVIC_SetPriority>
}
 800444e:	bf00      	nop
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	4603      	mov	r3, r0
 800445e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff31 	bl	80042cc <__NVIC_EnableIRQ>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff ffa2 	bl	80043c4 <SysTick_Config>
 8004480:	4603      	mov	r3, r0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e0ac      	b.n	80045f8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f8b2 	bl	800460c <DFSDM_GetChannelFromInstance>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b55      	ldr	r3, [pc, #340]	; (8004600 <HAL_DFSDM_ChannelInit+0x174>)
 80044ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e09f      	b.n	80045f8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fe f945 	bl	8002748 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80044be:	4b51      	ldr	r3, [pc, #324]	; (8004604 <HAL_DFSDM_ChannelInit+0x178>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a4f      	ldr	r2, [pc, #316]	; (8004604 <HAL_DFSDM_ChannelInit+0x178>)
 80044c6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80044c8:	4b4e      	ldr	r3, [pc, #312]	; (8004604 <HAL_DFSDM_ChannelInit+0x178>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d125      	bne.n	800451c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80044d0:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a4c      	ldr	r2, [pc, #304]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 80044d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044da:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80044dc:	4b4a      	ldr	r3, [pc, #296]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4948      	ldr	r1, [pc, #288]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a46      	ldr	r2, [pc, #280]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 80044f0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80044f4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	791b      	ldrb	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d108      	bne.n	8004510 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80044fe:	4b42      	ldr	r3, [pc, #264]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	3b01      	subs	r3, #1
 8004508:	041b      	lsls	r3, r3, #16
 800450a:	493f      	ldr	r1, [pc, #252]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004510:	4b3d      	ldr	r3, [pc, #244]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3c      	ldr	r2, [pc, #240]	; (8004608 <HAL_DFSDM_ChannelInit+0x17c>)
 8004516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800451a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800452a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800453a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004540:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 020f 	bic.w	r2, r2, #15
 8004558:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004580:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6899      	ldr	r1, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f002 0207 	and.w	r2, r2, #7
 80045ac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045d8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f810 	bl	800460c <DFSDM_GetChannelFromInstance>
 80045ec:	4601      	mov	r1, r0
 80045ee:	4a04      	ldr	r2, [pc, #16]	; (8004600 <HAL_DFSDM_ChannelInit+0x174>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	200000d4 	.word	0x200000d4
 8004604:	200000d0 	.word	0x200000d0
 8004608:	40016000 	.word	0x40016000

0800460c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <DFSDM_GetChannelFromInstance+0x7c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d102      	bne.n	8004622 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e02b      	b.n	800467a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <DFSDM_GetChannelFromInstance+0x80>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d102      	bne.n	8004630 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e024      	b.n	800467a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <DFSDM_GetChannelFromInstance+0x84>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d102      	bne.n	800463e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004638:	2302      	movs	r3, #2
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e01d      	b.n	800467a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <DFSDM_GetChannelFromInstance+0x88>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d102      	bne.n	800464c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004646:	2304      	movs	r3, #4
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e016      	b.n	800467a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a12      	ldr	r2, [pc, #72]	; (8004698 <DFSDM_GetChannelFromInstance+0x8c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d102      	bne.n	800465a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004654:	2305      	movs	r3, #5
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e00f      	b.n	800467a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a0f      	ldr	r2, [pc, #60]	; (800469c <DFSDM_GetChannelFromInstance+0x90>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d102      	bne.n	8004668 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004662:	2306      	movs	r3, #6
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e008      	b.n	800467a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <DFSDM_GetChannelFromInstance+0x94>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d102      	bne.n	8004676 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004670:	2307      	movs	r3, #7
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e001      	b.n	800467a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004676:	2303      	movs	r3, #3
 8004678:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40016000 	.word	0x40016000
 800468c:	40016020 	.word	0x40016020
 8004690:	40016040 	.word	0x40016040
 8004694:	40016080 	.word	0x40016080
 8004698:	400160a0 	.word	0x400160a0
 800469c:	400160c0 	.word	0x400160c0
 80046a0:	400160e0 	.word	0x400160e0

080046a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e08d      	b.n	80047d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b47      	ldr	r3, [pc, #284]	; (80047dc <HAL_DMA_Init+0x138>)
 80046be:	429a      	cmp	r2, r3
 80046c0:	d80f      	bhi.n	80046e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b45      	ldr	r3, [pc, #276]	; (80047e0 <HAL_DMA_Init+0x13c>)
 80046ca:	4413      	add	r3, r2
 80046cc:	4a45      	ldr	r2, [pc, #276]	; (80047e4 <HAL_DMA_Init+0x140>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	009a      	lsls	r2, r3, #2
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a42      	ldr	r2, [pc, #264]	; (80047e8 <HAL_DMA_Init+0x144>)
 80046de:	641a      	str	r2, [r3, #64]	; 0x40
 80046e0:	e00e      	b.n	8004700 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b40      	ldr	r3, [pc, #256]	; (80047ec <HAL_DMA_Init+0x148>)
 80046ea:	4413      	add	r3, r2
 80046ec:	4a3d      	ldr	r2, [pc, #244]	; (80047e4 <HAL_DMA_Init+0x140>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	009a      	lsls	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a3c      	ldr	r2, [pc, #240]	; (80047f0 <HAL_DMA_Init+0x14c>)
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004724:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800473c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9b6 	bl	8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004760:	d102      	bne.n	8004768 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800477c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_DMA_Init+0x104>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d80c      	bhi.n	80047a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9d6 	bl	8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	e008      	b.n	80047ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40020407 	.word	0x40020407
 80047e0:	bffdfff8 	.word	0xbffdfff8
 80047e4:	cccccccd 	.word	0xcccccccd
 80047e8:	40020000 	.word	0x40020000
 80047ec:	bffdfbf8 	.word	0xbffdfbf8
 80047f0:	40020400 	.word	0x40020400

080047f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_DMA_Start_IT+0x20>
 8004810:	2302      	movs	r3, #2
 8004812:	e066      	b.n	80048e2 <HAL_DMA_Start_IT+0xee>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d155      	bne.n	80048d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f8fb 	bl	8004a48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 020e 	orr.w	r2, r2, #14
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e00f      	b.n	800488c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 020a 	orr.w	r2, r2, #10
 800488a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e005      	b.n	80048e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
 80048de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f003 031c 	and.w	r3, r3, #28
 800490a:	2204      	movs	r2, #4
 800490c:	409a      	lsls	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d026      	beq.n	8004964 <HAL_DMA_IRQHandler+0x7a>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d021      	beq.n	8004964 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0204 	bic.w	r2, r2, #4
 800493c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f003 021c 	and.w	r2, r3, #28
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2104      	movs	r1, #4
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	2b00      	cmp	r3, #0
 8004958:	d071      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004962:	e06c      	b.n	8004a3e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	f003 031c 	and.w	r3, r3, #28
 800496c:	2202      	movs	r2, #2
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02e      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xec>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d029      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 020a 	bic.w	r2, r2, #10
 800499e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	f003 021c 	and.w	r2, r3, #28
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2102      	movs	r1, #2
 80049b6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d038      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80049d4:	e033      	b.n	8004a3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f003 031c 	and.w	r3, r3, #28
 80049de:	2208      	movs	r2, #8
 80049e0:	409a      	lsls	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x156>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d025      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 020e 	bic.w	r2, r2, #14
 8004a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	f003 021c 	and.w	r2, r3, #28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
}
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a5e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a70:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f003 021c 	and.w	r2, r3, #28
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2101      	movs	r1, #1
 8004a80:	fa01 f202 	lsl.w	r2, r1, r2
 8004a84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d108      	bne.n	8004aa8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004aa6:	e007      	b.n	8004ab8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d80a      	bhi.n	8004aee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6493      	str	r3, [r2, #72]	; 0x48
 8004aec:	e007      	b.n	8004afe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	009a      	lsls	r2, r3, #2
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004af8:	4413      	add	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	3b08      	subs	r3, #8
 8004b06:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	40020407 	.word	0x40020407
 8004b34:	4002081c 	.word	0x4002081c
 8004b38:	cccccccd 	.word	0xcccccccd
 8004b3c:	40020880 	.word	0x40020880

08004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b62:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	1000823f 	.word	0x1000823f
 8004b84:	40020940 	.word	0x40020940

08004b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b96:	e166      	b.n	8004e66 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8158 	beq.w	8004e60 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d00b      	beq.n	8004bd0 <HAL_GPIO_Init+0x48>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d007      	beq.n	8004bd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bc4:	2b11      	cmp	r3, #17
 8004bc6:	d003      	beq.n	8004bd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b12      	cmp	r3, #18
 8004bce:	d130      	bne.n	8004c32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	2203      	movs	r2, #3
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c06:	2201      	movs	r2, #1
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0201 	and.w	r2, r3, #1
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4013      	ands	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0xea>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b12      	cmp	r3, #18
 8004c70:	d123      	bne.n	8004cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	08da      	lsrs	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3208      	adds	r2, #8
 8004c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	220f      	movs	r2, #15
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4013      	ands	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	08da      	lsrs	r2, r3, #3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3208      	adds	r2, #8
 8004cb4:	6939      	ldr	r1, [r7, #16]
 8004cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 0203 	and.w	r2, r3, #3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80b2 	beq.w	8004e60 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfc:	4b61      	ldr	r3, [pc, #388]	; (8004e84 <HAL_GPIO_Init+0x2fc>)
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	4a60      	ldr	r2, [pc, #384]	; (8004e84 <HAL_GPIO_Init+0x2fc>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6613      	str	r3, [r2, #96]	; 0x60
 8004d08:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <HAL_GPIO_Init+0x2fc>)
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d14:	4a5c      	ldr	r2, [pc, #368]	; (8004e88 <HAL_GPIO_Init+0x300>)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	3302      	adds	r3, #2
 8004d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d3e:	d02b      	beq.n	8004d98 <HAL_GPIO_Init+0x210>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a52      	ldr	r2, [pc, #328]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d025      	beq.n	8004d94 <HAL_GPIO_Init+0x20c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a51      	ldr	r2, [pc, #324]	; (8004e90 <HAL_GPIO_Init+0x308>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01f      	beq.n	8004d90 <HAL_GPIO_Init+0x208>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a50      	ldr	r2, [pc, #320]	; (8004e94 <HAL_GPIO_Init+0x30c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d019      	beq.n	8004d8c <HAL_GPIO_Init+0x204>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a4f      	ldr	r2, [pc, #316]	; (8004e98 <HAL_GPIO_Init+0x310>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <HAL_GPIO_Init+0x200>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a4e      	ldr	r2, [pc, #312]	; (8004e9c <HAL_GPIO_Init+0x314>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00d      	beq.n	8004d84 <HAL_GPIO_Init+0x1fc>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a4d      	ldr	r2, [pc, #308]	; (8004ea0 <HAL_GPIO_Init+0x318>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <HAL_GPIO_Init+0x1f8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a4c      	ldr	r2, [pc, #304]	; (8004ea4 <HAL_GPIO_Init+0x31c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_GPIO_Init+0x1f4>
 8004d78:	2307      	movs	r3, #7
 8004d7a:	e00e      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	e00c      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d80:	2306      	movs	r3, #6
 8004d82:	e00a      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d84:	2305      	movs	r3, #5
 8004d86:	e008      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	e006      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e004      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e002      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_GPIO_Init+0x212>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	f002 0203 	and.w	r2, r2, #3
 8004da0:	0092      	lsls	r2, r2, #2
 8004da2:	4093      	lsls	r3, r2
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004daa:	4937      	ldr	r1, [pc, #220]	; (8004e88 <HAL_GPIO_Init+0x300>)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	3302      	adds	r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004db8:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ddc:	4a32      	ldr	r2, [pc, #200]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004de2:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	43db      	mvns	r3, r3
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4013      	ands	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e06:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e0c:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e30:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e5a:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <HAL_GPIO_Init+0x320>)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3301      	adds	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f ae91 	bne.w	8004b98 <HAL_GPIO_Init+0x10>
  }
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	48000400 	.word	0x48000400
 8004e90:	48000800 	.word	0x48000800
 8004e94:	48000c00 	.word	0x48000c00
 8004e98:	48001000 	.word	0x48001000
 8004e9c:	48001400 	.word	0x48001400
 8004ea0:	48001800 	.word	0x48001800
 8004ea4:	48001c00 	.word	0x48001c00
 8004ea8:	40010400 	.word	0x40010400

08004eac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004eba:	e0c9      	b.n	8005050 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80bc 	beq.w	800504a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004ed2:	4a66      	ldr	r2, [pc, #408]	; (800506c <HAL_GPIO_DeInit+0x1c0>)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	089b      	lsrs	r3, r3, #2
 8004ed8:	3302      	adds	r3, #2
 8004eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ede:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	220f      	movs	r2, #15
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004efa:	d02b      	beq.n	8004f54 <HAL_GPIO_DeInit+0xa8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <HAL_GPIO_DeInit+0x1c4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d025      	beq.n	8004f50 <HAL_GPIO_DeInit+0xa4>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a5b      	ldr	r2, [pc, #364]	; (8005074 <HAL_GPIO_DeInit+0x1c8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d01f      	beq.n	8004f4c <HAL_GPIO_DeInit+0xa0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a5a      	ldr	r2, [pc, #360]	; (8005078 <HAL_GPIO_DeInit+0x1cc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d019      	beq.n	8004f48 <HAL_GPIO_DeInit+0x9c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a59      	ldr	r2, [pc, #356]	; (800507c <HAL_GPIO_DeInit+0x1d0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <HAL_GPIO_DeInit+0x98>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a58      	ldr	r2, [pc, #352]	; (8005080 <HAL_GPIO_DeInit+0x1d4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00d      	beq.n	8004f40 <HAL_GPIO_DeInit+0x94>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a57      	ldr	r2, [pc, #348]	; (8005084 <HAL_GPIO_DeInit+0x1d8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <HAL_GPIO_DeInit+0x90>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a56      	ldr	r2, [pc, #344]	; (8005088 <HAL_GPIO_DeInit+0x1dc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d101      	bne.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004f34:	2307      	movs	r3, #7
 8004f36:	e00e      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	e00c      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f3c:	2306      	movs	r3, #6
 8004f3e:	e00a      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f40:	2305      	movs	r3, #5
 8004f42:	e008      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f44:	2304      	movs	r3, #4
 8004f46:	e006      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e004      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e002      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_GPIO_DeInit+0xaa>
 8004f54:	2300      	movs	r3, #0
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	f002 0203 	and.w	r2, r2, #3
 8004f5c:	0092      	lsls	r2, r2, #2
 8004f5e:	4093      	lsls	r3, r2
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d132      	bne.n	8004fcc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004f66:	4b49      	ldr	r3, [pc, #292]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	4947      	ldr	r1, [pc, #284]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004f74:	4b45      	ldr	r3, [pc, #276]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	4943      	ldr	r1, [pc, #268]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004f82:	4b42      	ldr	r3, [pc, #264]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	4940      	ldr	r1, [pc, #256]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004f90:	4b3e      	ldr	r3, [pc, #248]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	43db      	mvns	r3, r3
 8004f98:	493c      	ldr	r1, [pc, #240]	; (800508c <HAL_GPIO_DeInit+0x1e0>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	220f      	movs	r2, #15
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004fae:	4a2f      	ldr	r2, [pc, #188]	; (800506c <HAL_GPIO_DeInit+0x1c0>)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	43da      	mvns	r2, r3
 8004fbe:	482b      	ldr	r0, [pc, #172]	; (800506c <HAL_GPIO_DeInit+0x1c0>)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	089b      	lsrs	r3, r3, #2
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	2103      	movs	r1, #3
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	08da      	lsrs	r2, r3, #3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3208      	adds	r2, #8
 8004fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	08d2      	lsrs	r2, r2, #3
 8005000:	4019      	ands	r1, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3208      	adds	r2, #8
 8005006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	2103      	movs	r1, #3
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	401a      	ands	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	2101      	movs	r1, #1
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	401a      	ands	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2103      	movs	r1, #3
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	401a      	ands	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3301      	adds	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	f47f af2f 	bne.w	8004ebc <HAL_GPIO_DeInit+0x10>
  }
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	48000400 	.word	0x48000400
 8005074:	48000800 	.word	0x48000800
 8005078:	48000c00 	.word	0x48000c00
 800507c:	48001000 	.word	0x48001000
 8005080:	48001400 	.word	0x48001400
 8005084:	48001800 	.word	0x48001800
 8005088:	48001c00 	.word	0x48001c00
 800508c:	40010400 	.word	0x40010400

08005090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a0:	787b      	ldrb	r3, [r7, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050ac:	e002      	b.n	80050b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050d6:	4a05      	ldr	r2, [pc, #20]	; (80050ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f806 	bl	80050f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40010400 	.word	0x40010400

080050f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e081      	b.n	800521c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7fd fb53 	bl	80027d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2224      	movs	r2, #36	; 0x24
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005156:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005166:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d107      	bne.n	8005180 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800517c:	609a      	str	r2, [r3, #8]
 800517e:	e006      	b.n	800518e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800518c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d104      	bne.n	80051a0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800519e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	ea42 0103 	orr.w	r1, r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	021a      	lsls	r2, r3, #8
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69d9      	ldr	r1, [r3, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e021      	b.n	800527a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2224      	movs	r2, #36	; 0x24
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fd fb38 	bl	80028c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	461a      	mov	r2, r3
 8005292:	4603      	mov	r3, r0
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	460b      	mov	r3, r1
 8005298:	813b      	strh	r3, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	f040 80f9 	bne.w	800549e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_I2C_Mem_Write+0x34>
 80052b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d105      	bne.n	80052c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0ed      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_I2C_Mem_Write+0x4e>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e0e6      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052da:	f7fd fee9 	bl	80030b0 <HAL_GetTick>
 80052de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2319      	movs	r3, #25
 80052e6:	2201      	movs	r2, #1
 80052e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fac3 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0d1      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2221      	movs	r2, #33	; 0x21
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2240      	movs	r2, #64	; 0x40
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a3a      	ldr	r2, [r7, #32]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005324:	88f8      	ldrh	r0, [r7, #6]
 8005326:	893a      	ldrh	r2, [r7, #8]
 8005328:	8979      	ldrh	r1, [r7, #10]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	4603      	mov	r3, r0
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f9d3 	bl	80056e0 <I2C_RequestMemoryWrite>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0a9      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	2bff      	cmp	r3, #255	; 0xff
 8005354:	d90e      	bls.n	8005374 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	22ff      	movs	r2, #255	; 0xff
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005360:	b2da      	uxtb	r2, r3
 8005362:	8979      	ldrh	r1, [r7, #10]
 8005364:	2300      	movs	r3, #0
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fba5 	bl	8005abc <I2C_TransferConfig>
 8005372:	e00f      	b.n	8005394 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	b2da      	uxtb	r2, r3
 8005384:	8979      	ldrh	r1, [r7, #10]
 8005386:	2300      	movs	r3, #0
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fb94 	bl	8005abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 faad 	bl	80058f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e07b      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d034      	beq.n	800544c <HAL_I2C_Mem_Write+0x1c8>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d130      	bne.n	800544c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	2200      	movs	r2, #0
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fa3f 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e04d      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	2bff      	cmp	r3, #255	; 0xff
 800540c:	d90e      	bls.n	800542c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	22ff      	movs	r2, #255	; 0xff
 8005412:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005418:	b2da      	uxtb	r2, r3
 800541a:	8979      	ldrh	r1, [r7, #10]
 800541c:	2300      	movs	r3, #0
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fb49 	bl	8005abc <I2C_TransferConfig>
 800542a:	e00f      	b.n	800544c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543a:	b2da      	uxtb	r2, r3
 800543c:	8979      	ldrh	r1, [r7, #10]
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fb38 	bl	8005abc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d19e      	bne.n	8005394 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fa8c 	bl	8005978 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e01a      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2220      	movs	r2, #32
 8005470:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6859      	ldr	r1, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <HAL_I2C_Mem_Write+0x224>)
 800547e:	400b      	ands	r3, r1
 8005480:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
  }
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	fe00e800 	.word	0xfe00e800

080054ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	4608      	mov	r0, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	461a      	mov	r2, r3
 80054ba:	4603      	mov	r3, r0
 80054bc:	817b      	strh	r3, [r7, #10]
 80054be:	460b      	mov	r3, r1
 80054c0:	813b      	strh	r3, [r7, #8]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	f040 80fd 	bne.w	80056ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_I2C_Mem_Read+0x34>
 80054da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0f1      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Mem_Read+0x4e>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0ea      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005502:	f7fd fdd5 	bl	80030b0 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2319      	movs	r3, #25
 800550e:	2201      	movs	r2, #1
 8005510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f9af 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0d5      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2222      	movs	r2, #34	; 0x22
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a3a      	ldr	r2, [r7, #32]
 800553e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800554c:	88f8      	ldrh	r0, [r7, #6]
 800554e:	893a      	ldrh	r2, [r7, #8]
 8005550:	8979      	ldrh	r1, [r7, #10]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	4603      	mov	r3, r0
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f913 	bl	8005788 <I2C_RequestMemoryRead>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0ad      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	2bff      	cmp	r3, #255	; 0xff
 800557c:	d90e      	bls.n	800559c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	b2da      	uxtb	r2, r3
 800558a:	8979      	ldrh	r1, [r7, #10]
 800558c:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <HAL_I2C_Mem_Read+0x22c>)
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fa91 	bl	8005abc <I2C_TransferConfig>
 800559a:	e00f      	b.n	80055bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	8979      	ldrh	r1, [r7, #10]
 80055ae:	4b4a      	ldr	r3, [pc, #296]	; (80056d8 <HAL_I2C_Mem_Read+0x22c>)
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fa80 	bl	8005abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	2200      	movs	r2, #0
 80055c4:	2104      	movs	r1, #4
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f956 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e07c      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d034      	beq.n	800567c <HAL_I2C_Mem_Read+0x1d0>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d130      	bne.n	800567c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	2200      	movs	r2, #0
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f927 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e04d      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	2bff      	cmp	r3, #255	; 0xff
 800563c:	d90e      	bls.n	800565c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	22ff      	movs	r2, #255	; 0xff
 8005642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005648:	b2da      	uxtb	r2, r3
 800564a:	8979      	ldrh	r1, [r7, #10]
 800564c:	2300      	movs	r3, #0
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fa31 	bl	8005abc <I2C_TransferConfig>
 800565a:	e00f      	b.n	800567c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566a:	b2da      	uxtb	r2, r3
 800566c:	8979      	ldrh	r1, [r7, #10]
 800566e:	2300      	movs	r3, #0
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fa20 	bl	8005abc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d19a      	bne.n	80055bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f974 	bl	8005978 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e01a      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2220      	movs	r2, #32
 80056a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_I2C_Mem_Read+0x230>)
 80056ae:	400b      	ands	r3, r1
 80056b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e000      	b.n	80056d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
  }
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	80002400 	.word	0x80002400
 80056dc:	fe00e800 	.word	0xfe00e800

080056e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	817b      	strh	r3, [r7, #10]
 80056f2:	460b      	mov	r3, r1
 80056f4:	813b      	strh	r3, [r7, #8]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	8979      	ldrh	r1, [r7, #10]
 8005700:	4b20      	ldr	r3, [pc, #128]	; (8005784 <I2C_RequestMemoryWrite+0xa4>)
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f9d7 	bl	8005abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	69b9      	ldr	r1, [r7, #24]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f8f0 	bl	80058f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e02c      	b.n	800577c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d105      	bne.n	8005734 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	629a      	str	r2, [r3, #40]	; 0x28
 8005732:	e015      	b.n	8005760 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005734:	893b      	ldrh	r3, [r7, #8]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	b29b      	uxth	r3, r3
 800573a:	b2da      	uxtb	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	69b9      	ldr	r1, [r7, #24]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f8d6 	bl	80058f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e012      	b.n	800577c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005756:	893b      	ldrh	r3, [r7, #8]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2200      	movs	r2, #0
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f884 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	80002000 	.word	0x80002000

08005788 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	4608      	mov	r0, r1
 8005792:	4611      	mov	r1, r2
 8005794:	461a      	mov	r2, r3
 8005796:	4603      	mov	r3, r0
 8005798:	817b      	strh	r3, [r7, #10]
 800579a:	460b      	mov	r3, r1
 800579c:	813b      	strh	r3, [r7, #8]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	4b20      	ldr	r3, [pc, #128]	; (800582c <I2C_RequestMemoryRead+0xa4>)
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2300      	movs	r3, #0
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f984 	bl	8005abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	69b9      	ldr	r1, [r7, #24]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f89d 	bl	80058f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e02c      	b.n	8005822 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d105      	bne.n	80057da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ce:	893b      	ldrh	r3, [r7, #8]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28
 80057d8:	e015      	b.n	8005806 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057da:	893b      	ldrh	r3, [r7, #8]
 80057dc:	0a1b      	lsrs	r3, r3, #8
 80057de:	b29b      	uxth	r3, r3
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	69b9      	ldr	r1, [r7, #24]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f883 	bl	80058f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e012      	b.n	8005822 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2200      	movs	r2, #0
 800580e:	2140      	movs	r1, #64	; 0x40
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f831 	bl	8005878 <I2C_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	80002000 	.word	0x80002000

08005830 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d103      	bne.n	800584e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	d007      	beq.n	800586c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	619a      	str	r2, [r3, #24]
  }
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005888:	e022      	b.n	80058d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d01e      	beq.n	80058d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fd fc0d 	bl	80030b0 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d113      	bne.n	80058d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ac:	f043 0220 	orr.w	r2, r3, #32
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e00f      	b.n	80058f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d0cd      	beq.n	800588a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005904:	e02c      	b.n	8005960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f870 	bl	80059f0 <I2C_IsAcknowledgeFailed>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e02a      	b.n	8005970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d01e      	beq.n	8005960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fd fbc5 	bl	80030b0 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d113      	bne.n	8005960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e007      	b.n	8005970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	d1cb      	bne.n	8005906 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005984:	e028      	b.n	80059d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f830 	bl	80059f0 <I2C_IsAcknowledgeFailed>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e026      	b.n	80059e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599a:	f7fd fb89 	bl	80030b0 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d113      	bne.n	80059d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b4:	f043 0220 	orr.w	r2, r3, #32
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e007      	b.n	80059e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d1cf      	bne.n	8005986 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d151      	bne.n	8005aae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a0a:	e022      	b.n	8005a52 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d01e      	beq.n	8005a52 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a14:	f7fd fb4c 	bl	80030b0 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d302      	bcc.n	8005a2a <I2C_IsAcknowledgeFailed+0x3a>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d113      	bne.n	8005a52 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e02e      	b.n	8005ab0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d1d5      	bne.n	8005a0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2210      	movs	r2, #16
 8005a66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff fedd 	bl	8005830 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005a82:	400b      	ands	r3, r1
 8005a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	f043 0204 	orr.w	r2, r3, #4
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	fe00e800 	.word	0xfe00e800

08005abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	817b      	strh	r3, [r7, #10]
 8005aca:	4613      	mov	r3, r2
 8005acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	0d5b      	lsrs	r3, r3, #21
 8005ad8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <I2C_TransferConfig+0x58>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	ea02 0103 	and.w	r1, r2, r3
 8005ae6:	897b      	ldrh	r3, [r7, #10]
 8005ae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005aec:	7a7b      	ldrb	r3, [r7, #9]
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	03ff63ff 	.word	0x03ff63ff

08005b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d138      	bne.n	8005ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e032      	b.n	8005ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6819      	ldr	r1, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d139      	bne.n	8005c38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e033      	b.n	8005c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2224      	movs	r2, #36	; 0x24
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005c54:	f7fd fa2c 	bl	80030b0 <HAL_GetTick>
 8005c58:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
 8005c64:	e092      	b.n	8005d8c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 808b 	bne.w	8005d8c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fc fe60 	bl	800293c <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005c7c:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f88b 	bl	8005d9c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	4b42      	ldr	r3, [pc, #264]	; (8005d98 <HAL_OSPI_Init+0x150>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68d1      	ldr	r1, [r2, #12]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6912      	ldr	r2, [r2, #16]
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	0412      	lsls	r2, r2, #16
 8005c9c:	4311      	orrs	r1, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6952      	ldr	r2, [r2, #20]
 8005ca2:	3a01      	subs	r2, #1
 8005ca4:	0212      	lsls	r2, r2, #8
 8005ca6:	4311      	orrs	r1, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cac:	4311      	orrs	r1, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	69d2      	ldr	r2, [r2, #28]
 8005cb2:	4311      	orrs	r1, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	0412      	lsls	r2, r2, #16
 8005cc6:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2120      	movs	r1, #32
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fbb8 	bl	8006464 <OSPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d146      	bne.n	8005d8c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	1e5a      	subs	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d34:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d107      	bne.n	8005d74 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0202 	orr.w	r2, r2, #2
 8005d72:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d7c:	d103      	bne.n	8005d86 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44
 8005d84:	e002      	b.n	8005d8c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	f8e0f8f4 	.word	0xf8e0f8f4

08005d9c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b092      	sub	sp, #72	; 0x48
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <HAL_OSPIM_Config+0x40>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d105      	bne.n	8005dea <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005de8:	e004      	b.n	8005df4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005dea:	2301      	movs	r3, #1
 8005dec:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005dfa:	e01f      	b.n	8005e3c <HAL_OSPIM_Config+0x80>
 8005dfc:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8005e00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e04:	3301      	adds	r3, #1
 8005e06:	b2d8      	uxtb	r0, r3
 8005e08:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005e0c:	f107 0114 	add.w	r1, r7, #20
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f000 fb5a 	bl	80064d4 <OSPIM_GetConfig>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2208      	movs	r2, #8
 8005e30:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005e32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e36:	3301      	adds	r3, #1
 8005e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005e3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d9dd      	bls.n	8005e00 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f040 82fe 	bne.w	800644a <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005e4e:	4bcd      	ldr	r3, [pc, #820]	; (8006184 <HAL_OSPIM_Config+0x3c8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005e5a:	4bca      	ldr	r3, [pc, #808]	; (8006184 <HAL_OSPIM_Config+0x3c8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4ac9      	ldr	r2, [pc, #804]	; (8006184 <HAL_OSPIM_Config+0x3c8>)
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005e66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005e72:	4bc5      	ldr	r3, [pc, #788]	; (8006188 <HAL_OSPIM_Config+0x3cc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005e7e:	4bc2      	ldr	r3, [pc, #776]	; (8006188 <HAL_OSPIM_Config+0x3cc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4ac1      	ldr	r2, [pc, #772]	; (8006188 <HAL_OSPIM_Config+0x3cc>)
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005e8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005e8e:	f043 0302 	orr.w	r3, r3, #2
 8005e92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005e96:	49bd      	ldr	r1, [pc, #756]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ea6:	4413      	add	r3, r2
 8005ea8:	3b2c      	subs	r3, #44	; 0x2c
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	6859      	ldr	r1, [r3, #4]
 8005eb4:	48b5      	ldr	r0, [pc, #724]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ec4:	4413      	add	r3, r2
 8005ec6:	3b2c      	subs	r3, #44	; 0x2c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4403      	add	r3, r0
 8005ed4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3b34      	subs	r3, #52	; 0x34
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 80ac 	beq.w	8006048 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005ef0:	49a6      	ldr	r1, [pc, #664]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f00:	4413      	add	r3, r2
 8005f02:	3b34      	subs	r3, #52	; 0x34
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	6859      	ldr	r1, [r3, #4]
 8005f0e:	489f      	ldr	r0, [pc, #636]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f1e:	4413      	add	r3, r2
 8005f20:	3b34      	subs	r3, #52	; 0x34
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	f021 0201 	bic.w	r2, r1, #1
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4403      	add	r3, r0
 8005f2e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f3e:	4413      	add	r3, r2
 8005f40:	3b30      	subs	r3, #48	; 0x30
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01f      	beq.n	8005f88 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005f48:	4990      	ldr	r1, [pc, #576]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f58:	4413      	add	r3, r2
 8005f5a:	3b30      	subs	r3, #48	; 0x30
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	4889      	ldr	r0, [pc, #548]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f76:	4413      	add	r3, r2
 8005f78:	3b30      	subs	r3, #48	; 0x30
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	f021 0210 	bic.w	r2, r1, #16
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4403      	add	r3, r0
 8005f86:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f96:	4413      	add	r3, r2
 8005f98:	3b28      	subs	r3, #40	; 0x28
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d023      	beq.n	8005fe8 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005fa0:	497a      	ldr	r1, [pc, #488]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3b28      	subs	r3, #40	; 0x28
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	4872      	ldr	r0, [pc, #456]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8005fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3b28      	subs	r3, #40	; 0x28
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4403      	add	r3, r0
 8005fe6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3b24      	subs	r3, #36	; 0x24
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d023      	beq.n	8006048 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006000:	4962      	ldr	r1, [pc, #392]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8006002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006010:	4413      	add	r3, r2
 8006012:	3b24      	subs	r3, #36	; 0x24
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3b01      	subs	r3, #1
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	485a      	ldr	r0, [pc, #360]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8006024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006032:	4413      	add	r3, r2
 8006034:	3b24      	subs	r3, #36	; 0x24
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3b01      	subs	r3, #1
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4403      	add	r3, r0
 8006046:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6819      	ldr	r1, [r3, #0]
 800604c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800605c:	4413      	add	r3, r2
 800605e:	3b34      	subs	r3, #52	; 0x34
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4299      	cmp	r1, r3
 8006064:	d03c      	beq.n	80060e0 <HAL_OSPIM_Config+0x324>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800607a:	4413      	add	r3, r2
 800607c:	3b30      	subs	r3, #48	; 0x30
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4299      	cmp	r1, r3
 8006082:	d02d      	beq.n	80060e0 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6899      	ldr	r1, [r3, #8]
 8006088:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006098:	4413      	add	r3, r2
 800609a:	3b2c      	subs	r3, #44	; 0x2c
 800609c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800609e:	4299      	cmp	r1, r3
 80060a0:	d01e      	beq.n	80060e0 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68d9      	ldr	r1, [r3, #12]
 80060a6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060b6:	4413      	add	r3, r2
 80060b8:	3b28      	subs	r3, #40	; 0x28
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4299      	cmp	r1, r3
 80060be:	d00f      	beq.n	80060e0 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6919      	ldr	r1, [r3, #16]
 80060c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060d4:	4413      	add	r3, r2
 80060d6:	3b24      	subs	r3, #36	; 0x24
 80060d8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80060da:	4299      	cmp	r1, r3
 80060dc:	f040 80e0 	bne.w	80062a0 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80060e0:	492a      	ldr	r1, [pc, #168]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 80060e2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060f2:	4413      	add	r3, r2
 80060f4:	3b34      	subs	r3, #52	; 0x34
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	4822      	ldr	r0, [pc, #136]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8006102:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006112:	4413      	add	r3, r2
 8006114:	3b34      	subs	r3, #52	; 0x34
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3b01      	subs	r3, #1
 800611a:	f021 0201 	bic.w	r2, r1, #1
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4403      	add	r3, r0
 8006122:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006124:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006134:	4413      	add	r3, r2
 8006136:	3b30      	subs	r3, #48	; 0x30
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d028      	beq.n	8006190 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800613e:	4913      	ldr	r1, [pc, #76]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8006140:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006150:	4413      	add	r3, r2
 8006152:	3b30      	subs	r3, #48	; 0x30
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	480b      	ldr	r0, [pc, #44]	; (800618c <HAL_OSPIM_Config+0x3d0>)
 8006160:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006170:	4413      	add	r3, r2
 8006172:	3b30      	subs	r3, #48	; 0x30
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3b01      	subs	r3, #1
 8006178:	f021 0210 	bic.w	r2, r1, #16
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4403      	add	r3, r0
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	e005      	b.n	8006190 <HAL_OSPIM_Config+0x3d4>
 8006184:	a0001000 	.word	0xa0001000
 8006188:	a0001400 	.word	0xa0001400
 800618c:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006190:	49b1      	ldr	r1, [pc, #708]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006192:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061a2:	4413      	add	r3, r2
 80061a4:	3b2c      	subs	r3, #44	; 0x2c
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	48a9      	ldr	r0, [pc, #676]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80061b2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061c2:	4413      	add	r3, r2
 80061c4:	3b2c      	subs	r3, #44	; 0x2c
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4403      	add	r3, r0
 80061d2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80061d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061e4:	4413      	add	r3, r2
 80061e6:	3b28      	subs	r3, #40	; 0x28
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d025      	beq.n	800623a <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80061ee:	499a      	ldr	r1, [pc, #616]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80061f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006200:	4413      	add	r3, r2
 8006202:	3b28      	subs	r3, #40	; 0x28
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3b01      	subs	r3, #1
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	6859      	ldr	r1, [r3, #4]
 8006212:	4891      	ldr	r0, [pc, #580]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006214:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006224:	4413      	add	r3, r2
 8006226:	3b28      	subs	r3, #40	; 0x28
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3b01      	subs	r3, #1
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4403      	add	r3, r0
 8006238:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800623a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800624a:	4413      	add	r3, r2
 800624c:	3b24      	subs	r3, #36	; 0x24
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d025      	beq.n	80062a0 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006254:	4980      	ldr	r1, [pc, #512]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006256:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006266:	4413      	add	r3, r2
 8006268:	3b24      	subs	r3, #36	; 0x24
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	4877      	ldr	r0, [pc, #476]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 800627a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800628a:	4413      	add	r3, r2
 800628c:	3b24      	subs	r3, #36	; 0x24
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3b01      	subs	r3, #1
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4403      	add	r3, r0
 800629e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 80062a0:	4a6d      	ldr	r2, [pc, #436]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	431a      	orrs	r2, r3
 80062b8:	4967      	ldr	r1, [pc, #412]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	3b01      	subs	r3, #1
 80062c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 80062ca:	4a63      	ldr	r2, [pc, #396]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f023 0203 	bic.w	r2, r3, #3
 80062dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	495d      	ldr	r1, [pc, #372]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d014      	beq.n	8006326 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 80062fc:	4a56      	ldr	r2, [pc, #344]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	3b01      	subs	r3, #1
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800630e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006310:	015b      	lsls	r3, r3, #5
 8006312:	431a      	orrs	r2, r3
 8006314:	4950      	ldr	r1, [pc, #320]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	3b01      	subs	r3, #1
 800631c:	f042 0210 	orr.w	r2, r2, #16
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d019      	beq.n	8006366 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8006332:	4a49      	ldr	r2, [pc, #292]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	3b01      	subs	r3, #1
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634a:	049b      	lsls	r3, r3, #18
 800634c:	431a      	orrs	r2, r3
 800634e:	4942      	ldr	r1, [pc, #264]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	3b01      	subs	r3, #1
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	e01c      	b.n	80063a0 <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d018      	beq.n	80063a0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 800636e:	4a3a      	ldr	r2, [pc, #232]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	3b01      	subs	r3, #1
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	069b      	lsls	r3, r3, #26
 8006388:	431a      	orrs	r2, r3
 800638a:	4933      	ldr	r1, [pc, #204]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	3b01      	subs	r3, #1
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d019      	beq.n	80063e0 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 80063ac:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80063c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c4:	049b      	lsls	r3, r3, #18
 80063c6:	431a      	orrs	r2, r3
 80063c8:	4923      	ldr	r1, [pc, #140]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	e01c      	b.n	800641a <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d018      	beq.n	800641a <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 80063e8:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80063fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006400:	069b      	lsls	r3, r3, #26
 8006402:	431a      	orrs	r2, r3
 8006404:	4914      	ldr	r1, [pc, #80]	; (8006458 <HAL_OSPIM_Config+0x69c>)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800641a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <HAL_OSPIM_Config+0x6a0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a0c      	ldr	r2, [pc, #48]	; (800645c <HAL_OSPIM_Config+0x6a0>)
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006432:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <HAL_OSPIM_Config+0x6a4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a07      	ldr	r2, [pc, #28]	; (8006460 <HAL_OSPIM_Config+0x6a4>)
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800644a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800644e:	4618      	mov	r0, r3
 8006450:	3748      	adds	r7, #72	; 0x48
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	50061c00 	.word	0x50061c00
 800645c:	a0001000 	.word	0xa0001000
 8006460:	a0001400 	.word	0xa0001400

08006464 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006474:	e01a      	b.n	80064ac <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d016      	beq.n	80064ac <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fc fe17 	bl	80030b0 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a0:	f043 0201 	orr.w	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e00e      	b.n	80064ca <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1d6      	bne.n	8006476 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	6039      	str	r1, [r7, #0]
 80064de:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <OSPIM_GetConfig+0x26>
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d802      	bhi.n	80064fa <OSPIM_GetConfig+0x26>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	75fb      	strb	r3, [r7, #23]
 80064fe:	e08e      	b.n	800661e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2200      	movs	r2, #0
 8006516:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d101      	bne.n	8006528 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8006524:	4b41      	ldr	r3, [pc, #260]	; (800662c <OSPIM_GetConfig+0x158>)
 8006526:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e074      	b.n	8006618 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800652e:	4a40      	ldr	r2, [pc, #256]	; (8006630 <OSPIM_GetConfig+0x15c>)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4053      	eors	r3, r2
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4053      	eors	r3, r2
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4053      	eors	r3, r2
 800658a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800658e:	2b00      	cmp	r3, #0
 8006590:	d103      	bne.n	800659a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d018      	beq.n	80065d6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4053      	eors	r3, r2
 80065aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d111      	bne.n	80065d6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	60da      	str	r2, [r3, #12]
 80065c8:	e005      	b.n	80065d6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d018      	beq.n	8006612 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4053      	eors	r3, r2
 80065e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d111      	bne.n	8006612 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	611a      	str	r2, [r3, #16]
 8006604:	e005      	b.n	8006612 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d987      	bls.n	800652e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800661e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	04040222 	.word	0x04040222
 8006630:	50061c00 	.word	0x50061c00

08006634 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006638:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <HAL_PWREx_GetVoltageRange+0x3c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d102      	bne.n	800664c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664a:	e00b      	b.n	8006664 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800664c:	4b08      	ldr	r3, [pc, #32]	; (8006670 <HAL_PWREx_GetVoltageRange+0x3c>)
 800664e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665a:	d102      	bne.n	8006662 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800665c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006660:	e000      	b.n	8006664 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006662:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006664:	4618      	mov	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40007000 	.word	0x40007000

08006674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d141      	bne.n	8006706 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006682:	4b4b      	ldr	r3, [pc, #300]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668e:	d131      	bne.n	80066f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006690:	4b47      	ldr	r3, [pc, #284]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006696:	4a46      	ldr	r2, [pc, #280]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800669c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066a0:	4b43      	ldr	r3, [pc, #268]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066a8:	4a41      	ldr	r2, [pc, #260]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80066b0:	4b40      	ldr	r3, [pc, #256]	; (80067b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2232      	movs	r2, #50	; 0x32
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	4a3f      	ldr	r2, [pc, #252]	; (80067b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066bc:	fba2 2303 	umull	r2, r3, r2, r3
 80066c0:	0c9b      	lsrs	r3, r3, #18
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066c6:	e002      	b.n	80066ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066ce:	4b38      	ldr	r3, [pc, #224]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066da:	d102      	bne.n	80066e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f2      	bne.n	80066c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066e2:	4b33      	ldr	r3, [pc, #204]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ee:	d158      	bne.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e057      	b.n	80067a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066f4:	4b2e      	ldr	r3, [pc, #184]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fa:	4a2d      	ldr	r2, [pc, #180]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006704:	e04d      	b.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800670c:	d141      	bne.n	8006792 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800670e:	4b28      	ldr	r3, [pc, #160]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671a:	d131      	bne.n	8006780 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800671c:	4b24      	ldr	r3, [pc, #144]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800671e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006722:	4a23      	ldr	r2, [pc, #140]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800672c:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006734:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800673a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800673c:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2232      	movs	r2, #50	; 0x32
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	4a1c      	ldr	r2, [pc, #112]	; (80067b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	0c9b      	lsrs	r3, r3, #18
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006752:	e002      	b.n	800675a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3b01      	subs	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006766:	d102      	bne.n	800676e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f2      	bne.n	8006754 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800676e:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d112      	bne.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e011      	b.n	80067a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006786:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006790:	e007      	b.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800679a:	4a05      	ldr	r2, [pc, #20]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40007000 	.word	0x40007000
 80067b4:	20000034 	.word	0x20000034
 80067b8:	431bde83 	.word	0x431bde83

080067bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f000 bc16 	b.w	8006ffc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d0:	4ba0      	ldr	r3, [pc, #640]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 030c 	and.w	r3, r3, #12
 80067d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067da:	4b9e      	ldr	r3, [pc, #632]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80e4 	beq.w	80069ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <HAL_RCC_OscConfig+0x4c>
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	f040 808b 	bne.w	8006916 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b01      	cmp	r3, #1
 8006804:	f040 8087 	bne.w	8006916 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006808:	4b92      	ldr	r3, [pc, #584]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_OscConfig+0x64>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e3ed      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1a      	ldr	r2, [r3, #32]
 8006824:	4b8b      	ldr	r3, [pc, #556]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <HAL_RCC_OscConfig+0x7e>
 8006830:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006838:	e005      	b.n	8006846 <HAL_RCC_OscConfig+0x8a>
 800683a:	4b86      	ldr	r3, [pc, #536]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800683c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006846:	4293      	cmp	r3, r2
 8006848:	d223      	bcs.n	8006892 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fdc8 	bl	80073e4 <RCC_SetFlashLatencyFromMSIRange>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e3ce      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800685e:	4b7d      	ldr	r3, [pc, #500]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a7c      	ldr	r2, [pc, #496]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006864:	f043 0308 	orr.w	r3, r3, #8
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	4b7a      	ldr	r3, [pc, #488]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	4977      	ldr	r1, [pc, #476]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006878:	4313      	orrs	r3, r2
 800687a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800687c:	4b75      	ldr	r3, [pc, #468]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	4972      	ldr	r1, [pc, #456]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800688c:	4313      	orrs	r3, r2
 800688e:	604b      	str	r3, [r1, #4]
 8006890:	e025      	b.n	80068de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006892:	4b70      	ldr	r3, [pc, #448]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a6f      	ldr	r2, [pc, #444]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006898:	f043 0308 	orr.w	r3, r3, #8
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	4b6d      	ldr	r3, [pc, #436]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	496a      	ldr	r1, [pc, #424]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068b0:	4b68      	ldr	r3, [pc, #416]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4965      	ldr	r1, [pc, #404]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fd88 	bl	80073e4 <RCC_SetFlashLatencyFromMSIRange>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e38e      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068de:	f000 fcbf 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 80068e2:	4601      	mov	r1, r0
 80068e4:	4b5b      	ldr	r3, [pc, #364]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	4a5a      	ldr	r2, [pc, #360]	; (8006a58 <HAL_RCC_OscConfig+0x29c>)
 80068f0:	5cd3      	ldrb	r3, [r2, r3]
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	fa21 f303 	lsr.w	r3, r1, r3
 80068fa:	4a58      	ldr	r2, [pc, #352]	; (8006a5c <HAL_RCC_OscConfig+0x2a0>)
 80068fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068fe:	4b58      	ldr	r3, [pc, #352]	; (8006a60 <HAL_RCC_OscConfig+0x2a4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc fb84 	bl	8003010 <HAL_InitTick>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d052      	beq.n	80069b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	e372      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d032      	beq.n	8006984 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800691e:	4b4d      	ldr	r3, [pc, #308]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a4c      	ldr	r2, [pc, #304]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800692a:	f7fc fbc1 	bl	80030b0 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006932:	f7fc fbbd 	bl	80030b0 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e35b      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006944:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006950:	4b40      	ldr	r3, [pc, #256]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a3f      	ldr	r2, [pc, #252]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006956:	f043 0308 	orr.w	r3, r3, #8
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	4b3d      	ldr	r3, [pc, #244]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	493a      	ldr	r1, [pc, #232]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800696a:	4313      	orrs	r3, r2
 800696c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800696e:	4b39      	ldr	r3, [pc, #228]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	4935      	ldr	r1, [pc, #212]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800697e:	4313      	orrs	r3, r2
 8006980:	604b      	str	r3, [r1, #4]
 8006982:	e01a      	b.n	80069ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006984:	4b33      	ldr	r3, [pc, #204]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006990:	f7fc fb8e 	bl	80030b0 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006998:	f7fc fb8a 	bl	80030b0 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e328      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069aa:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x1dc>
 80069b6:	e000      	b.n	80069ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d073      	beq.n	8006aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d005      	beq.n	80069d8 <HAL_RCC_OscConfig+0x21c>
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d10e      	bne.n	80069f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d10b      	bne.n	80069f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d8:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d063      	beq.n	8006aac <HAL_RCC_OscConfig+0x2f0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d15f      	bne.n	8006aac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e305      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f8:	d106      	bne.n	8006a08 <HAL_RCC_OscConfig+0x24c>
 80069fa:	4b16      	ldr	r3, [pc, #88]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e01d      	b.n	8006a44 <HAL_RCC_OscConfig+0x288>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a10:	d10c      	bne.n	8006a2c <HAL_RCC_OscConfig+0x270>
 8006a12:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a0c      	ldr	r2, [pc, #48]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e00b      	b.n	8006a44 <HAL_RCC_OscConfig+0x288>
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a05      	ldr	r2, [pc, #20]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01b      	beq.n	8006a84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fc fb30 	bl	80030b0 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a52:	e010      	b.n	8006a76 <HAL_RCC_OscConfig+0x2ba>
 8006a54:	40021000 	.word	0x40021000
 8006a58:	0800b538 	.word	0x0800b538
 8006a5c:	20000034 	.word	0x20000034
 8006a60:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a64:	f7fc fb24 	bl	80030b0 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b64      	cmp	r3, #100	; 0x64
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e2c2      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a76:	4baf      	ldr	r3, [pc, #700]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0x2a8>
 8006a82:	e014      	b.n	8006aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fc fb14 	bl	80030b0 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fc fb10 	bl	80030b0 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e2ae      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a9e:	4ba5      	ldr	r3, [pc, #660]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0x2d0>
 8006aaa:	e000      	b.n	8006aae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d060      	beq.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d005      	beq.n	8006acc <HAL_RCC_OscConfig+0x310>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d119      	bne.n	8006afa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d116      	bne.n	8006afa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006acc:	4b99      	ldr	r3, [pc, #612]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x328>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e28b      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae4:	4b93      	ldr	r3, [pc, #588]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	061b      	lsls	r3, r3, #24
 8006af2:	4990      	ldr	r1, [pc, #576]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af8:	e040      	b.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d023      	beq.n	8006b4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b02:	4b8c      	ldr	r3, [pc, #560]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a8b      	ldr	r2, [pc, #556]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0e:	f7fc facf 	bl	80030b0 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b16:	f7fc facb 	bl	80030b0 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e269      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b28:	4b82      	ldr	r3, [pc, #520]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f0      	beq.n	8006b16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b34:	4b7f      	ldr	r3, [pc, #508]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	497c      	ldr	r1, [pc, #496]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	e018      	b.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b4a:	4b7a      	ldr	r3, [pc, #488]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a79      	ldr	r2, [pc, #484]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b56:	f7fc faab 	bl	80030b0 <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5e:	f7fc faa7 	bl	80030b0 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e245      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b70:	4b70      	ldr	r3, [pc, #448]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f0      	bne.n	8006b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d03c      	beq.n	8006c02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01c      	beq.n	8006bca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b90:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b96:	4a67      	ldr	r2, [pc, #412]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba0:	f7fc fa86 	bl	80030b0 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba8:	f7fc fa82 	bl	80030b0 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e220      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bba:	4b5e      	ldr	r3, [pc, #376]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0ef      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x3ec>
 8006bc8:	e01b      	b.n	8006c02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bca:	4b5a      	ldr	r3, [pc, #360]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd0:	4a58      	ldr	r2, [pc, #352]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bd2:	f023 0301 	bic.w	r3, r3, #1
 8006bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bda:	f7fc fa69 	bl	80030b0 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006be2:	f7fc fa65 	bl	80030b0 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e203      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bf4:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1ef      	bne.n	8006be2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80a6 	beq.w	8006d5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c10:	2300      	movs	r3, #0
 8006c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c14:	4b47      	ldr	r3, [pc, #284]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10d      	bne.n	8006c3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c20:	4b44      	ldr	r3, [pc, #272]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	4a43      	ldr	r2, [pc, #268]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c2c:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c3c:	4b3e      	ldr	r3, [pc, #248]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d118      	bne.n	8006c7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c48:	4b3b      	ldr	r3, [pc, #236]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3a      	ldr	r2, [pc, #232]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c54:	f7fc fa2c 	bl	80030b0 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c5c:	f7fc fa28 	bl	80030b0 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e1c6      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c6e:	4b32      	ldr	r3, [pc, #200]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f0      	beq.n	8006c5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d108      	bne.n	8006c94 <HAL_RCC_OscConfig+0x4d8>
 8006c82:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c92:	e024      	b.n	8006cde <HAL_RCC_OscConfig+0x522>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	d110      	bne.n	8006cbe <HAL_RCC_OscConfig+0x502>
 8006c9c:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	4a24      	ldr	r2, [pc, #144]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cac:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb2:	4a20      	ldr	r2, [pc, #128]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cbc:	e00f      	b.n	8006cde <HAL_RCC_OscConfig+0x522>
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cce:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cd6:	f023 0304 	bic.w	r3, r3, #4
 8006cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce6:	f7fc f9e3 	bl	80030b0 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fc f9df 	bl	80030b0 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e17b      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d04:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0ed      	beq.n	8006cee <HAL_RCC_OscConfig+0x532>
 8006d12:	e01a      	b.n	8006d4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d14:	f7fc f9cc 	bl	80030b0 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d1a:	e00f      	b.n	8006d3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1c:	f7fc f9c8 	bl	80030b0 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d906      	bls.n	8006d3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e164      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
 8006d32:	bf00      	nop
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d3c:	4ba8      	ldr	r3, [pc, #672]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e8      	bne.n	8006d1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d4a:	7ffb      	ldrb	r3, [r7, #31]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d50:	4ba3      	ldr	r3, [pc, #652]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	4aa2      	ldr	r2, [pc, #648]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d03c      	beq.n	8006de2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01c      	beq.n	8006daa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d70:	4b9b      	ldr	r3, [pc, #620]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d76:	4a9a      	ldr	r2, [pc, #616]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fc f996 	bl	80030b0 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d88:	f7fc f992 	bl	80030b0 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e130      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d9a:	4b91      	ldr	r3, [pc, #580]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0ef      	beq.n	8006d88 <HAL_RCC_OscConfig+0x5cc>
 8006da8:	e01b      	b.n	8006de2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006daa:	4b8d      	ldr	r3, [pc, #564]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db0:	4a8b      	ldr	r2, [pc, #556]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dba:	f7fc f979 	bl	80030b0 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc2:	f7fc f975 	bl	80030b0 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e113      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dd4:	4b82      	ldr	r3, [pc, #520]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1ef      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 8107 	beq.w	8006ffa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	f040 80cb 	bne.w	8006f8c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006df6:	4b7a      	ldr	r3, [pc, #488]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f003 0203 	and.w	r2, r3, #3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d12c      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	3b01      	subs	r3, #1
 8006e16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d123      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d11b      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d113      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d109      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d06d      	beq.n	8006f40 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b0c      	cmp	r3, #12
 8006e68:	d068      	beq.n	8006f3c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e6a:	4b5d      	ldr	r3, [pc, #372]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d105      	bne.n	8006e82 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006e76:	4b5a      	ldr	r3, [pc, #360]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e0ba      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e86:	4b56      	ldr	r3, [pc, #344]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a55      	ldr	r2, [pc, #340]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e92:	f7fc f90d 	bl	80030b0 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9a:	f7fc f909 	bl	80030b0 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e0a7      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eac:	4b4c      	ldr	r3, [pc, #304]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f0      	bne.n	8006e9a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb8:	4b49      	ldr	r3, [pc, #292]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	4b49      	ldr	r3, [pc, #292]	; (8006fe4 <HAL_RCC_OscConfig+0x828>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ec8:	3a01      	subs	r2, #1
 8006eca:	0112      	lsls	r2, r2, #4
 8006ecc:	4311      	orrs	r1, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ed2:	0212      	lsls	r2, r2, #8
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006eda:	0852      	lsrs	r2, r2, #1
 8006edc:	3a01      	subs	r2, #1
 8006ede:	0552      	lsls	r2, r2, #21
 8006ee0:	4311      	orrs	r1, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ee6:	0852      	lsrs	r2, r2, #1
 8006ee8:	3a01      	subs	r2, #1
 8006eea:	0652      	lsls	r2, r2, #25
 8006eec:	4311      	orrs	r1, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ef2:	06d2      	lsls	r2, r2, #27
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	493a      	ldr	r1, [pc, #232]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006efc:	4b38      	ldr	r3, [pc, #224]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f08:	4b35      	ldr	r3, [pc, #212]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	4a34      	ldr	r2, [pc, #208]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f14:	f7fc f8cc 	bl	80030b0 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fc f8c8 	bl	80030b0 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e066      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f2e:	4b2c      	ldr	r3, [pc, #176]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f3a:	e05e      	b.n	8006ffa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e05d      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f40:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d156      	bne.n	8006ffa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f4c:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a23      	ldr	r2, [pc, #140]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f58:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4a20      	ldr	r2, [pc, #128]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f64:	f7fc f8a4 	bl	80030b0 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f6c:	f7fc f8a0 	bl	80030b0 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e03e      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7e:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x7b0>
 8006f8a:	e036      	b.n	8006ffa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b0c      	cmp	r3, #12
 8006f90:	d031      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f92:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a12      	ldr	r2, [pc, #72]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006faa:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	4a0c      	ldr	r2, [pc, #48]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006fb0:	f023 0303 	bic.w	r3, r3, #3
 8006fb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006fb6:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <HAL_RCC_OscConfig+0x824>)
 8006fbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc6:	f7fc f873 	bl	80030b0 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fcc:	e00c      	b.n	8006fe8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fce:	f7fc f86f 	bl	80030b0 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d905      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e00d      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <HAL_RCC_OscConfig+0x848>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1ec      	bne.n	8006fce <HAL_RCC_OscConfig+0x812>
 8006ff4:	e001      	b.n	8006ffa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3720      	adds	r7, #32
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40021000 	.word	0x40021000

08007008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e10f      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007020:	4b89      	ldr	r3, [pc, #548]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d910      	bls.n	8007050 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b86      	ldr	r3, [pc, #536]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f023 020f 	bic.w	r2, r3, #15
 8007036:	4984      	ldr	r1, [pc, #528]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	4313      	orrs	r3, r2
 800703c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800703e:	4b82      	ldr	r3, [pc, #520]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0f7      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8089 	beq.w	8007170 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b03      	cmp	r3, #3
 8007064:	d133      	bne.n	80070ce <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007066:	4b79      	ldr	r3, [pc, #484]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e0e4      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007076:	f000 fa0f 	bl	8007498 <RCC_GetSysClockFreqFromPLLSource>
 800707a:	4602      	mov	r2, r0
 800707c:	4b74      	ldr	r3, [pc, #464]	; (8007250 <HAL_RCC_ClockConfig+0x248>)
 800707e:	429a      	cmp	r2, r3
 8007080:	d955      	bls.n	800712e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007082:	4b72      	ldr	r3, [pc, #456]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800708e:	4b6f      	ldr	r3, [pc, #444]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007096:	4a6d      	ldr	r2, [pc, #436]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800709e:	2380      	movs	r3, #128	; 0x80
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e044      	b.n	800712e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d03e      	beq.n	800712e <HAL_RCC_ClockConfig+0x126>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d13a      	bne.n	800712e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070b8:	4b64      	ldr	r3, [pc, #400]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070c0:	4a62      	ldr	r2, [pc, #392]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 80070c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e02f      	b.n	800712e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d107      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070d6:	4b5d      	ldr	r3, [pc, #372]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d115      	bne.n	800710e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e0ac      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070ee:	4b57      	ldr	r3, [pc, #348]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e0a0      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070fe:	4b53      	ldr	r3, [pc, #332]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e098      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800710e:	f000 f8a7 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 8007112:	4602      	mov	r2, r0
 8007114:	4b4e      	ldr	r3, [pc, #312]	; (8007250 <HAL_RCC_ClockConfig+0x248>)
 8007116:	429a      	cmp	r2, r3
 8007118:	d909      	bls.n	800712e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800711a:	4b4c      	ldr	r3, [pc, #304]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007122:	4a4a      	ldr	r2, [pc, #296]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800712a:	2380      	movs	r3, #128	; 0x80
 800712c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800712e:	4b47      	ldr	r3, [pc, #284]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f023 0203 	bic.w	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4944      	ldr	r1, [pc, #272]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 800713c:	4313      	orrs	r3, r2
 800713e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007140:	f7fb ffb6 	bl	80030b0 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007146:	e00a      	b.n	800715e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007148:	f7fb ffb2 	bl	80030b0 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	f241 3288 	movw	r2, #5000	; 0x1388
 8007156:	4293      	cmp	r3, r2
 8007158:	d901      	bls.n	800715e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e070      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715e:	4b3b      	ldr	r3, [pc, #236]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 020c 	and.w	r2, r3, #12
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	429a      	cmp	r2, r3
 800716e:	d1eb      	bne.n	8007148 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800717c:	4b33      	ldr	r3, [pc, #204]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	4930      	ldr	r1, [pc, #192]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
 800718e:	e008      	b.n	80071a2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b80      	cmp	r3, #128	; 0x80
 8007194:	d105      	bne.n	80071a2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007196:	4b2d      	ldr	r3, [pc, #180]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	4a2c      	ldr	r2, [pc, #176]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 800719c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071a2:	4b29      	ldr	r3, [pc, #164]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d210      	bcs.n	80071d2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b0:	4b25      	ldr	r3, [pc, #148]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f023 020f 	bic.w	r2, r3, #15
 80071b8:	4923      	ldr	r1, [pc, #140]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	4313      	orrs	r3, r2
 80071be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c0:	4b21      	ldr	r3, [pc, #132]	; (8007248 <HAL_RCC_ClockConfig+0x240>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d001      	beq.n	80071d2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e036      	b.n	8007240 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071de:	4b1b      	ldr	r3, [pc, #108]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	4918      	ldr	r1, [pc, #96]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071fc:	4b13      	ldr	r3, [pc, #76]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	4910      	ldr	r1, [pc, #64]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 800720c:	4313      	orrs	r3, r2
 800720e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007210:	f000 f826 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 8007214:	4601      	mov	r1, r0
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <HAL_RCC_ClockConfig+0x244>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	091b      	lsrs	r3, r3, #4
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	4a0c      	ldr	r2, [pc, #48]	; (8007254 <HAL_RCC_ClockConfig+0x24c>)
 8007222:	5cd3      	ldrb	r3, [r2, r3]
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	fa21 f303 	lsr.w	r3, r1, r3
 800722c:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <HAL_RCC_ClockConfig+0x250>)
 800722e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_RCC_ClockConfig+0x254>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f7fb feeb 	bl	8003010 <HAL_InitTick>
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]

  return status;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	40022000 	.word	0x40022000
 800724c:	40021000 	.word	0x40021000
 8007250:	04c4b400 	.word	0x04c4b400
 8007254:	0800b538 	.word	0x0800b538
 8007258:	20000034 	.word	0x20000034
 800725c:	20000038 	.word	0x20000038

08007260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007260:	b480      	push	{r7}
 8007262:	b089      	sub	sp, #36	; 0x24
 8007264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	2300      	movs	r3, #0
 800726c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800726e:	4b3d      	ldr	r3, [pc, #244]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 030c 	and.w	r3, r3, #12
 8007276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007278:	4b3a      	ldr	r3, [pc, #232]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x34>
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b0c      	cmp	r3, #12
 800728c:	d121      	bne.n	80072d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d11e      	bne.n	80072d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007294:	4b33      	ldr	r3, [pc, #204]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80072a0:	4b30      	ldr	r3, [pc, #192]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 80072a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	e005      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80072b0:	4b2c      	ldr	r3, [pc, #176]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072bc:	4a2a      	ldr	r2, [pc, #168]	; (8007368 <HAL_RCC_GetSysClockFreq+0x108>)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d102      	bne.n	80072de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072d8:	4b24      	ldr	r3, [pc, #144]	; (800736c <HAL_RCC_GetSysClockFreq+0x10c>)
 80072da:	61bb      	str	r3, [r7, #24]
 80072dc:	e004      	b.n	80072e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d101      	bne.n	80072e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072e4:	4b22      	ldr	r3, [pc, #136]	; (8007370 <HAL_RCC_GetSysClockFreq+0x110>)
 80072e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b0c      	cmp	r3, #12
 80072ec:	d133      	bne.n	8007356 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ee:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d002      	beq.n	8007304 <HAL_RCC_GetSysClockFreq+0xa4>
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d003      	beq.n	800730a <HAL_RCC_GetSysClockFreq+0xaa>
 8007302:	e005      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007304:	4b19      	ldr	r3, [pc, #100]	; (800736c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007306:	617b      	str	r3, [r7, #20]
      break;
 8007308:	e005      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800730a:	4b19      	ldr	r3, [pc, #100]	; (8007370 <HAL_RCC_GetSysClockFreq+0x110>)
 800730c:	617b      	str	r3, [r7, #20]
      break;
 800730e:	e002      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	617b      	str	r3, [r7, #20]
      break;
 8007314:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007316:	4b13      	ldr	r3, [pc, #76]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	3301      	adds	r3, #1
 8007322:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007324:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	fb02 f203 	mul.w	r2, r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <HAL_RCC_GetSysClockFreq+0x104>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	0e5b      	lsrs	r3, r3, #25
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	3301      	adds	r3, #1
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007356:	69bb      	ldr	r3, [r7, #24]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3724      	adds	r7, #36	; 0x24
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	40021000 	.word	0x40021000
 8007368:	0800b550 	.word	0x0800b550
 800736c:	00f42400 	.word	0x00f42400
 8007370:	007a1200 	.word	0x007a1200

08007374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007378:	4b03      	ldr	r3, [pc, #12]	; (8007388 <HAL_RCC_GetHCLKFreq+0x14>)
 800737a:	681b      	ldr	r3, [r3, #0]
}
 800737c:	4618      	mov	r0, r3
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20000034 	.word	0x20000034

0800738c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007390:	f7ff fff0 	bl	8007374 <HAL_RCC_GetHCLKFreq>
 8007394:	4601      	mov	r1, r0
 8007396:	4b06      	ldr	r3, [pc, #24]	; (80073b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	4a04      	ldr	r2, [pc, #16]	; (80073b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073a2:	5cd3      	ldrb	r3, [r2, r3]
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	40021000 	.word	0x40021000
 80073b4:	0800b548 	.word	0x0800b548

080073b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073bc:	f7ff ffda 	bl	8007374 <HAL_RCC_GetHCLKFreq>
 80073c0:	4601      	mov	r1, r0
 80073c2:	4b06      	ldr	r3, [pc, #24]	; (80073dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	0adb      	lsrs	r3, r3, #11
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ce:	5cd3      	ldrb	r3, [r2, r3]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40021000 	.word	0x40021000
 80073e0:	0800b548 	.word	0x0800b548

080073e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073f0:	4b27      	ldr	r3, [pc, #156]	; (8007490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80073f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073fc:	f7ff f91a 	bl	8006634 <HAL_PWREx_GetVoltageRange>
 8007400:	6178      	str	r0, [r7, #20]
 8007402:	e014      	b.n	800742e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007404:	4b22      	ldr	r3, [pc, #136]	; (8007490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007408:	4a21      	ldr	r2, [pc, #132]	; (8007490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800740a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800740e:	6593      	str	r3, [r2, #88]	; 0x58
 8007410:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800741c:	f7ff f90a 	bl	8006634 <HAL_PWREx_GetVoltageRange>
 8007420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007422:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007426:	4a1a      	ldr	r2, [pc, #104]	; (8007490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800742c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007434:	d10b      	bne.n	800744e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d913      	bls.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2ba0      	cmp	r3, #160	; 0xa0
 8007440:	d902      	bls.n	8007448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007442:	2302      	movs	r3, #2
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e00d      	b.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007448:	2301      	movs	r3, #1
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	e00a      	b.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b7f      	cmp	r3, #127	; 0x7f
 8007452:	d902      	bls.n	800745a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007454:	2302      	movs	r3, #2
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	e004      	b.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b70      	cmp	r3, #112	; 0x70
 800745e:	d101      	bne.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007460:	2301      	movs	r3, #1
 8007462:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f023 020f 	bic.w	r2, r3, #15
 800746c:	4909      	ldr	r1, [pc, #36]	; (8007494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	429a      	cmp	r2, r3
 8007480:	d001      	beq.n	8007486 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40021000 	.word	0x40021000
 8007494:	40022000 	.word	0x40022000

08007498 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80074a2:	4b2d      	ldr	r3, [pc, #180]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d118      	bne.n	80074e0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80074ae:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80074ba:	4b27      	ldr	r3, [pc, #156]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80074bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e005      	b.n	80074d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	091b      	lsrs	r3, r3, #4
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80074d6:	4a21      	ldr	r2, [pc, #132]	; (800755c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074de:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d002      	beq.n	80074f6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d003      	beq.n	80074fc <RCC_GetSysClockFreqFromPLLSource+0x64>
 80074f4:	e005      	b.n	8007502 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80074f6:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80074f8:	613b      	str	r3, [r7, #16]
    break;
 80074fa:	e005      	b.n	8007508 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80074fc:	4b19      	ldr	r3, [pc, #100]	; (8007564 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80074fe:	613b      	str	r3, [r7, #16]
    break;
 8007500:	e002      	b.n	8007508 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	613b      	str	r3, [r7, #16]
    break;
 8007506:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007508:	4b13      	ldr	r3, [pc, #76]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	091b      	lsrs	r3, r3, #4
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	3301      	adds	r3, #1
 8007514:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	0a1b      	lsrs	r3, r3, #8
 800751c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	fb02 f203 	mul.w	r2, r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	fbb2 f3f3 	udiv	r3, r2, r3
 800752c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	0e5b      	lsrs	r3, r3, #25
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	3301      	adds	r3, #1
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	fbb2 f3f3 	udiv	r3, r2, r3
 8007546:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007548:	683b      	ldr	r3, [r7, #0]
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40021000 	.word	0x40021000
 800755c:	0800b550 	.word	0x0800b550
 8007560:	00f42400 	.word	0x00f42400
 8007564:	007a1200 	.word	0x007a1200

08007568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007570:	2300      	movs	r3, #0
 8007572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007574:	2300      	movs	r3, #0
 8007576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007580:	2b00      	cmp	r3, #0
 8007582:	d03d      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d00b      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d804      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00e      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d015      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007598:	e01d      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800759a:	2b60      	cmp	r3, #96	; 0x60
 800759c:	d01e      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 800759e:	2b80      	cmp	r3, #128	; 0x80
 80075a0:	d01c      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80075a2:	e018      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075a4:	4b86      	ldr	r3, [pc, #536]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4a85      	ldr	r2, [pc, #532]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075b0:	e015      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fafd 	bl	8007bb8 <RCCEx_PLLSAI1_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075c2:	e00c      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3320      	adds	r3, #32
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fbe4 	bl	8007d98 <RCCEx_PLLSAI2_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075d4:	e003      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	74fb      	strb	r3, [r7, #19]
      break;
 80075da:	e000      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80075dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075de:	7cfb      	ldrb	r3, [r7, #19]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075e4:	4b76      	ldr	r3, [pc, #472]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ea:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f2:	4973      	ldr	r1, [pc, #460]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80075fa:	e001      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fc:	7cfb      	ldrb	r3, [r7, #19]
 80075fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d042      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007614:	d00f      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d805      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d011      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8007620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007624:	d017      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8007626:	e01f      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8007628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800762c:	d01f      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800762e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007632:	d01c      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007634:	e018      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007636:	4b62      	ldr	r3, [pc, #392]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	4a61      	ldr	r2, [pc, #388]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800763c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007640:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007642:	e015      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fab4 	bl	8007bb8 <RCCEx_PLLSAI1_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007654:	e00c      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3320      	adds	r3, #32
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f000 fb9b 	bl	8007d98 <RCCEx_PLLSAI2_Config>
 8007662:	4603      	mov	r3, r0
 8007664:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007666:	e003      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	74fb      	strb	r3, [r7, #19]
      break;
 800766c:	e000      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800766e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007670:	7cfb      	ldrb	r3, [r7, #19]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007676:	4b52      	ldr	r3, [pc, #328]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800767c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007684:	494e      	ldr	r1, [pc, #312]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007686:	4313      	orrs	r3, r2
 8007688:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800768c:	e001      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	7cfb      	ldrb	r3, [r7, #19]
 8007690:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 809f 	beq.w	80077de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076a0:	2300      	movs	r3, #0
 80076a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076a4:	4b46      	ldr	r3, [pc, #280]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e000      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80076b4:	2300      	movs	r3, #0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ba:	4b41      	ldr	r3, [pc, #260]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	4a40      	ldr	r2, [pc, #256]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c4:	6593      	str	r3, [r2, #88]	; 0x58
 80076c6:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ce:	60bb      	str	r3, [r7, #8]
 80076d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076d2:	2301      	movs	r3, #1
 80076d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076d6:	4b3b      	ldr	r3, [pc, #236]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3a      	ldr	r2, [pc, #232]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80076dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076e2:	f7fb fce5 	bl	80030b0 <HAL_GetTick>
 80076e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80076e8:	e009      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ea:	f7fb fce1 	bl	80030b0 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d902      	bls.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	74fb      	strb	r3, [r7, #19]
        break;
 80076fc:	e005      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80076fe:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0ef      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800770a:	7cfb      	ldrb	r3, [r7, #19]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d15b      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007710:	4b2b      	ldr	r3, [pc, #172]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01f      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	429a      	cmp	r2, r3
 800772c:	d019      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800772e:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007738:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800773a:	4b21      	ldr	r3, [pc, #132]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800774a:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007750:	4a1b      	ldr	r2, [pc, #108]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800775a:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d016      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776c:	f7fb fca0 	bl	80030b0 <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007772:	e00b      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007774:	f7fb fc9c 	bl	80030b0 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007782:	4293      	cmp	r3, r2
 8007784:	d902      	bls.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	74fb      	strb	r3, [r7, #19]
            break;
 800778a:	e006      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0ec      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800779a:	7cfb      	ldrb	r3, [r7, #19]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10c      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b0:	4903      	ldr	r1, [pc, #12]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80077b8:	e008      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077ba:	7cfb      	ldrb	r3, [r7, #19]
 80077bc:	74bb      	strb	r3, [r7, #18]
 80077be:	e005      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80077c0:	40021000 	.word	0x40021000
 80077c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c8:	7cfb      	ldrb	r3, [r7, #19]
 80077ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077cc:	7c7b      	ldrb	r3, [r7, #17]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d105      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077d2:	4ba0      	ldr	r3, [pc, #640]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	4a9f      	ldr	r2, [pc, #636]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077ea:	4b9a      	ldr	r3, [pc, #616]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f0:	f023 0203 	bic.w	r2, r3, #3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f8:	4996      	ldr	r1, [pc, #600]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800780c:	4b91      	ldr	r3, [pc, #580]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007812:	f023 020c 	bic.w	r2, r3, #12
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	498e      	ldr	r1, [pc, #568]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800781c:	4313      	orrs	r3, r2
 800781e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800782e:	4b89      	ldr	r3, [pc, #548]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783c:	4985      	ldr	r1, [pc, #532]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007850:	4b80      	ldr	r3, [pc, #512]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785e:	497d      	ldr	r1, [pc, #500]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007872:	4b78      	ldr	r3, [pc, #480]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007880:	4974      	ldr	r1, [pc, #464]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007894:	4b6f      	ldr	r3, [pc, #444]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	496c      	ldr	r1, [pc, #432]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078b6:	4b67      	ldr	r3, [pc, #412]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078c4:	4963      	ldr	r1, [pc, #396]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078d8:	4b5e      	ldr	r3, [pc, #376]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e6:	495b      	ldr	r1, [pc, #364]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078fa:	4b56      	ldr	r3, [pc, #344]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007900:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007908:	4952      	ldr	r1, [pc, #328]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800791c:	4b4d      	ldr	r3, [pc, #308]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007922:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792a:	494a      	ldr	r1, [pc, #296]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800793e:	4b45      	ldr	r3, [pc, #276]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794c:	4941      	ldr	r1, [pc, #260]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007960:	4b3c      	ldr	r3, [pc, #240]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007966:	f023 0203 	bic.w	r2, r3, #3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796e:	4939      	ldr	r1, [pc, #228]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d028      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007982:	4b34      	ldr	r3, [pc, #208]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007988:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007990:	4930      	ldr	r1, [pc, #192]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079a0:	d106      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079a2:	4b2c      	ldr	r3, [pc, #176]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	4a2b      	ldr	r2, [pc, #172]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ac:	60d3      	str	r3, [r2, #12]
 80079ae:	e011      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079b8:	d10c      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3304      	adds	r3, #4
 80079be:	2101      	movs	r1, #1
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f8f9 	bl	8007bb8 <RCCEx_PLLSAI1_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80079ca:	7cfb      	ldrb	r3, [r7, #19]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80079d0:	7cfb      	ldrb	r3, [r7, #19]
 80079d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d04d      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079e8:	d108      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80079ea:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079f0:	4a18      	ldr	r2, [pc, #96]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80079fa:	e012      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80079fc:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a02:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007a0c:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a1a:	490e      	ldr	r1, [pc, #56]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a2a:	d106      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4a08      	ldr	r2, [pc, #32]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a36:	60d3      	str	r3, [r2, #12]
 8007a38:	e020      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a42:	d109      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	4a02      	ldr	r2, [pc, #8]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a4e:	60d3      	str	r3, [r2, #12]
 8007a50:	e014      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007a52:	bf00      	nop
 8007a54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a60:	d10c      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3304      	adds	r3, #4
 8007a66:	2101      	movs	r1, #1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f8a5 	bl	8007bb8 <RCCEx_PLLSAI1_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a72:	7cfb      	ldrb	r3, [r7, #19]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007a78:	7cfb      	ldrb	r3, [r7, #19]
 8007a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d028      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a88:	4b4a      	ldr	r3, [pc, #296]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a96:	4947      	ldr	r1, [pc, #284]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa6:	d106      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	4a41      	ldr	r2, [pc, #260]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab2:	60d3      	str	r3, [r2, #12]
 8007ab4:	e011      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007abe:	d10c      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f876 	bl	8007bb8 <RCCEx_PLLSAI1_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ad0:	7cfb      	ldrb	r3, [r7, #19]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8007ad6:	7cfb      	ldrb	r3, [r7, #19]
 8007ad8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01e      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ae6:	4b33      	ldr	r3, [pc, #204]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af6:	492f      	ldr	r1, [pc, #188]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	2102      	movs	r1, #2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f851 	bl	8007bb8 <RCCEx_PLLSAI1_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b1a:	7cfb      	ldrb	r3, [r7, #19]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8007b20:	7cfb      	ldrb	r3, [r7, #19]
 8007b22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b30:	4b20      	ldr	r3, [pc, #128]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b36:	f023 0204 	bic.w	r2, r3, #4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b40:	491c      	ldr	r1, [pc, #112]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007b54:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b5a:	f023 0218 	bic.w	r2, r3, #24
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b64:	4913      	ldr	r1, [pc, #76]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d017      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b88:	490a      	ldr	r1, [pc, #40]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b9a:	d105      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4a04      	ldr	r2, [pc, #16]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ba6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007ba8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40021000 	.word	0x40021000

08007bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007bc6:	4b70      	ldr	r3, [pc, #448]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00e      	beq.n	8007bf0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007bd2:	4b6d      	ldr	r3, [pc, #436]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0203 	and.w	r2, r3, #3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d103      	bne.n	8007bea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
       ||
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d13f      	bne.n	8007c6a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	e03c      	b.n	8007c6a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d00c      	beq.n	8007c12 <RCCEx_PLLSAI1_Config+0x5a>
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d013      	beq.n	8007c24 <RCCEx_PLLSAI1_Config+0x6c>
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d120      	bne.n	8007c42 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c00:	4b61      	ldr	r3, [pc, #388]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d11d      	bne.n	8007c48 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c10:	e01a      	b.n	8007c48 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c12:	4b5d      	ldr	r3, [pc, #372]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d116      	bne.n	8007c4c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c22:	e013      	b.n	8007c4c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c24:	4b58      	ldr	r3, [pc, #352]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10f      	bne.n	8007c50 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c30:	4b55      	ldr	r3, [pc, #340]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d109      	bne.n	8007c50 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c40:	e006      	b.n	8007c50 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]
      break;
 8007c46:	e004      	b.n	8007c52 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8007c48:	bf00      	nop
 8007c4a:	e002      	b.n	8007c52 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e000      	b.n	8007c52 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8007c50:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007c58:	4b4b      	ldr	r3, [pc, #300]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f023 0203 	bic.w	r2, r3, #3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4948      	ldr	r1, [pc, #288]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 8086 	bne.w	8007d7e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c72:	4b45      	ldr	r3, [pc, #276]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a44      	ldr	r2, [pc, #272]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7e:	f7fb fa17 	bl	80030b0 <HAL_GetTick>
 8007c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c84:	e009      	b.n	8007c9a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c86:	f7fb fa13 	bl	80030b0 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d902      	bls.n	8007c9a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	73fb      	strb	r3, [r7, #15]
        break;
 8007c98:	e005      	b.n	8007ca6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c9a:	4b3b      	ldr	r3, [pc, #236]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1ef      	bne.n	8007c86 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d168      	bne.n	8007d7e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d113      	bne.n	8007cda <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cb2:	4b35      	ldr	r3, [pc, #212]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	4b35      	ldr	r3, [pc, #212]	; (8007d8c <RCCEx_PLLSAI1_Config+0x1d4>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6892      	ldr	r2, [r2, #8]
 8007cbe:	0211      	lsls	r1, r2, #8
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	68d2      	ldr	r2, [r2, #12]
 8007cc4:	06d2      	lsls	r2, r2, #27
 8007cc6:	4311      	orrs	r1, r2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6852      	ldr	r2, [r2, #4]
 8007ccc:	3a01      	subs	r2, #1
 8007cce:	0112      	lsls	r2, r2, #4
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	492d      	ldr	r1, [pc, #180]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	610b      	str	r3, [r1, #16]
 8007cd8:	e02d      	b.n	8007d36 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d115      	bne.n	8007d0c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ce0:	4b29      	ldr	r3, [pc, #164]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	4b2a      	ldr	r3, [pc, #168]	; (8007d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6892      	ldr	r2, [r2, #8]
 8007cec:	0211      	lsls	r1, r2, #8
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6912      	ldr	r2, [r2, #16]
 8007cf2:	0852      	lsrs	r2, r2, #1
 8007cf4:	3a01      	subs	r2, #1
 8007cf6:	0552      	lsls	r2, r2, #21
 8007cf8:	4311      	orrs	r1, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6852      	ldr	r2, [r2, #4]
 8007cfe:	3a01      	subs	r2, #1
 8007d00:	0112      	lsls	r2, r2, #4
 8007d02:	430a      	orrs	r2, r1
 8007d04:	4920      	ldr	r1, [pc, #128]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	610b      	str	r3, [r1, #16]
 8007d0a:	e014      	b.n	8007d36 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	4b20      	ldr	r3, [pc, #128]	; (8007d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d12:	4013      	ands	r3, r2
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6892      	ldr	r2, [r2, #8]
 8007d18:	0211      	lsls	r1, r2, #8
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6952      	ldr	r2, [r2, #20]
 8007d1e:	0852      	lsrs	r2, r2, #1
 8007d20:	3a01      	subs	r2, #1
 8007d22:	0652      	lsls	r2, r2, #25
 8007d24:	4311      	orrs	r1, r2
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	6852      	ldr	r2, [r2, #4]
 8007d2a:	3a01      	subs	r2, #1
 8007d2c:	0112      	lsls	r2, r2, #4
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	4915      	ldr	r1, [pc, #84]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d42:	f7fb f9b5 	bl	80030b0 <HAL_GetTick>
 8007d46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d48:	e009      	b.n	8007d5e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d4a:	f7fb f9b1 	bl	80030b0 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d902      	bls.n	8007d5e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d5c:	e005      	b.n	8007d6a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d5e:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0ef      	beq.n	8007d4a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	4903      	ldr	r1, [pc, #12]	; (8007d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	07ff800f 	.word	0x07ff800f
 8007d90:	ff9f800f 	.word	0xff9f800f
 8007d94:	f9ff800f 	.word	0xf9ff800f

08007d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007da6:	4b70      	ldr	r3, [pc, #448]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00e      	beq.n	8007dd0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007db2:	4b6d      	ldr	r3, [pc, #436]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 0203 	and.w	r2, r3, #3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d103      	bne.n	8007dca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d13f      	bne.n	8007e4a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
 8007dce:	e03c      	b.n	8007e4a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d00c      	beq.n	8007df2 <RCCEx_PLLSAI2_Config+0x5a>
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d013      	beq.n	8007e04 <RCCEx_PLLSAI2_Config+0x6c>
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d120      	bne.n	8007e22 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007de0:	4b61      	ldr	r3, [pc, #388]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d11d      	bne.n	8007e28 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007df0:	e01a      	b.n	8007e28 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007df2:	4b5d      	ldr	r3, [pc, #372]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d116      	bne.n	8007e2c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e02:	e013      	b.n	8007e2c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007e04:	4b58      	ldr	r3, [pc, #352]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10f      	bne.n	8007e30 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e10:	4b55      	ldr	r3, [pc, #340]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e20:	e006      	b.n	8007e30 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	73fb      	strb	r3, [r7, #15]
      break;
 8007e26:	e004      	b.n	8007e32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e002      	b.n	8007e32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e000      	b.n	8007e32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8007e30:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d108      	bne.n	8007e4a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007e38:	4b4b      	ldr	r3, [pc, #300]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f023 0203 	bic.w	r2, r3, #3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4948      	ldr	r1, [pc, #288]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 8086 	bne.w	8007f5e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e52:	4b45      	ldr	r3, [pc, #276]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a44      	ldr	r2, [pc, #272]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e5e:	f7fb f927 	bl	80030b0 <HAL_GetTick>
 8007e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e64:	e009      	b.n	8007e7a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e66:	f7fb f923 	bl	80030b0 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d902      	bls.n	8007e7a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	73fb      	strb	r3, [r7, #15]
        break;
 8007e78:	e005      	b.n	8007e86 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e7a:	4b3b      	ldr	r3, [pc, #236]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1ef      	bne.n	8007e66 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d168      	bne.n	8007f5e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d113      	bne.n	8007eba <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e92:	4b35      	ldr	r3, [pc, #212]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007e94:	695a      	ldr	r2, [r3, #20]
 8007e96:	4b35      	ldr	r3, [pc, #212]	; (8007f6c <RCCEx_PLLSAI2_Config+0x1d4>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6892      	ldr	r2, [r2, #8]
 8007e9e:	0211      	lsls	r1, r2, #8
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	68d2      	ldr	r2, [r2, #12]
 8007ea4:	06d2      	lsls	r2, r2, #27
 8007ea6:	4311      	orrs	r1, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6852      	ldr	r2, [r2, #4]
 8007eac:	3a01      	subs	r2, #1
 8007eae:	0112      	lsls	r2, r2, #4
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	492d      	ldr	r1, [pc, #180]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	614b      	str	r3, [r1, #20]
 8007eb8:	e02d      	b.n	8007f16 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d115      	bne.n	8007eec <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ec0:	4b29      	ldr	r3, [pc, #164]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007ec2:	695a      	ldr	r2, [r3, #20]
 8007ec4:	4b2a      	ldr	r3, [pc, #168]	; (8007f70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6892      	ldr	r2, [r2, #8]
 8007ecc:	0211      	lsls	r1, r2, #8
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6912      	ldr	r2, [r2, #16]
 8007ed2:	0852      	lsrs	r2, r2, #1
 8007ed4:	3a01      	subs	r2, #1
 8007ed6:	0552      	lsls	r2, r2, #21
 8007ed8:	4311      	orrs	r1, r2
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6852      	ldr	r2, [r2, #4]
 8007ede:	3a01      	subs	r2, #1
 8007ee0:	0112      	lsls	r2, r2, #4
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	4920      	ldr	r1, [pc, #128]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	614b      	str	r3, [r1, #20]
 8007eea:	e014      	b.n	8007f16 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007eec:	4b1e      	ldr	r3, [pc, #120]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007eee:	695a      	ldr	r2, [r3, #20]
 8007ef0:	4b20      	ldr	r3, [pc, #128]	; (8007f74 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6892      	ldr	r2, [r2, #8]
 8007ef8:	0211      	lsls	r1, r2, #8
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6952      	ldr	r2, [r2, #20]
 8007efe:	0852      	lsrs	r2, r2, #1
 8007f00:	3a01      	subs	r2, #1
 8007f02:	0652      	lsls	r2, r2, #25
 8007f04:	4311      	orrs	r1, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6852      	ldr	r2, [r2, #4]
 8007f0a:	3a01      	subs	r2, #1
 8007f0c:	0112      	lsls	r2, r2, #4
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	4915      	ldr	r1, [pc, #84]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007f16:	4b14      	ldr	r3, [pc, #80]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a13      	ldr	r2, [pc, #76]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f22:	f7fb f8c5 	bl	80030b0 <HAL_GetTick>
 8007f26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f28:	e009      	b.n	8007f3e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f2a:	f7fb f8c1 	bl	80030b0 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d902      	bls.n	8007f3e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	73fb      	strb	r3, [r7, #15]
          break;
 8007f3c:	e005      	b.n	8007f4a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f3e:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0ef      	beq.n	8007f2a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d106      	bne.n	8007f5e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	4903      	ldr	r1, [pc, #12]	; (8007f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	07ff800f 	.word	0x07ff800f
 8007f70:	ff9f800f 	.word	0xff9f800f
 8007f74:	f9ff800f 	.word	0xf9ff800f

08007f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e095      	b.n	80080b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d108      	bne.n	8007fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f9a:	d009      	beq.n	8007fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	61da      	str	r2, [r3, #28]
 8007fa2:	e005      	b.n	8007fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7fa fd06 	bl	80029dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fe6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ff0:	d902      	bls.n	8007ff8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	e002      	b.n	8007ffe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ffc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008006:	d007      	beq.n	8008018 <HAL_SPI_Init+0xa0>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008010:	d002      	beq.n	8008018 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	431a      	orrs	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805a:	ea42 0103 	orr.w	r1, r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	0c1b      	lsrs	r3, r3, #16
 8008074:	f003 0204 	and.w	r2, r3, #4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008094:	ea42 0103 	orr.w	r1, r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e049      	b.n	8008164 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7fa fcef 	bl	8002ac8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f000 fa4b 	bl	8008598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <HAL_TIM_PWM_Start+0x24>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	bf14      	ite	ne
 8008188:	2301      	movne	r3, #1
 800818a:	2300      	moveq	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e03c      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b04      	cmp	r3, #4
 8008194:	d109      	bne.n	80081aa <HAL_TIM_PWM_Start+0x3e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b01      	cmp	r3, #1
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	e02f      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d109      	bne.n	80081c4 <HAL_TIM_PWM_Start+0x58>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	bf14      	ite	ne
 80081bc:	2301      	movne	r3, #1
 80081be:	2300      	moveq	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	e022      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b0c      	cmp	r3, #12
 80081c8:	d109      	bne.n	80081de <HAL_TIM_PWM_Start+0x72>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	bf14      	ite	ne
 80081d6:	2301      	movne	r3, #1
 80081d8:	2300      	moveq	r3, #0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	e015      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d109      	bne.n	80081f8 <HAL_TIM_PWM_Start+0x8c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	bf14      	ite	ne
 80081f0:	2301      	movne	r3, #1
 80081f2:	2300      	moveq	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	e008      	b.n	800820a <HAL_TIM_PWM_Start+0x9e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b01      	cmp	r3, #1
 8008202:	bf14      	ite	ne
 8008204:	2301      	movne	r3, #1
 8008206:	2300      	moveq	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e09c      	b.n	800834c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Start+0xb6>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008220:	e023      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Start+0xc6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008230:	e01b      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d104      	bne.n	8008242 <HAL_TIM_PWM_Start+0xd6>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008240:	e013      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d104      	bne.n	8008252 <HAL_TIM_PWM_Start+0xe6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008250:	e00b      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b10      	cmp	r3, #16
 8008256:	d104      	bne.n	8008262 <HAL_TIM_PWM_Start+0xf6>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008260:	e003      	b.n	800826a <HAL_TIM_PWM_Start+0xfe>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2201      	movs	r2, #1
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fd00 	bl	8008c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a35      	ldr	r2, [pc, #212]	; (8008354 <HAL_TIM_PWM_Start+0x1e8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <HAL_TIM_PWM_Start+0x13e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a34      	ldr	r2, [pc, #208]	; (8008358 <HAL_TIM_PWM_Start+0x1ec>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00e      	beq.n	80082aa <HAL_TIM_PWM_Start+0x13e>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a32      	ldr	r2, [pc, #200]	; (800835c <HAL_TIM_PWM_Start+0x1f0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d009      	beq.n	80082aa <HAL_TIM_PWM_Start+0x13e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a31      	ldr	r2, [pc, #196]	; (8008360 <HAL_TIM_PWM_Start+0x1f4>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_TIM_PWM_Start+0x13e>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a2f      	ldr	r2, [pc, #188]	; (8008364 <HAL_TIM_PWM_Start+0x1f8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d101      	bne.n	80082ae <HAL_TIM_PWM_Start+0x142>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <HAL_TIM_PWM_Start+0x144>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d007      	beq.n	80082c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a22      	ldr	r2, [pc, #136]	; (8008354 <HAL_TIM_PWM_Start+0x1e8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d01d      	beq.n	800830a <HAL_TIM_PWM_Start+0x19e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d6:	d018      	beq.n	800830a <HAL_TIM_PWM_Start+0x19e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a22      	ldr	r2, [pc, #136]	; (8008368 <HAL_TIM_PWM_Start+0x1fc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <HAL_TIM_PWM_Start+0x19e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a21      	ldr	r2, [pc, #132]	; (800836c <HAL_TIM_PWM_Start+0x200>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00e      	beq.n	800830a <HAL_TIM_PWM_Start+0x19e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <HAL_TIM_PWM_Start+0x204>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d009      	beq.n	800830a <HAL_TIM_PWM_Start+0x19e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a17      	ldr	r2, [pc, #92]	; (8008358 <HAL_TIM_PWM_Start+0x1ec>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d004      	beq.n	800830a <HAL_TIM_PWM_Start+0x19e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a15      	ldr	r2, [pc, #84]	; (800835c <HAL_TIM_PWM_Start+0x1f0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d115      	bne.n	8008336 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	4b18      	ldr	r3, [pc, #96]	; (8008374 <HAL_TIM_PWM_Start+0x208>)
 8008312:	4013      	ands	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b06      	cmp	r3, #6
 800831a:	d015      	beq.n	8008348 <HAL_TIM_PWM_Start+0x1dc>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008322:	d011      	beq.n	8008348 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0201 	orr.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008334:	e008      	b.n	8008348 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0201 	orr.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e000      	b.n	800834a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008348:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	40012c00 	.word	0x40012c00
 8008358:	40013400 	.word	0x40013400
 800835c:	40014000 	.word	0x40014000
 8008360:	40014400 	.word	0x40014400
 8008364:	40014800 	.word	0x40014800
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	40000c00 	.word	0x40000c00
 8008374:	00010007 	.word	0x00010007

08008378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800838e:	2302      	movs	r3, #2
 8008390:	e0fd      	b.n	800858e <HAL_TIM_PWM_ConfigChannel+0x216>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b14      	cmp	r3, #20
 800839e:	f200 80f0 	bhi.w	8008582 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083fd 	.word	0x080083fd
 80083ac:	08008583 	.word	0x08008583
 80083b0:	08008583 	.word	0x08008583
 80083b4:	08008583 	.word	0x08008583
 80083b8:	0800843d 	.word	0x0800843d
 80083bc:	08008583 	.word	0x08008583
 80083c0:	08008583 	.word	0x08008583
 80083c4:	08008583 	.word	0x08008583
 80083c8:	0800847f 	.word	0x0800847f
 80083cc:	08008583 	.word	0x08008583
 80083d0:	08008583 	.word	0x08008583
 80083d4:	08008583 	.word	0x08008583
 80083d8:	080084bf 	.word	0x080084bf
 80083dc:	08008583 	.word	0x08008583
 80083e0:	08008583 	.word	0x08008583
 80083e4:	08008583 	.word	0x08008583
 80083e8:	08008501 	.word	0x08008501
 80083ec:	08008583 	.word	0x08008583
 80083f0:	08008583 	.word	0x08008583
 80083f4:	08008583 	.word	0x08008583
 80083f8:	08008541 	.word	0x08008541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68b9      	ldr	r1, [r7, #8]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f962 	bl	80086cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0208 	orr.w	r2, r2, #8
 8008416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0204 	bic.w	r2, r2, #4
 8008426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6999      	ldr	r1, [r3, #24]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	619a      	str	r2, [r3, #24]
      break;
 800843a:	e0a3      	b.n	8008584 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f9d2 	bl	80087ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699a      	ldr	r2, [r3, #24]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6999      	ldr	r1, [r3, #24]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	021a      	lsls	r2, r3, #8
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	619a      	str	r2, [r3, #24]
      break;
 800847c:	e082      	b.n	8008584 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fa3b 	bl	8008900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0208 	orr.w	r2, r2, #8
 8008498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69da      	ldr	r2, [r3, #28]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0204 	bic.w	r2, r2, #4
 80084a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69d9      	ldr	r1, [r3, #28]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	61da      	str	r2, [r3, #28]
      break;
 80084bc:	e062      	b.n	8008584 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 faa3 	bl	8008a10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69da      	ldr	r2, [r3, #28]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69d9      	ldr	r1, [r3, #28]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	021a      	lsls	r2, r3, #8
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	61da      	str	r2, [r3, #28]
      break;
 80084fe:	e041      	b.n	8008584 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	4618      	mov	r0, r3
 8008508:	f000 faec 	bl	8008ae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0208 	orr.w	r2, r2, #8
 800851a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0204 	bic.w	r2, r2, #4
 800852a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800853e:	e021      	b.n	8008584 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fb30 	bl	8008bac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800855a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800856a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	021a      	lsls	r2, r3, #8
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008580:	e000      	b.n	8008584 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008582:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop

08008598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a40      	ldr	r2, [pc, #256]	; (80086ac <TIM_Base_SetConfig+0x114>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d013      	beq.n	80085d8 <TIM_Base_SetConfig+0x40>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b6:	d00f      	beq.n	80085d8 <TIM_Base_SetConfig+0x40>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a3d      	ldr	r2, [pc, #244]	; (80086b0 <TIM_Base_SetConfig+0x118>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00b      	beq.n	80085d8 <TIM_Base_SetConfig+0x40>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a3c      	ldr	r2, [pc, #240]	; (80086b4 <TIM_Base_SetConfig+0x11c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d007      	beq.n	80085d8 <TIM_Base_SetConfig+0x40>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a3b      	ldr	r2, [pc, #236]	; (80086b8 <TIM_Base_SetConfig+0x120>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0x40>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a3a      	ldr	r2, [pc, #232]	; (80086bc <TIM_Base_SetConfig+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d108      	bne.n	80085ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a2f      	ldr	r2, [pc, #188]	; (80086ac <TIM_Base_SetConfig+0x114>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d01f      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f8:	d01b      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a2c      	ldr	r2, [pc, #176]	; (80086b0 <TIM_Base_SetConfig+0x118>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d017      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a2b      	ldr	r2, [pc, #172]	; (80086b4 <TIM_Base_SetConfig+0x11c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a2a      	ldr	r2, [pc, #168]	; (80086b8 <TIM_Base_SetConfig+0x120>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d00f      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a29      	ldr	r2, [pc, #164]	; (80086bc <TIM_Base_SetConfig+0x124>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00b      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a28      	ldr	r2, [pc, #160]	; (80086c0 <TIM_Base_SetConfig+0x128>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d007      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a27      	ldr	r2, [pc, #156]	; (80086c4 <TIM_Base_SetConfig+0x12c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d003      	beq.n	8008632 <TIM_Base_SetConfig+0x9a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a26      	ldr	r2, [pc, #152]	; (80086c8 <TIM_Base_SetConfig+0x130>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d108      	bne.n	8008644 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a10      	ldr	r2, [pc, #64]	; (80086ac <TIM_Base_SetConfig+0x114>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00f      	beq.n	8008690 <TIM_Base_SetConfig+0xf8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a12      	ldr	r2, [pc, #72]	; (80086bc <TIM_Base_SetConfig+0x124>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00b      	beq.n	8008690 <TIM_Base_SetConfig+0xf8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <TIM_Base_SetConfig+0x128>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d007      	beq.n	8008690 <TIM_Base_SetConfig+0xf8>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <TIM_Base_SetConfig+0x12c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d003      	beq.n	8008690 <TIM_Base_SetConfig+0xf8>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a0f      	ldr	r2, [pc, #60]	; (80086c8 <TIM_Base_SetConfig+0x130>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d103      	bne.n	8008698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	615a      	str	r2, [r3, #20]
}
 800869e:	bf00      	nop
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40012c00 	.word	0x40012c00
 80086b0:	40000400 	.word	0x40000400
 80086b4:	40000800 	.word	0x40000800
 80086b8:	40000c00 	.word	0x40000c00
 80086bc:	40013400 	.word	0x40013400
 80086c0:	40014000 	.word	0x40014000
 80086c4:	40014400 	.word	0x40014400
 80086c8:	40014800 	.word	0x40014800

080086cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f023 0201 	bic.w	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0303 	bic.w	r3, r3, #3
 8008706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4313      	orrs	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f023 0302 	bic.w	r3, r3, #2
 8008718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a2c      	ldr	r2, [pc, #176]	; (80087d8 <TIM_OC1_SetConfig+0x10c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00f      	beq.n	800874c <TIM_OC1_SetConfig+0x80>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a2b      	ldr	r2, [pc, #172]	; (80087dc <TIM_OC1_SetConfig+0x110>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_OC1_SetConfig+0x80>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a2a      	ldr	r2, [pc, #168]	; (80087e0 <TIM_OC1_SetConfig+0x114>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_OC1_SetConfig+0x80>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a29      	ldr	r2, [pc, #164]	; (80087e4 <TIM_OC1_SetConfig+0x118>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_OC1_SetConfig+0x80>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a28      	ldr	r2, [pc, #160]	; (80087e8 <TIM_OC1_SetConfig+0x11c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d10c      	bne.n	8008766 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f023 0308 	bic.w	r3, r3, #8
 8008752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f023 0304 	bic.w	r3, r3, #4
 8008764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a1b      	ldr	r2, [pc, #108]	; (80087d8 <TIM_OC1_SetConfig+0x10c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00f      	beq.n	800878e <TIM_OC1_SetConfig+0xc2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a1a      	ldr	r2, [pc, #104]	; (80087dc <TIM_OC1_SetConfig+0x110>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00b      	beq.n	800878e <TIM_OC1_SetConfig+0xc2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a19      	ldr	r2, [pc, #100]	; (80087e0 <TIM_OC1_SetConfig+0x114>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d007      	beq.n	800878e <TIM_OC1_SetConfig+0xc2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a18      	ldr	r2, [pc, #96]	; (80087e4 <TIM_OC1_SetConfig+0x118>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_OC1_SetConfig+0xc2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a17      	ldr	r2, [pc, #92]	; (80087e8 <TIM_OC1_SetConfig+0x11c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d111      	bne.n	80087b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800879c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	621a      	str	r2, [r3, #32]
}
 80087cc:	bf00      	nop
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40013400 	.word	0x40013400
 80087e0:	40014000 	.word	0x40014000
 80087e4:	40014400 	.word	0x40014400
 80087e8:	40014800 	.word	0x40014800

080087ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f023 0210 	bic.w	r2, r3, #16
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800881a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	021b      	lsls	r3, r3, #8
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f023 0320 	bic.w	r3, r3, #32
 800883a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a28      	ldr	r2, [pc, #160]	; (80088ec <TIM_OC2_SetConfig+0x100>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_OC2_SetConfig+0x6c>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a27      	ldr	r2, [pc, #156]	; (80088f0 <TIM_OC2_SetConfig+0x104>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d10d      	bne.n	8008874 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800885e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <TIM_OC2_SetConfig+0x100>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00f      	beq.n	800889c <TIM_OC2_SetConfig+0xb0>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a1c      	ldr	r2, [pc, #112]	; (80088f0 <TIM_OC2_SetConfig+0x104>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00b      	beq.n	800889c <TIM_OC2_SetConfig+0xb0>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1b      	ldr	r2, [pc, #108]	; (80088f4 <TIM_OC2_SetConfig+0x108>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d007      	beq.n	800889c <TIM_OC2_SetConfig+0xb0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a1a      	ldr	r2, [pc, #104]	; (80088f8 <TIM_OC2_SetConfig+0x10c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d003      	beq.n	800889c <TIM_OC2_SetConfig+0xb0>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a19      	ldr	r2, [pc, #100]	; (80088fc <TIM_OC2_SetConfig+0x110>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d113      	bne.n	80088c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	621a      	str	r2, [r3, #32]
}
 80088de:	bf00      	nop
 80088e0:	371c      	adds	r7, #28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40012c00 	.word	0x40012c00
 80088f0:	40013400 	.word	0x40013400
 80088f4:	40014000 	.word	0x40014000
 80088f8:	40014400 	.word	0x40014400
 80088fc:	40014800 	.word	0x40014800

08008900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800892e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0303 	bic.w	r3, r3, #3
 800893a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800894c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a27      	ldr	r2, [pc, #156]	; (80089fc <TIM_OC3_SetConfig+0xfc>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d003      	beq.n	800896a <TIM_OC3_SetConfig+0x6a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a26      	ldr	r2, [pc, #152]	; (8008a00 <TIM_OC3_SetConfig+0x100>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d10d      	bne.n	8008986 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a1c      	ldr	r2, [pc, #112]	; (80089fc <TIM_OC3_SetConfig+0xfc>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00f      	beq.n	80089ae <TIM_OC3_SetConfig+0xae>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1b      	ldr	r2, [pc, #108]	; (8008a00 <TIM_OC3_SetConfig+0x100>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00b      	beq.n	80089ae <TIM_OC3_SetConfig+0xae>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1a      	ldr	r2, [pc, #104]	; (8008a04 <TIM_OC3_SetConfig+0x104>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d007      	beq.n	80089ae <TIM_OC3_SetConfig+0xae>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <TIM_OC3_SetConfig+0x108>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d003      	beq.n	80089ae <TIM_OC3_SetConfig+0xae>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a18      	ldr	r2, [pc, #96]	; (8008a0c <TIM_OC3_SetConfig+0x10c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d113      	bne.n	80089d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	621a      	str	r2, [r3, #32]
}
 80089f0:	bf00      	nop
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	40012c00 	.word	0x40012c00
 8008a00:	40013400 	.word	0x40013400
 8008a04:	40014000 	.word	0x40014000
 8008a08:	40014400 	.word	0x40014400
 8008a0c:	40014800 	.word	0x40014800

08008a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	021b      	lsls	r3, r3, #8
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	031b      	lsls	r3, r3, #12
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a18      	ldr	r2, [pc, #96]	; (8008ad0 <TIM_OC4_SetConfig+0xc0>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d00f      	beq.n	8008a94 <TIM_OC4_SetConfig+0x84>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <TIM_OC4_SetConfig+0xc4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00b      	beq.n	8008a94 <TIM_OC4_SetConfig+0x84>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <TIM_OC4_SetConfig+0xc8>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d007      	beq.n	8008a94 <TIM_OC4_SetConfig+0x84>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a15      	ldr	r2, [pc, #84]	; (8008adc <TIM_OC4_SetConfig+0xcc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d003      	beq.n	8008a94 <TIM_OC4_SetConfig+0x84>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a14      	ldr	r2, [pc, #80]	; (8008ae0 <TIM_OC4_SetConfig+0xd0>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d109      	bne.n	8008aa8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	019b      	lsls	r3, r3, #6
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	621a      	str	r2, [r3, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40012c00 	.word	0x40012c00
 8008ad4:	40013400 	.word	0x40013400
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40014400 	.word	0x40014400
 8008ae0:	40014800 	.word	0x40014800

08008ae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <TIM_OC5_SetConfig+0xb4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d00f      	beq.n	8008b5e <TIM_OC5_SetConfig+0x7a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a16      	ldr	r2, [pc, #88]	; (8008b9c <TIM_OC5_SetConfig+0xb8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d00b      	beq.n	8008b5e <TIM_OC5_SetConfig+0x7a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a15      	ldr	r2, [pc, #84]	; (8008ba0 <TIM_OC5_SetConfig+0xbc>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d007      	beq.n	8008b5e <TIM_OC5_SetConfig+0x7a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a14      	ldr	r2, [pc, #80]	; (8008ba4 <TIM_OC5_SetConfig+0xc0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d003      	beq.n	8008b5e <TIM_OC5_SetConfig+0x7a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a13      	ldr	r2, [pc, #76]	; (8008ba8 <TIM_OC5_SetConfig+0xc4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d109      	bne.n	8008b72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	621a      	str	r2, [r3, #32]
}
 8008b8c:	bf00      	nop
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40012c00 	.word	0x40012c00
 8008b9c:	40013400 	.word	0x40013400
 8008ba0:	40014000 	.word	0x40014000
 8008ba4:	40014400 	.word	0x40014400
 8008ba8:	40014800 	.word	0x40014800

08008bac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	051b      	lsls	r3, r3, #20
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a18      	ldr	r2, [pc, #96]	; (8008c64 <TIM_OC6_SetConfig+0xb8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d00f      	beq.n	8008c28 <TIM_OC6_SetConfig+0x7c>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <TIM_OC6_SetConfig+0xbc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00b      	beq.n	8008c28 <TIM_OC6_SetConfig+0x7c>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <TIM_OC6_SetConfig+0xc0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d007      	beq.n	8008c28 <TIM_OC6_SetConfig+0x7c>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <TIM_OC6_SetConfig+0xc4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d003      	beq.n	8008c28 <TIM_OC6_SetConfig+0x7c>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <TIM_OC6_SetConfig+0xc8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d109      	bne.n	8008c3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	029b      	lsls	r3, r3, #10
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	40012c00 	.word	0x40012c00
 8008c68:	40013400 	.word	0x40013400
 8008c6c:	40014000 	.word	0x40014000
 8008c70:	40014400 	.word	0x40014400
 8008c74:	40014800 	.word	0x40014800

08008c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a1a      	ldr	r2, [r3, #32]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	401a      	ands	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a1a      	ldr	r2, [r3, #32]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f003 031f 	and.w	r3, r3, #31
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e068      	b.n	8008dae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a2e      	ldr	r2, [pc, #184]	; (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d004      	beq.n	8008d10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a2d      	ldr	r2, [pc, #180]	; (8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d108      	bne.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1e      	ldr	r2, [pc, #120]	; (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d01d      	beq.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d4e:	d018      	beq.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1b      	ldr	r2, [pc, #108]	; (8008dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d013      	beq.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1a      	ldr	r2, [pc, #104]	; (8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00e      	beq.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d009      	beq.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a13      	ldr	r2, [pc, #76]	; (8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d004      	beq.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a14      	ldr	r2, [pc, #80]	; (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d10c      	bne.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	40012c00 	.word	0x40012c00
 8008dc0:	40013400 	.word	0x40013400
 8008dc4:	40000400 	.word	0x40000400
 8008dc8:	40000800 	.word	0x40000800
 8008dcc:	40000c00 	.word	0x40000c00
 8008dd0:	40014000 	.word	0x40014000

08008dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e042      	b.n	8008e6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d106      	bne.n	8008dfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7f9 feb9 	bl	8002b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2224      	movs	r2, #36	; 0x24
 8008e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f8c4 	bl	8008fa4 <UART_SetConfig>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e022      	b.n	8008e6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb8a 	bl	8009548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc11 	bl	800968c <UART_CheckIdleState>
 8008e6a:	4603      	mov	r3, r0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	f040 8084 	bne.w	8008f98 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_UART_Transmit+0x28>
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e07c      	b.n	8008f9a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_UART_Transmit+0x3a>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e075      	b.n	8008f9a <HAL_UART_Transmit+0x126>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2221      	movs	r2, #33	; 0x21
 8008ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008ec6:	f7fa f8f3 	bl	80030b0 <HAL_GetTick>
 8008eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	88fa      	ldrh	r2, [r7, #6]
 8008ed0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	88fa      	ldrh	r2, [r7, #6]
 8008ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee4:	d108      	bne.n	8008ef8 <HAL_UART_Transmit+0x84>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d104      	bne.n	8008ef8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	61bb      	str	r3, [r7, #24]
 8008ef6:	e003      	b.n	8008f00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008f08:	e02d      	b.n	8008f66 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2200      	movs	r2, #0
 8008f12:	2180      	movs	r1, #128	; 0x80
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 fc01 	bl	800971c <UART_WaitOnFlagUntilTimeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e03a      	b.n	8008f9a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	881a      	ldrh	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f36:	b292      	uxth	r2, r2
 8008f38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	e008      	b.n	8008f54 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	781a      	ldrb	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	b292      	uxth	r2, r2
 8008f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	3301      	adds	r3, #1
 8008f52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1cb      	bne.n	8008f0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2140      	movs	r1, #64	; 0x40
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fbcd 	bl	800971c <UART_WaitOnFlagUntilTimeout>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e006      	b.n	8008f9a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e000      	b.n	8008f9a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008f98:	2302      	movs	r3, #2
  }
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008fa8:	b088      	sub	sp, #32
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4bb1      	ldr	r3, [pc, #708]	; (80092a0 <UART_SetConfig+0x2fc>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6812      	ldr	r2, [r2, #0]
 8008fe2:	69f9      	ldr	r1, [r7, #28]
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4aa6      	ldr	r2, [pc, #664]	; (80092a4 <UART_SetConfig+0x300>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d004      	beq.n	8009018 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	4313      	orrs	r3, r2
 8009016:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009022:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	6812      	ldr	r2, [r2, #0]
 800902a:	69f9      	ldr	r1, [r7, #28]
 800902c:	430b      	orrs	r3, r1
 800902e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	f023 010f 	bic.w	r1, r3, #15
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a97      	ldr	r2, [pc, #604]	; (80092a8 <UART_SetConfig+0x304>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d121      	bne.n	8009094 <UART_SetConfig+0xf0>
 8009050:	4b96      	ldr	r3, [pc, #600]	; (80092ac <UART_SetConfig+0x308>)
 8009052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	2b03      	cmp	r3, #3
 800905c:	d816      	bhi.n	800908c <UART_SetConfig+0xe8>
 800905e:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <UART_SetConfig+0xc0>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009075 	.word	0x08009075
 8009068:	08009081 	.word	0x08009081
 800906c:	0800907b 	.word	0x0800907b
 8009070:	08009087 	.word	0x08009087
 8009074:	2301      	movs	r3, #1
 8009076:	76fb      	strb	r3, [r7, #27]
 8009078:	e0e8      	b.n	800924c <UART_SetConfig+0x2a8>
 800907a:	2302      	movs	r3, #2
 800907c:	76fb      	strb	r3, [r7, #27]
 800907e:	e0e5      	b.n	800924c <UART_SetConfig+0x2a8>
 8009080:	2304      	movs	r3, #4
 8009082:	76fb      	strb	r3, [r7, #27]
 8009084:	e0e2      	b.n	800924c <UART_SetConfig+0x2a8>
 8009086:	2308      	movs	r3, #8
 8009088:	76fb      	strb	r3, [r7, #27]
 800908a:	e0df      	b.n	800924c <UART_SetConfig+0x2a8>
 800908c:	2310      	movs	r3, #16
 800908e:	76fb      	strb	r3, [r7, #27]
 8009090:	bf00      	nop
 8009092:	e0db      	b.n	800924c <UART_SetConfig+0x2a8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a85      	ldr	r2, [pc, #532]	; (80092b0 <UART_SetConfig+0x30c>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d134      	bne.n	8009108 <UART_SetConfig+0x164>
 800909e:	4b83      	ldr	r3, [pc, #524]	; (80092ac <UART_SetConfig+0x308>)
 80090a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a4:	f003 030c 	and.w	r3, r3, #12
 80090a8:	2b0c      	cmp	r3, #12
 80090aa:	d829      	bhi.n	8009100 <UART_SetConfig+0x15c>
 80090ac:	a201      	add	r2, pc, #4	; (adr r2, 80090b4 <UART_SetConfig+0x110>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090e9 	.word	0x080090e9
 80090b8:	08009101 	.word	0x08009101
 80090bc:	08009101 	.word	0x08009101
 80090c0:	08009101 	.word	0x08009101
 80090c4:	080090f5 	.word	0x080090f5
 80090c8:	08009101 	.word	0x08009101
 80090cc:	08009101 	.word	0x08009101
 80090d0:	08009101 	.word	0x08009101
 80090d4:	080090ef 	.word	0x080090ef
 80090d8:	08009101 	.word	0x08009101
 80090dc:	08009101 	.word	0x08009101
 80090e0:	08009101 	.word	0x08009101
 80090e4:	080090fb 	.word	0x080090fb
 80090e8:	2300      	movs	r3, #0
 80090ea:	76fb      	strb	r3, [r7, #27]
 80090ec:	e0ae      	b.n	800924c <UART_SetConfig+0x2a8>
 80090ee:	2302      	movs	r3, #2
 80090f0:	76fb      	strb	r3, [r7, #27]
 80090f2:	e0ab      	b.n	800924c <UART_SetConfig+0x2a8>
 80090f4:	2304      	movs	r3, #4
 80090f6:	76fb      	strb	r3, [r7, #27]
 80090f8:	e0a8      	b.n	800924c <UART_SetConfig+0x2a8>
 80090fa:	2308      	movs	r3, #8
 80090fc:	76fb      	strb	r3, [r7, #27]
 80090fe:	e0a5      	b.n	800924c <UART_SetConfig+0x2a8>
 8009100:	2310      	movs	r3, #16
 8009102:	76fb      	strb	r3, [r7, #27]
 8009104:	bf00      	nop
 8009106:	e0a1      	b.n	800924c <UART_SetConfig+0x2a8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a69      	ldr	r2, [pc, #420]	; (80092b4 <UART_SetConfig+0x310>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d120      	bne.n	8009154 <UART_SetConfig+0x1b0>
 8009112:	4b66      	ldr	r3, [pc, #408]	; (80092ac <UART_SetConfig+0x308>)
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800911c:	2b10      	cmp	r3, #16
 800911e:	d00f      	beq.n	8009140 <UART_SetConfig+0x19c>
 8009120:	2b10      	cmp	r3, #16
 8009122:	d802      	bhi.n	800912a <UART_SetConfig+0x186>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <UART_SetConfig+0x190>
 8009128:	e010      	b.n	800914c <UART_SetConfig+0x1a8>
 800912a:	2b20      	cmp	r3, #32
 800912c:	d005      	beq.n	800913a <UART_SetConfig+0x196>
 800912e:	2b30      	cmp	r3, #48	; 0x30
 8009130:	d009      	beq.n	8009146 <UART_SetConfig+0x1a2>
 8009132:	e00b      	b.n	800914c <UART_SetConfig+0x1a8>
 8009134:	2300      	movs	r3, #0
 8009136:	76fb      	strb	r3, [r7, #27]
 8009138:	e088      	b.n	800924c <UART_SetConfig+0x2a8>
 800913a:	2302      	movs	r3, #2
 800913c:	76fb      	strb	r3, [r7, #27]
 800913e:	e085      	b.n	800924c <UART_SetConfig+0x2a8>
 8009140:	2304      	movs	r3, #4
 8009142:	76fb      	strb	r3, [r7, #27]
 8009144:	e082      	b.n	800924c <UART_SetConfig+0x2a8>
 8009146:	2308      	movs	r3, #8
 8009148:	76fb      	strb	r3, [r7, #27]
 800914a:	e07f      	b.n	800924c <UART_SetConfig+0x2a8>
 800914c:	2310      	movs	r3, #16
 800914e:	76fb      	strb	r3, [r7, #27]
 8009150:	bf00      	nop
 8009152:	e07b      	b.n	800924c <UART_SetConfig+0x2a8>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a57      	ldr	r2, [pc, #348]	; (80092b8 <UART_SetConfig+0x314>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d120      	bne.n	80091a0 <UART_SetConfig+0x1fc>
 800915e:	4b53      	ldr	r3, [pc, #332]	; (80092ac <UART_SetConfig+0x308>)
 8009160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009164:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009168:	2b40      	cmp	r3, #64	; 0x40
 800916a:	d00f      	beq.n	800918c <UART_SetConfig+0x1e8>
 800916c:	2b40      	cmp	r3, #64	; 0x40
 800916e:	d802      	bhi.n	8009176 <UART_SetConfig+0x1d2>
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <UART_SetConfig+0x1dc>
 8009174:	e010      	b.n	8009198 <UART_SetConfig+0x1f4>
 8009176:	2b80      	cmp	r3, #128	; 0x80
 8009178:	d005      	beq.n	8009186 <UART_SetConfig+0x1e2>
 800917a:	2bc0      	cmp	r3, #192	; 0xc0
 800917c:	d009      	beq.n	8009192 <UART_SetConfig+0x1ee>
 800917e:	e00b      	b.n	8009198 <UART_SetConfig+0x1f4>
 8009180:	2300      	movs	r3, #0
 8009182:	76fb      	strb	r3, [r7, #27]
 8009184:	e062      	b.n	800924c <UART_SetConfig+0x2a8>
 8009186:	2302      	movs	r3, #2
 8009188:	76fb      	strb	r3, [r7, #27]
 800918a:	e05f      	b.n	800924c <UART_SetConfig+0x2a8>
 800918c:	2304      	movs	r3, #4
 800918e:	76fb      	strb	r3, [r7, #27]
 8009190:	e05c      	b.n	800924c <UART_SetConfig+0x2a8>
 8009192:	2308      	movs	r3, #8
 8009194:	76fb      	strb	r3, [r7, #27]
 8009196:	e059      	b.n	800924c <UART_SetConfig+0x2a8>
 8009198:	2310      	movs	r3, #16
 800919a:	76fb      	strb	r3, [r7, #27]
 800919c:	bf00      	nop
 800919e:	e055      	b.n	800924c <UART_SetConfig+0x2a8>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a45      	ldr	r2, [pc, #276]	; (80092bc <UART_SetConfig+0x318>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d124      	bne.n	80091f4 <UART_SetConfig+0x250>
 80091aa:	4b40      	ldr	r3, [pc, #256]	; (80092ac <UART_SetConfig+0x308>)
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b8:	d012      	beq.n	80091e0 <UART_SetConfig+0x23c>
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091be:	d802      	bhi.n	80091c6 <UART_SetConfig+0x222>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <UART_SetConfig+0x230>
 80091c4:	e012      	b.n	80091ec <UART_SetConfig+0x248>
 80091c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ca:	d006      	beq.n	80091da <UART_SetConfig+0x236>
 80091cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091d0:	d009      	beq.n	80091e6 <UART_SetConfig+0x242>
 80091d2:	e00b      	b.n	80091ec <UART_SetConfig+0x248>
 80091d4:	2300      	movs	r3, #0
 80091d6:	76fb      	strb	r3, [r7, #27]
 80091d8:	e038      	b.n	800924c <UART_SetConfig+0x2a8>
 80091da:	2302      	movs	r3, #2
 80091dc:	76fb      	strb	r3, [r7, #27]
 80091de:	e035      	b.n	800924c <UART_SetConfig+0x2a8>
 80091e0:	2304      	movs	r3, #4
 80091e2:	76fb      	strb	r3, [r7, #27]
 80091e4:	e032      	b.n	800924c <UART_SetConfig+0x2a8>
 80091e6:	2308      	movs	r3, #8
 80091e8:	76fb      	strb	r3, [r7, #27]
 80091ea:	e02f      	b.n	800924c <UART_SetConfig+0x2a8>
 80091ec:	2310      	movs	r3, #16
 80091ee:	76fb      	strb	r3, [r7, #27]
 80091f0:	bf00      	nop
 80091f2:	e02b      	b.n	800924c <UART_SetConfig+0x2a8>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a2a      	ldr	r2, [pc, #168]	; (80092a4 <UART_SetConfig+0x300>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d124      	bne.n	8009248 <UART_SetConfig+0x2a4>
 80091fe:	4b2b      	ldr	r3, [pc, #172]	; (80092ac <UART_SetConfig+0x308>)
 8009200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800920c:	d012      	beq.n	8009234 <UART_SetConfig+0x290>
 800920e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009212:	d802      	bhi.n	800921a <UART_SetConfig+0x276>
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <UART_SetConfig+0x284>
 8009218:	e012      	b.n	8009240 <UART_SetConfig+0x29c>
 800921a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800921e:	d006      	beq.n	800922e <UART_SetConfig+0x28a>
 8009220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009224:	d009      	beq.n	800923a <UART_SetConfig+0x296>
 8009226:	e00b      	b.n	8009240 <UART_SetConfig+0x29c>
 8009228:	2300      	movs	r3, #0
 800922a:	76fb      	strb	r3, [r7, #27]
 800922c:	e00e      	b.n	800924c <UART_SetConfig+0x2a8>
 800922e:	2302      	movs	r3, #2
 8009230:	76fb      	strb	r3, [r7, #27]
 8009232:	e00b      	b.n	800924c <UART_SetConfig+0x2a8>
 8009234:	2304      	movs	r3, #4
 8009236:	76fb      	strb	r3, [r7, #27]
 8009238:	e008      	b.n	800924c <UART_SetConfig+0x2a8>
 800923a:	2308      	movs	r3, #8
 800923c:	76fb      	strb	r3, [r7, #27]
 800923e:	e005      	b.n	800924c <UART_SetConfig+0x2a8>
 8009240:	2310      	movs	r3, #16
 8009242:	76fb      	strb	r3, [r7, #27]
 8009244:	bf00      	nop
 8009246:	e001      	b.n	800924c <UART_SetConfig+0x2a8>
 8009248:	2310      	movs	r3, #16
 800924a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a14      	ldr	r2, [pc, #80]	; (80092a4 <UART_SetConfig+0x300>)
 8009252:	4293      	cmp	r3, r2
 8009254:	f040 80a1 	bne.w	800939a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009258:	7efb      	ldrb	r3, [r7, #27]
 800925a:	2b08      	cmp	r3, #8
 800925c:	d836      	bhi.n	80092cc <UART_SetConfig+0x328>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <UART_SetConfig+0x2c0>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009289 	.word	0x08009289
 8009268:	080092cd 	.word	0x080092cd
 800926c:	08009291 	.word	0x08009291
 8009270:	080092cd 	.word	0x080092cd
 8009274:	08009297 	.word	0x08009297
 8009278:	080092cd 	.word	0x080092cd
 800927c:	080092cd 	.word	0x080092cd
 8009280:	080092cd 	.word	0x080092cd
 8009284:	080092c5 	.word	0x080092c5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009288:	f7fe f880 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 800928c:	6178      	str	r0, [r7, #20]
        break;
 800928e:	e022      	b.n	80092d6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009290:	4b0b      	ldr	r3, [pc, #44]	; (80092c0 <UART_SetConfig+0x31c>)
 8009292:	617b      	str	r3, [r7, #20]
        break;
 8009294:	e01f      	b.n	80092d6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009296:	f7fd ffe3 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 800929a:	6178      	str	r0, [r7, #20]
        break;
 800929c:	e01b      	b.n	80092d6 <UART_SetConfig+0x332>
 800929e:	bf00      	nop
 80092a0:	cfff69f3 	.word	0xcfff69f3
 80092a4:	40008000 	.word	0x40008000
 80092a8:	40013800 	.word	0x40013800
 80092ac:	40021000 	.word	0x40021000
 80092b0:	40004400 	.word	0x40004400
 80092b4:	40004800 	.word	0x40004800
 80092b8:	40004c00 	.word	0x40004c00
 80092bc:	40005000 	.word	0x40005000
 80092c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092c8:	617b      	str	r3, [r7, #20]
        break;
 80092ca:	e004      	b.n	80092d6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	76bb      	strb	r3, [r7, #26]
        break;
 80092d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 811d 	beq.w	8009518 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	4a97      	ldr	r2, [pc, #604]	; (8009540 <UART_SetConfig+0x59c>)
 80092e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e8:	461a      	mov	r2, r3
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4413      	add	r3, r2
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d305      	bcc.n	800930e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	429a      	cmp	r2, r3
 800930c:	d902      	bls.n	8009314 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	76bb      	strb	r3, [r7, #26]
 8009312:	e101      	b.n	8009518 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	4618      	mov	r0, r3
 8009318:	f04f 0100 	mov.w	r1, #0
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	4a87      	ldr	r2, [pc, #540]	; (8009540 <UART_SetConfig+0x59c>)
 8009322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f04f 0400 	mov.w	r4, #0
 800932c:	461a      	mov	r2, r3
 800932e:	4623      	mov	r3, r4
 8009330:	f7f7 fc22 	bl	8000b78 <__aeabi_uldivmod>
 8009334:	4603      	mov	r3, r0
 8009336:	460c      	mov	r4, r1
 8009338:	4619      	mov	r1, r3
 800933a:	4622      	mov	r2, r4
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	f04f 0400 	mov.w	r4, #0
 8009344:	0214      	lsls	r4, r2, #8
 8009346:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800934a:	020b      	lsls	r3, r1, #8
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	6852      	ldr	r2, [r2, #4]
 8009350:	0852      	lsrs	r2, r2, #1
 8009352:	4611      	mov	r1, r2
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	eb13 0b01 	adds.w	fp, r3, r1
 800935c:	eb44 0c02 	adc.w	ip, r4, r2
 8009360:	4658      	mov	r0, fp
 8009362:	4661      	mov	r1, ip
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f04f 0400 	mov.w	r4, #0
 800936c:	461a      	mov	r2, r3
 800936e:	4623      	mov	r3, r4
 8009370:	f7f7 fc02 	bl	8000b78 <__aeabi_uldivmod>
 8009374:	4603      	mov	r3, r0
 8009376:	460c      	mov	r4, r1
 8009378:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009380:	d308      	bcc.n	8009394 <UART_SetConfig+0x3f0>
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009388:	d204      	bcs.n	8009394 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	60da      	str	r2, [r3, #12]
 8009392:	e0c1      	b.n	8009518 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	76bb      	strb	r3, [r7, #26]
 8009398:	e0be      	b.n	8009518 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a2:	d164      	bne.n	800946e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80093a4:	7efb      	ldrb	r3, [r7, #27]
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	d827      	bhi.n	80093fa <UART_SetConfig+0x456>
 80093aa:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <UART_SetConfig+0x40c>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	080093d5 	.word	0x080093d5
 80093b4:	080093dd 	.word	0x080093dd
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	080093fb 	.word	0x080093fb
 80093c0:	080093eb 	.word	0x080093eb
 80093c4:	080093fb 	.word	0x080093fb
 80093c8:	080093fb 	.word	0x080093fb
 80093cc:	080093fb 	.word	0x080093fb
 80093d0:	080093f3 	.word	0x080093f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093d4:	f7fd ffda 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 80093d8:	6178      	str	r0, [r7, #20]
        break;
 80093da:	e013      	b.n	8009404 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093dc:	f7fd ffec 	bl	80073b8 <HAL_RCC_GetPCLK2Freq>
 80093e0:	6178      	str	r0, [r7, #20]
        break;
 80093e2:	e00f      	b.n	8009404 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093e4:	4b57      	ldr	r3, [pc, #348]	; (8009544 <UART_SetConfig+0x5a0>)
 80093e6:	617b      	str	r3, [r7, #20]
        break;
 80093e8:	e00c      	b.n	8009404 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ea:	f7fd ff39 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 80093ee:	6178      	str	r0, [r7, #20]
        break;
 80093f0:	e008      	b.n	8009404 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f6:	617b      	str	r3, [r7, #20]
        break;
 80093f8:	e004      	b.n	8009404 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	76bb      	strb	r3, [r7, #26]
        break;
 8009402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 8086 	beq.w	8009518 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	4a4b      	ldr	r2, [pc, #300]	; (8009540 <UART_SetConfig+0x59c>)
 8009412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009416:	461a      	mov	r2, r3
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	fbb3 f3f2 	udiv	r3, r3, r2
 800941e:	005a      	lsls	r2, r3, #1
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	085b      	lsrs	r3, r3, #1
 8009426:	441a      	add	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009430:	b29b      	uxth	r3, r3
 8009432:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b0f      	cmp	r3, #15
 8009438:	d916      	bls.n	8009468 <UART_SetConfig+0x4c4>
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009440:	d212      	bcs.n	8009468 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	b29b      	uxth	r3, r3
 8009446:	f023 030f 	bic.w	r3, r3, #15
 800944a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	085b      	lsrs	r3, r3, #1
 8009450:	b29b      	uxth	r3, r3
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	b29a      	uxth	r2, r3
 8009458:	89fb      	ldrh	r3, [r7, #14]
 800945a:	4313      	orrs	r3, r2
 800945c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	89fa      	ldrh	r2, [r7, #14]
 8009464:	60da      	str	r2, [r3, #12]
 8009466:	e057      	b.n	8009518 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	76bb      	strb	r3, [r7, #26]
 800946c:	e054      	b.n	8009518 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800946e:	7efb      	ldrb	r3, [r7, #27]
 8009470:	2b08      	cmp	r3, #8
 8009472:	d828      	bhi.n	80094c6 <UART_SetConfig+0x522>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <UART_SetConfig+0x4d8>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094a1 	.word	0x080094a1
 8009480:	080094a9 	.word	0x080094a9
 8009484:	080094b1 	.word	0x080094b1
 8009488:	080094c7 	.word	0x080094c7
 800948c:	080094b7 	.word	0x080094b7
 8009490:	080094c7 	.word	0x080094c7
 8009494:	080094c7 	.word	0x080094c7
 8009498:	080094c7 	.word	0x080094c7
 800949c:	080094bf 	.word	0x080094bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a0:	f7fd ff74 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 80094a4:	6178      	str	r0, [r7, #20]
        break;
 80094a6:	e013      	b.n	80094d0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094a8:	f7fd ff86 	bl	80073b8 <HAL_RCC_GetPCLK2Freq>
 80094ac:	6178      	str	r0, [r7, #20]
        break;
 80094ae:	e00f      	b.n	80094d0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094b0:	4b24      	ldr	r3, [pc, #144]	; (8009544 <UART_SetConfig+0x5a0>)
 80094b2:	617b      	str	r3, [r7, #20]
        break;
 80094b4:	e00c      	b.n	80094d0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094b6:	f7fd fed3 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 80094ba:	6178      	str	r0, [r7, #20]
        break;
 80094bc:	e008      	b.n	80094d0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094c2:	617b      	str	r3, [r7, #20]
        break;
 80094c4:	e004      	b.n	80094d0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	76bb      	strb	r3, [r7, #26]
        break;
 80094ce:	bf00      	nop
    }

    if (pclk != 0U)
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d020      	beq.n	8009518 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	4a19      	ldr	r2, [pc, #100]	; (8009540 <UART_SetConfig+0x59c>)
 80094dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e0:	461a      	mov	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	085b      	lsrs	r3, r3, #1
 80094ee:	441a      	add	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b0f      	cmp	r3, #15
 8009500:	d908      	bls.n	8009514 <UART_SetConfig+0x570>
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009508:	d204      	bcs.n	8009514 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	60da      	str	r2, [r3, #12]
 8009512:	e001      	b.n	8009518 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009534:	7ebb      	ldrb	r3, [r7, #26]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3720      	adds	r7, #32
 800953a:	46bd      	mov	sp, r7
 800953c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009540:	0800b580 	.word	0x0800b580
 8009544:	00f42400 	.word	0x00f42400

08009548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00a      	beq.n	80095b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ba:	f003 0308 	and.w	r3, r3, #8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01a      	beq.n	800965e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009646:	d10a      	bne.n	800965e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	605a      	str	r2, [r3, #4]
  }
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af02      	add	r7, sp, #8
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800969c:	f7f9 fd08 	bl	80030b0 <HAL_GetTick>
 80096a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d10e      	bne.n	80096ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f82c 	bl	800971c <UART_WaitOnFlagUntilTimeout>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e022      	b.n	8009714 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d10e      	bne.n	80096fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f816 	bl	800971c <UART_WaitOnFlagUntilTimeout>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e00c      	b.n	8009714 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	4613      	mov	r3, r2
 800972a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800972c:	e062      	b.n	80097f4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d05e      	beq.n	80097f4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009736:	f7f9 fcbb 	bl	80030b0 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	429a      	cmp	r2, r3
 8009744:	d302      	bcc.n	800974c <UART_WaitOnFlagUntilTimeout+0x30>
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d11d      	bne.n	8009788 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800975a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2220      	movs	r2, #32
 8009770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e045      	b.n	8009814 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0304 	and.w	r3, r3, #4
 8009792:	2b00      	cmp	r3, #0
 8009794:	d02e      	beq.n	80097f4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097a4:	d126      	bne.n	80097f4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097be:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0201 	bic.w	r2, r2, #1
 80097ce:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2220      	movs	r2, #32
 80097dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e00f      	b.n	8009814 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	69da      	ldr	r2, [r3, #28]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	4013      	ands	r3, r2
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	429a      	cmp	r2, r3
 8009802:	bf0c      	ite	eq
 8009804:	2301      	moveq	r3, #1
 8009806:	2300      	movne	r3, #0
 8009808:	b2db      	uxtb	r3, r3
 800980a:	461a      	mov	r2, r3
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	429a      	cmp	r2, r3
 8009810:	d08d      	beq.n	800972e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <HAL_UARTEx_DisableFifoMode+0x16>
 800982e:	2302      	movs	r3, #2
 8009830:	e027      	b.n	8009882 <HAL_UARTEx_DisableFifoMode+0x66>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2224      	movs	r2, #36	; 0x24
 800983e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 0201 	bic.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009860:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e02d      	b.n	8009902 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2224      	movs	r2, #36	; 0x24
 80098b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f850 	bl	8009988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d101      	bne.n	8009922 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800991e:	2302      	movs	r3, #2
 8009920:	e02d      	b.n	800997e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2224      	movs	r2, #36	; 0x24
 800992e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0201 	bic.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f812 	bl	8009988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2220      	movs	r2, #32
 8009970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b089      	sub	sp, #36	; 0x24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009990:	4a2f      	ldr	r2, [pc, #188]	; (8009a50 <UARTEx_SetNbDataToProcess+0xc8>)
 8009992:	f107 0314 	add.w	r3, r7, #20
 8009996:	e892 0003 	ldmia.w	r2, {r0, r1}
 800999a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800999e:	4a2d      	ldr	r2, [pc, #180]	; (8009a54 <UARTEx_SetNbDataToProcess+0xcc>)
 80099a0:	f107 030c 	add.w	r3, r7, #12
 80099a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099a8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d108      	bne.n	80099c6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099c4:	e03d      	b.n	8009a42 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099c6:	2308      	movs	r3, #8
 80099c8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099ca:	2308      	movs	r3, #8
 80099cc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	0e5b      	lsrs	r3, r3, #25
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	0f5b      	lsrs	r3, r3, #29
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099ee:	7fbb      	ldrb	r3, [r7, #30]
 80099f0:	7f3a      	ldrb	r2, [r7, #28]
 80099f2:	f107 0120 	add.w	r1, r7, #32
 80099f6:	440a      	add	r2, r1
 80099f8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80099fc:	fb02 f303 	mul.w	r3, r2, r3
 8009a00:	7f3a      	ldrb	r2, [r7, #28]
 8009a02:	f107 0120 	add.w	r1, r7, #32
 8009a06:	440a      	add	r2, r1
 8009a08:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009a18:	7ffb      	ldrb	r3, [r7, #31]
 8009a1a:	7f7a      	ldrb	r2, [r7, #29]
 8009a1c:	f107 0120 	add.w	r1, r7, #32
 8009a20:	440a      	add	r2, r1
 8009a22:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009a26:	fb02 f303 	mul.w	r3, r2, r3
 8009a2a:	7f7a      	ldrb	r2, [r7, #29]
 8009a2c:	f107 0120 	add.w	r1, r7, #32
 8009a30:	440a      	add	r2, r1
 8009a32:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009a36:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a42:	bf00      	nop
 8009a44:	3724      	adds	r7, #36	; 0x24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	0800b528 	.word	0x0800b528
 8009a54:	0800b530 	.word	0x0800b530

08009a58 <__errno>:
 8009a58:	4b01      	ldr	r3, [pc, #4]	; (8009a60 <__errno+0x8>)
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	20000040 	.word	0x20000040

08009a64 <__libc_init_array>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0d      	ldr	r6, [pc, #52]	; (8009a9c <__libc_init_array+0x38>)
 8009a68:	4c0d      	ldr	r4, [pc, #52]	; (8009aa0 <__libc_init_array+0x3c>)
 8009a6a:	1ba4      	subs	r4, r4, r6
 8009a6c:	10a4      	asrs	r4, r4, #2
 8009a6e:	2500      	movs	r5, #0
 8009a70:	42a5      	cmp	r5, r4
 8009a72:	d109      	bne.n	8009a88 <__libc_init_array+0x24>
 8009a74:	4e0b      	ldr	r6, [pc, #44]	; (8009aa4 <__libc_init_array+0x40>)
 8009a76:	4c0c      	ldr	r4, [pc, #48]	; (8009aa8 <__libc_init_array+0x44>)
 8009a78:	f001 fd38 	bl	800b4ec <_init>
 8009a7c:	1ba4      	subs	r4, r4, r6
 8009a7e:	10a4      	asrs	r4, r4, #2
 8009a80:	2500      	movs	r5, #0
 8009a82:	42a5      	cmp	r5, r4
 8009a84:	d105      	bne.n	8009a92 <__libc_init_array+0x2e>
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a8c:	4798      	blx	r3
 8009a8e:	3501      	adds	r5, #1
 8009a90:	e7ee      	b.n	8009a70 <__libc_init_array+0xc>
 8009a92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a96:	4798      	blx	r3
 8009a98:	3501      	adds	r5, #1
 8009a9a:	e7f2      	b.n	8009a82 <__libc_init_array+0x1e>
 8009a9c:	0800b650 	.word	0x0800b650
 8009aa0:	0800b650 	.word	0x0800b650
 8009aa4:	0800b650 	.word	0x0800b650
 8009aa8:	0800b654 	.word	0x0800b654

08009aac <memset>:
 8009aac:	4402      	add	r2, r0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d100      	bne.n	8009ab6 <memset+0xa>
 8009ab4:	4770      	bx	lr
 8009ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aba:	e7f9      	b.n	8009ab0 <memset+0x4>

08009abc <_puts_r>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	460e      	mov	r6, r1
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	b118      	cbz	r0, 8009acc <_puts_r+0x10>
 8009ac4:	6983      	ldr	r3, [r0, #24]
 8009ac6:	b90b      	cbnz	r3, 8009acc <_puts_r+0x10>
 8009ac8:	f000 fa0c 	bl	8009ee4 <__sinit>
 8009acc:	69ab      	ldr	r3, [r5, #24]
 8009ace:	68ac      	ldr	r4, [r5, #8]
 8009ad0:	b913      	cbnz	r3, 8009ad8 <_puts_r+0x1c>
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f000 fa06 	bl	8009ee4 <__sinit>
 8009ad8:	4b23      	ldr	r3, [pc, #140]	; (8009b68 <_puts_r+0xac>)
 8009ada:	429c      	cmp	r4, r3
 8009adc:	d117      	bne.n	8009b0e <_puts_r+0x52>
 8009ade:	686c      	ldr	r4, [r5, #4]
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	071b      	lsls	r3, r3, #28
 8009ae4:	d51d      	bpl.n	8009b22 <_puts_r+0x66>
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	b1db      	cbz	r3, 8009b22 <_puts_r+0x66>
 8009aea:	3e01      	subs	r6, #1
 8009aec:	68a3      	ldr	r3, [r4, #8]
 8009aee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009af2:	3b01      	subs	r3, #1
 8009af4:	60a3      	str	r3, [r4, #8]
 8009af6:	b9e9      	cbnz	r1, 8009b34 <_puts_r+0x78>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	da2e      	bge.n	8009b5a <_puts_r+0x9e>
 8009afc:	4622      	mov	r2, r4
 8009afe:	210a      	movs	r1, #10
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 f83f 	bl	8009b84 <__swbuf_r>
 8009b06:	3001      	adds	r0, #1
 8009b08:	d011      	beq.n	8009b2e <_puts_r+0x72>
 8009b0a:	200a      	movs	r0, #10
 8009b0c:	e011      	b.n	8009b32 <_puts_r+0x76>
 8009b0e:	4b17      	ldr	r3, [pc, #92]	; (8009b6c <_puts_r+0xb0>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	d101      	bne.n	8009b18 <_puts_r+0x5c>
 8009b14:	68ac      	ldr	r4, [r5, #8]
 8009b16:	e7e3      	b.n	8009ae0 <_puts_r+0x24>
 8009b18:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <_puts_r+0xb4>)
 8009b1a:	429c      	cmp	r4, r3
 8009b1c:	bf08      	it	eq
 8009b1e:	68ec      	ldreq	r4, [r5, #12]
 8009b20:	e7de      	b.n	8009ae0 <_puts_r+0x24>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 f87f 	bl	8009c28 <__swsetup_r>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d0dd      	beq.n	8009aea <_puts_r+0x2e>
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da04      	bge.n	8009b42 <_puts_r+0x86>
 8009b38:	69a2      	ldr	r2, [r4, #24]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	dc06      	bgt.n	8009b4c <_puts_r+0x90>
 8009b3e:	290a      	cmp	r1, #10
 8009b40:	d004      	beq.n	8009b4c <_puts_r+0x90>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	6022      	str	r2, [r4, #0]
 8009b48:	7019      	strb	r1, [r3, #0]
 8009b4a:	e7cf      	b.n	8009aec <_puts_r+0x30>
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f000 f818 	bl	8009b84 <__swbuf_r>
 8009b54:	3001      	adds	r0, #1
 8009b56:	d1c9      	bne.n	8009aec <_puts_r+0x30>
 8009b58:	e7e9      	b.n	8009b2e <_puts_r+0x72>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	200a      	movs	r0, #10
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	6022      	str	r2, [r4, #0]
 8009b62:	7018      	strb	r0, [r3, #0]
 8009b64:	e7e5      	b.n	8009b32 <_puts_r+0x76>
 8009b66:	bf00      	nop
 8009b68:	0800b5bc 	.word	0x0800b5bc
 8009b6c:	0800b5dc 	.word	0x0800b5dc
 8009b70:	0800b59c 	.word	0x0800b59c

08009b74 <puts>:
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <puts+0xc>)
 8009b76:	4601      	mov	r1, r0
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f7ff bf9f 	b.w	8009abc <_puts_r>
 8009b7e:	bf00      	nop
 8009b80:	20000040 	.word	0x20000040

08009b84 <__swbuf_r>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	460e      	mov	r6, r1
 8009b88:	4614      	mov	r4, r2
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	b118      	cbz	r0, 8009b96 <__swbuf_r+0x12>
 8009b8e:	6983      	ldr	r3, [r0, #24]
 8009b90:	b90b      	cbnz	r3, 8009b96 <__swbuf_r+0x12>
 8009b92:	f000 f9a7 	bl	8009ee4 <__sinit>
 8009b96:	4b21      	ldr	r3, [pc, #132]	; (8009c1c <__swbuf_r+0x98>)
 8009b98:	429c      	cmp	r4, r3
 8009b9a:	d12a      	bne.n	8009bf2 <__swbuf_r+0x6e>
 8009b9c:	686c      	ldr	r4, [r5, #4]
 8009b9e:	69a3      	ldr	r3, [r4, #24]
 8009ba0:	60a3      	str	r3, [r4, #8]
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	071a      	lsls	r2, r3, #28
 8009ba6:	d52e      	bpl.n	8009c06 <__swbuf_r+0x82>
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	b363      	cbz	r3, 8009c06 <__swbuf_r+0x82>
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	1ac0      	subs	r0, r0, r3
 8009bb2:	6963      	ldr	r3, [r4, #20]
 8009bb4:	b2f6      	uxtb	r6, r6
 8009bb6:	4283      	cmp	r3, r0
 8009bb8:	4637      	mov	r7, r6
 8009bba:	dc04      	bgt.n	8009bc6 <__swbuf_r+0x42>
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f000 f926 	bl	8009e10 <_fflush_r>
 8009bc4:	bb28      	cbnz	r0, 8009c12 <__swbuf_r+0x8e>
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	6022      	str	r2, [r4, #0]
 8009bd2:	701e      	strb	r6, [r3, #0]
 8009bd4:	6963      	ldr	r3, [r4, #20]
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	4283      	cmp	r3, r0
 8009bda:	d004      	beq.n	8009be6 <__swbuf_r+0x62>
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	07db      	lsls	r3, r3, #31
 8009be0:	d519      	bpl.n	8009c16 <__swbuf_r+0x92>
 8009be2:	2e0a      	cmp	r6, #10
 8009be4:	d117      	bne.n	8009c16 <__swbuf_r+0x92>
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 f911 	bl	8009e10 <_fflush_r>
 8009bee:	b190      	cbz	r0, 8009c16 <__swbuf_r+0x92>
 8009bf0:	e00f      	b.n	8009c12 <__swbuf_r+0x8e>
 8009bf2:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <__swbuf_r+0x9c>)
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	d101      	bne.n	8009bfc <__swbuf_r+0x78>
 8009bf8:	68ac      	ldr	r4, [r5, #8]
 8009bfa:	e7d0      	b.n	8009b9e <__swbuf_r+0x1a>
 8009bfc:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <__swbuf_r+0xa0>)
 8009bfe:	429c      	cmp	r4, r3
 8009c00:	bf08      	it	eq
 8009c02:	68ec      	ldreq	r4, [r5, #12]
 8009c04:	e7cb      	b.n	8009b9e <__swbuf_r+0x1a>
 8009c06:	4621      	mov	r1, r4
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 f80d 	bl	8009c28 <__swsetup_r>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d0cc      	beq.n	8009bac <__swbuf_r+0x28>
 8009c12:	f04f 37ff 	mov.w	r7, #4294967295
 8009c16:	4638      	mov	r0, r7
 8009c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	0800b5bc 	.word	0x0800b5bc
 8009c20:	0800b5dc 	.word	0x0800b5dc
 8009c24:	0800b59c 	.word	0x0800b59c

08009c28 <__swsetup_r>:
 8009c28:	4b32      	ldr	r3, [pc, #200]	; (8009cf4 <__swsetup_r+0xcc>)
 8009c2a:	b570      	push	{r4, r5, r6, lr}
 8009c2c:	681d      	ldr	r5, [r3, #0]
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460c      	mov	r4, r1
 8009c32:	b125      	cbz	r5, 8009c3e <__swsetup_r+0x16>
 8009c34:	69ab      	ldr	r3, [r5, #24]
 8009c36:	b913      	cbnz	r3, 8009c3e <__swsetup_r+0x16>
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f000 f953 	bl	8009ee4 <__sinit>
 8009c3e:	4b2e      	ldr	r3, [pc, #184]	; (8009cf8 <__swsetup_r+0xd0>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	d10f      	bne.n	8009c64 <__swsetup_r+0x3c>
 8009c44:	686c      	ldr	r4, [r5, #4]
 8009c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	0715      	lsls	r5, r2, #28
 8009c4e:	d42c      	bmi.n	8009caa <__swsetup_r+0x82>
 8009c50:	06d0      	lsls	r0, r2, #27
 8009c52:	d411      	bmi.n	8009c78 <__swsetup_r+0x50>
 8009c54:	2209      	movs	r2, #9
 8009c56:	6032      	str	r2, [r6, #0]
 8009c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5c:	81a3      	strh	r3, [r4, #12]
 8009c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c62:	e03e      	b.n	8009ce2 <__swsetup_r+0xba>
 8009c64:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <__swsetup_r+0xd4>)
 8009c66:	429c      	cmp	r4, r3
 8009c68:	d101      	bne.n	8009c6e <__swsetup_r+0x46>
 8009c6a:	68ac      	ldr	r4, [r5, #8]
 8009c6c:	e7eb      	b.n	8009c46 <__swsetup_r+0x1e>
 8009c6e:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <__swsetup_r+0xd8>)
 8009c70:	429c      	cmp	r4, r3
 8009c72:	bf08      	it	eq
 8009c74:	68ec      	ldreq	r4, [r5, #12]
 8009c76:	e7e6      	b.n	8009c46 <__swsetup_r+0x1e>
 8009c78:	0751      	lsls	r1, r2, #29
 8009c7a:	d512      	bpl.n	8009ca2 <__swsetup_r+0x7a>
 8009c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c7e:	b141      	cbz	r1, 8009c92 <__swsetup_r+0x6a>
 8009c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c84:	4299      	cmp	r1, r3
 8009c86:	d002      	beq.n	8009c8e <__swsetup_r+0x66>
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f000 fa19 	bl	800a0c0 <_free_r>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6363      	str	r3, [r4, #52]	; 0x34
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	6063      	str	r3, [r4, #4]
 8009c9e:	6923      	ldr	r3, [r4, #16]
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	f043 0308 	orr.w	r3, r3, #8
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	b94b      	cbnz	r3, 8009cc2 <__swsetup_r+0x9a>
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb8:	d003      	beq.n	8009cc2 <__swsetup_r+0x9a>
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f000 f9bf 	bl	800a040 <__smakebuf_r>
 8009cc2:	89a2      	ldrh	r2, [r4, #12]
 8009cc4:	f012 0301 	ands.w	r3, r2, #1
 8009cc8:	d00c      	beq.n	8009ce4 <__swsetup_r+0xbc>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60a3      	str	r3, [r4, #8]
 8009cce:	6963      	ldr	r3, [r4, #20]
 8009cd0:	425b      	negs	r3, r3
 8009cd2:	61a3      	str	r3, [r4, #24]
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	b953      	cbnz	r3, 8009cee <__swsetup_r+0xc6>
 8009cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cdc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009ce0:	d1ba      	bne.n	8009c58 <__swsetup_r+0x30>
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	0792      	lsls	r2, r2, #30
 8009ce6:	bf58      	it	pl
 8009ce8:	6963      	ldrpl	r3, [r4, #20]
 8009cea:	60a3      	str	r3, [r4, #8]
 8009cec:	e7f2      	b.n	8009cd4 <__swsetup_r+0xac>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e7f7      	b.n	8009ce2 <__swsetup_r+0xba>
 8009cf2:	bf00      	nop
 8009cf4:	20000040 	.word	0x20000040
 8009cf8:	0800b5bc 	.word	0x0800b5bc
 8009cfc:	0800b5dc 	.word	0x0800b5dc
 8009d00:	0800b59c 	.word	0x0800b59c

08009d04 <__sflush_r>:
 8009d04:	898a      	ldrh	r2, [r1, #12]
 8009d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	0710      	lsls	r0, r2, #28
 8009d0e:	460c      	mov	r4, r1
 8009d10:	d458      	bmi.n	8009dc4 <__sflush_r+0xc0>
 8009d12:	684b      	ldr	r3, [r1, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dc05      	bgt.n	8009d24 <__sflush_r+0x20>
 8009d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	dc02      	bgt.n	8009d24 <__sflush_r+0x20>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	d0f9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d30:	682f      	ldr	r7, [r5, #0]
 8009d32:	6a21      	ldr	r1, [r4, #32]
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	d032      	beq.n	8009d9e <__sflush_r+0x9a>
 8009d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	075a      	lsls	r2, r3, #29
 8009d3e:	d505      	bpl.n	8009d4c <__sflush_r+0x48>
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	1ac0      	subs	r0, r0, r3
 8009d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d46:	b10b      	cbz	r3, 8009d4c <__sflush_r+0x48>
 8009d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d4a:	1ac0      	subs	r0, r0, r3
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4602      	mov	r2, r0
 8009d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d52:	6a21      	ldr	r1, [r4, #32]
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b0      	blx	r6
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	d106      	bne.n	8009d6c <__sflush_r+0x68>
 8009d5e:	6829      	ldr	r1, [r5, #0]
 8009d60:	291d      	cmp	r1, #29
 8009d62:	d848      	bhi.n	8009df6 <__sflush_r+0xf2>
 8009d64:	4a29      	ldr	r2, [pc, #164]	; (8009e0c <__sflush_r+0x108>)
 8009d66:	40ca      	lsrs	r2, r1
 8009d68:	07d6      	lsls	r6, r2, #31
 8009d6a:	d544      	bpl.n	8009df6 <__sflush_r+0xf2>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	6062      	str	r2, [r4, #4]
 8009d70:	04d9      	lsls	r1, r3, #19
 8009d72:	6922      	ldr	r2, [r4, #16]
 8009d74:	6022      	str	r2, [r4, #0]
 8009d76:	d504      	bpl.n	8009d82 <__sflush_r+0x7e>
 8009d78:	1c42      	adds	r2, r0, #1
 8009d7a:	d101      	bne.n	8009d80 <__sflush_r+0x7c>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b903      	cbnz	r3, 8009d82 <__sflush_r+0x7e>
 8009d80:	6560      	str	r0, [r4, #84]	; 0x54
 8009d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d84:	602f      	str	r7, [r5, #0]
 8009d86:	2900      	cmp	r1, #0
 8009d88:	d0c9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d8e:	4299      	cmp	r1, r3
 8009d90:	d002      	beq.n	8009d98 <__sflush_r+0x94>
 8009d92:	4628      	mov	r0, r5
 8009d94:	f000 f994 	bl	800a0c0 <_free_r>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8009d9c:	e7c0      	b.n	8009d20 <__sflush_r+0x1c>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b0      	blx	r6
 8009da4:	1c41      	adds	r1, r0, #1
 8009da6:	d1c8      	bne.n	8009d3a <__sflush_r+0x36>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0c5      	beq.n	8009d3a <__sflush_r+0x36>
 8009dae:	2b1d      	cmp	r3, #29
 8009db0:	d001      	beq.n	8009db6 <__sflush_r+0xb2>
 8009db2:	2b16      	cmp	r3, #22
 8009db4:	d101      	bne.n	8009dba <__sflush_r+0xb6>
 8009db6:	602f      	str	r7, [r5, #0]
 8009db8:	e7b1      	b.n	8009d1e <__sflush_r+0x1a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	e7ad      	b.n	8009d20 <__sflush_r+0x1c>
 8009dc4:	690f      	ldr	r7, [r1, #16]
 8009dc6:	2f00      	cmp	r7, #0
 8009dc8:	d0a9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009dca:	0793      	lsls	r3, r2, #30
 8009dcc:	680e      	ldr	r6, [r1, #0]
 8009dce:	bf08      	it	eq
 8009dd0:	694b      	ldreq	r3, [r1, #20]
 8009dd2:	600f      	str	r7, [r1, #0]
 8009dd4:	bf18      	it	ne
 8009dd6:	2300      	movne	r3, #0
 8009dd8:	eba6 0807 	sub.w	r8, r6, r7
 8009ddc:	608b      	str	r3, [r1, #8]
 8009dde:	f1b8 0f00 	cmp.w	r8, #0
 8009de2:	dd9c      	ble.n	8009d1e <__sflush_r+0x1a>
 8009de4:	4643      	mov	r3, r8
 8009de6:	463a      	mov	r2, r7
 8009de8:	6a21      	ldr	r1, [r4, #32]
 8009dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b0      	blx	r6
 8009df0:	2800      	cmp	r0, #0
 8009df2:	dc06      	bgt.n	8009e02 <__sflush_r+0xfe>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	e78e      	b.n	8009d20 <__sflush_r+0x1c>
 8009e02:	4407      	add	r7, r0
 8009e04:	eba8 0800 	sub.w	r8, r8, r0
 8009e08:	e7e9      	b.n	8009dde <__sflush_r+0xda>
 8009e0a:	bf00      	nop
 8009e0c:	20400001 	.word	0x20400001

08009e10 <_fflush_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	690b      	ldr	r3, [r1, #16]
 8009e14:	4605      	mov	r5, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	b1db      	cbz	r3, 8009e52 <_fflush_r+0x42>
 8009e1a:	b118      	cbz	r0, 8009e24 <_fflush_r+0x14>
 8009e1c:	6983      	ldr	r3, [r0, #24]
 8009e1e:	b90b      	cbnz	r3, 8009e24 <_fflush_r+0x14>
 8009e20:	f000 f860 	bl	8009ee4 <__sinit>
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <_fflush_r+0x48>)
 8009e26:	429c      	cmp	r4, r3
 8009e28:	d109      	bne.n	8009e3e <_fflush_r+0x2e>
 8009e2a:	686c      	ldr	r4, [r5, #4]
 8009e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e30:	b17b      	cbz	r3, 8009e52 <_fflush_r+0x42>
 8009e32:	4621      	mov	r1, r4
 8009e34:	4628      	mov	r0, r5
 8009e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3a:	f7ff bf63 	b.w	8009d04 <__sflush_r>
 8009e3e:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <_fflush_r+0x4c>)
 8009e40:	429c      	cmp	r4, r3
 8009e42:	d101      	bne.n	8009e48 <_fflush_r+0x38>
 8009e44:	68ac      	ldr	r4, [r5, #8]
 8009e46:	e7f1      	b.n	8009e2c <_fflush_r+0x1c>
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <_fflush_r+0x50>)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	bf08      	it	eq
 8009e4e:	68ec      	ldreq	r4, [r5, #12]
 8009e50:	e7ec      	b.n	8009e2c <_fflush_r+0x1c>
 8009e52:	2000      	movs	r0, #0
 8009e54:	bd38      	pop	{r3, r4, r5, pc}
 8009e56:	bf00      	nop
 8009e58:	0800b5bc 	.word	0x0800b5bc
 8009e5c:	0800b5dc 	.word	0x0800b5dc
 8009e60:	0800b59c 	.word	0x0800b59c

08009e64 <std>:
 8009e64:	2300      	movs	r3, #0
 8009e66:	b510      	push	{r4, lr}
 8009e68:	4604      	mov	r4, r0
 8009e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e6e:	6083      	str	r3, [r0, #8]
 8009e70:	8181      	strh	r1, [r0, #12]
 8009e72:	6643      	str	r3, [r0, #100]	; 0x64
 8009e74:	81c2      	strh	r2, [r0, #14]
 8009e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e7a:	6183      	str	r3, [r0, #24]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	2208      	movs	r2, #8
 8009e80:	305c      	adds	r0, #92	; 0x5c
 8009e82:	f7ff fe13 	bl	8009aac <memset>
 8009e86:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <std+0x38>)
 8009e88:	6263      	str	r3, [r4, #36]	; 0x24
 8009e8a:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <std+0x3c>)
 8009e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e8e:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <std+0x40>)
 8009e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e92:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <std+0x44>)
 8009e94:	6224      	str	r4, [r4, #32]
 8009e96:	6323      	str	r3, [r4, #48]	; 0x30
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0800a231 	.word	0x0800a231
 8009ea0:	0800a253 	.word	0x0800a253
 8009ea4:	0800a28b 	.word	0x0800a28b
 8009ea8:	0800a2af 	.word	0x0800a2af

08009eac <_cleanup_r>:
 8009eac:	4901      	ldr	r1, [pc, #4]	; (8009eb4 <_cleanup_r+0x8>)
 8009eae:	f000 b885 	b.w	8009fbc <_fwalk_reent>
 8009eb2:	bf00      	nop
 8009eb4:	08009e11 	.word	0x08009e11

08009eb8 <__sfmoreglue>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	1e4a      	subs	r2, r1, #1
 8009ebc:	2568      	movs	r5, #104	; 0x68
 8009ebe:	4355      	muls	r5, r2
 8009ec0:	460e      	mov	r6, r1
 8009ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ec6:	f000 f949 	bl	800a15c <_malloc_r>
 8009eca:	4604      	mov	r4, r0
 8009ecc:	b140      	cbz	r0, 8009ee0 <__sfmoreglue+0x28>
 8009ece:	2100      	movs	r1, #0
 8009ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ed4:	300c      	adds	r0, #12
 8009ed6:	60a0      	str	r0, [r4, #8]
 8009ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009edc:	f7ff fde6 	bl	8009aac <memset>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}

08009ee4 <__sinit>:
 8009ee4:	6983      	ldr	r3, [r0, #24]
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	4604      	mov	r4, r0
 8009eea:	bb33      	cbnz	r3, 8009f3a <__sinit+0x56>
 8009eec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009ef0:	6503      	str	r3, [r0, #80]	; 0x50
 8009ef2:	4b12      	ldr	r3, [pc, #72]	; (8009f3c <__sinit+0x58>)
 8009ef4:	4a12      	ldr	r2, [pc, #72]	; (8009f40 <__sinit+0x5c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6282      	str	r2, [r0, #40]	; 0x28
 8009efa:	4298      	cmp	r0, r3
 8009efc:	bf04      	itt	eq
 8009efe:	2301      	moveq	r3, #1
 8009f00:	6183      	streq	r3, [r0, #24]
 8009f02:	f000 f81f 	bl	8009f44 <__sfp>
 8009f06:	6060      	str	r0, [r4, #4]
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 f81b 	bl	8009f44 <__sfp>
 8009f0e:	60a0      	str	r0, [r4, #8]
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 f817 	bl	8009f44 <__sfp>
 8009f16:	2200      	movs	r2, #0
 8009f18:	60e0      	str	r0, [r4, #12]
 8009f1a:	2104      	movs	r1, #4
 8009f1c:	6860      	ldr	r0, [r4, #4]
 8009f1e:	f7ff ffa1 	bl	8009e64 <std>
 8009f22:	2201      	movs	r2, #1
 8009f24:	2109      	movs	r1, #9
 8009f26:	68a0      	ldr	r0, [r4, #8]
 8009f28:	f7ff ff9c 	bl	8009e64 <std>
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	2112      	movs	r1, #18
 8009f30:	68e0      	ldr	r0, [r4, #12]
 8009f32:	f7ff ff97 	bl	8009e64 <std>
 8009f36:	2301      	movs	r3, #1
 8009f38:	61a3      	str	r3, [r4, #24]
 8009f3a:	bd10      	pop	{r4, pc}
 8009f3c:	0800b598 	.word	0x0800b598
 8009f40:	08009ead 	.word	0x08009ead

08009f44 <__sfp>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	4b1b      	ldr	r3, [pc, #108]	; (8009fb4 <__sfp+0x70>)
 8009f48:	681e      	ldr	r6, [r3, #0]
 8009f4a:	69b3      	ldr	r3, [r6, #24]
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	b913      	cbnz	r3, 8009f56 <__sfp+0x12>
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7ff ffc7 	bl	8009ee4 <__sinit>
 8009f56:	3648      	adds	r6, #72	; 0x48
 8009f58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	d503      	bpl.n	8009f68 <__sfp+0x24>
 8009f60:	6833      	ldr	r3, [r6, #0]
 8009f62:	b133      	cbz	r3, 8009f72 <__sfp+0x2e>
 8009f64:	6836      	ldr	r6, [r6, #0]
 8009f66:	e7f7      	b.n	8009f58 <__sfp+0x14>
 8009f68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f6c:	b16d      	cbz	r5, 8009f8a <__sfp+0x46>
 8009f6e:	3468      	adds	r4, #104	; 0x68
 8009f70:	e7f4      	b.n	8009f5c <__sfp+0x18>
 8009f72:	2104      	movs	r1, #4
 8009f74:	4638      	mov	r0, r7
 8009f76:	f7ff ff9f 	bl	8009eb8 <__sfmoreglue>
 8009f7a:	6030      	str	r0, [r6, #0]
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d1f1      	bne.n	8009f64 <__sfp+0x20>
 8009f80:	230c      	movs	r3, #12
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	4604      	mov	r4, r0
 8009f86:	4620      	mov	r0, r4
 8009f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8a:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <__sfp+0x74>)
 8009f8c:	6665      	str	r5, [r4, #100]	; 0x64
 8009f8e:	e9c4 5500 	strd	r5, r5, [r4]
 8009f92:	60a5      	str	r5, [r4, #8]
 8009f94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009f98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fa4:	f7ff fd82 	bl	8009aac <memset>
 8009fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fb0:	e7e9      	b.n	8009f86 <__sfp+0x42>
 8009fb2:	bf00      	nop
 8009fb4:	0800b598 	.word	0x0800b598
 8009fb8:	ffff0001 	.word	0xffff0001

08009fbc <_fwalk_reent>:
 8009fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	4689      	mov	r9, r1
 8009fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fc8:	2600      	movs	r6, #0
 8009fca:	b914      	cbnz	r4, 8009fd2 <_fwalk_reent+0x16>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009fd6:	3f01      	subs	r7, #1
 8009fd8:	d501      	bpl.n	8009fde <_fwalk_reent+0x22>
 8009fda:	6824      	ldr	r4, [r4, #0]
 8009fdc:	e7f5      	b.n	8009fca <_fwalk_reent+0xe>
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d907      	bls.n	8009ff4 <_fwalk_reent+0x38>
 8009fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	d003      	beq.n	8009ff4 <_fwalk_reent+0x38>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4640      	mov	r0, r8
 8009ff0:	47c8      	blx	r9
 8009ff2:	4306      	orrs	r6, r0
 8009ff4:	3568      	adds	r5, #104	; 0x68
 8009ff6:	e7ee      	b.n	8009fd6 <_fwalk_reent+0x1a>

08009ff8 <__swhatbuf_r>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	460e      	mov	r6, r1
 8009ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a000:	2900      	cmp	r1, #0
 800a002:	b096      	sub	sp, #88	; 0x58
 800a004:	4614      	mov	r4, r2
 800a006:	461d      	mov	r5, r3
 800a008:	da07      	bge.n	800a01a <__swhatbuf_r+0x22>
 800a00a:	2300      	movs	r3, #0
 800a00c:	602b      	str	r3, [r5, #0]
 800a00e:	89b3      	ldrh	r3, [r6, #12]
 800a010:	061a      	lsls	r2, r3, #24
 800a012:	d410      	bmi.n	800a036 <__swhatbuf_r+0x3e>
 800a014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a018:	e00e      	b.n	800a038 <__swhatbuf_r+0x40>
 800a01a:	466a      	mov	r2, sp
 800a01c:	f000 f96e 	bl	800a2fc <_fstat_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	dbf2      	blt.n	800a00a <__swhatbuf_r+0x12>
 800a024:	9a01      	ldr	r2, [sp, #4]
 800a026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a02a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a02e:	425a      	negs	r2, r3
 800a030:	415a      	adcs	r2, r3
 800a032:	602a      	str	r2, [r5, #0]
 800a034:	e7ee      	b.n	800a014 <__swhatbuf_r+0x1c>
 800a036:	2340      	movs	r3, #64	; 0x40
 800a038:	2000      	movs	r0, #0
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	b016      	add	sp, #88	; 0x58
 800a03e:	bd70      	pop	{r4, r5, r6, pc}

0800a040 <__smakebuf_r>:
 800a040:	898b      	ldrh	r3, [r1, #12]
 800a042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a044:	079d      	lsls	r5, r3, #30
 800a046:	4606      	mov	r6, r0
 800a048:	460c      	mov	r4, r1
 800a04a:	d507      	bpl.n	800a05c <__smakebuf_r+0x1c>
 800a04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2301      	movs	r3, #1
 800a056:	6163      	str	r3, [r4, #20]
 800a058:	b002      	add	sp, #8
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	ab01      	add	r3, sp, #4
 800a05e:	466a      	mov	r2, sp
 800a060:	f7ff ffca 	bl	8009ff8 <__swhatbuf_r>
 800a064:	9900      	ldr	r1, [sp, #0]
 800a066:	4605      	mov	r5, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f000 f877 	bl	800a15c <_malloc_r>
 800a06e:	b948      	cbnz	r0, 800a084 <__smakebuf_r+0x44>
 800a070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a074:	059a      	lsls	r2, r3, #22
 800a076:	d4ef      	bmi.n	800a058 <__smakebuf_r+0x18>
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	e7e3      	b.n	800a04c <__smakebuf_r+0xc>
 800a084:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <__smakebuf_r+0x7c>)
 800a086:	62b3      	str	r3, [r6, #40]	; 0x28
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	6020      	str	r0, [r4, #0]
 800a08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	6163      	str	r3, [r4, #20]
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	6120      	str	r0, [r4, #16]
 800a09a:	b15b      	cbz	r3, 800a0b4 <__smakebuf_r+0x74>
 800a09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f93d 	bl	800a320 <_isatty_r>
 800a0a6:	b128      	cbz	r0, 800a0b4 <__smakebuf_r+0x74>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	431d      	orrs	r5, r3
 800a0b8:	81a5      	strh	r5, [r4, #12]
 800a0ba:	e7cd      	b.n	800a058 <__smakebuf_r+0x18>
 800a0bc:	08009ead 	.word	0x08009ead

0800a0c0 <_free_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	2900      	cmp	r1, #0
 800a0c6:	d045      	beq.n	800a154 <_free_r+0x94>
 800a0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0cc:	1f0c      	subs	r4, r1, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bfb8      	it	lt
 800a0d2:	18e4      	addlt	r4, r4, r3
 800a0d4:	f000 f946 	bl	800a364 <__malloc_lock>
 800a0d8:	4a1f      	ldr	r2, [pc, #124]	; (800a158 <_free_r+0x98>)
 800a0da:	6813      	ldr	r3, [r2, #0]
 800a0dc:	4610      	mov	r0, r2
 800a0de:	b933      	cbnz	r3, 800a0ee <_free_r+0x2e>
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	6014      	str	r4, [r2, #0]
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ea:	f000 b93c 	b.w	800a366 <__malloc_unlock>
 800a0ee:	42a3      	cmp	r3, r4
 800a0f0:	d90c      	bls.n	800a10c <_free_r+0x4c>
 800a0f2:	6821      	ldr	r1, [r4, #0]
 800a0f4:	1862      	adds	r2, r4, r1
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	bf04      	itt	eq
 800a0fa:	681a      	ldreq	r2, [r3, #0]
 800a0fc:	685b      	ldreq	r3, [r3, #4]
 800a0fe:	6063      	str	r3, [r4, #4]
 800a100:	bf04      	itt	eq
 800a102:	1852      	addeq	r2, r2, r1
 800a104:	6022      	streq	r2, [r4, #0]
 800a106:	6004      	str	r4, [r0, #0]
 800a108:	e7ec      	b.n	800a0e4 <_free_r+0x24>
 800a10a:	4613      	mov	r3, r2
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	b10a      	cbz	r2, 800a114 <_free_r+0x54>
 800a110:	42a2      	cmp	r2, r4
 800a112:	d9fa      	bls.n	800a10a <_free_r+0x4a>
 800a114:	6819      	ldr	r1, [r3, #0]
 800a116:	1858      	adds	r0, r3, r1
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d10b      	bne.n	800a134 <_free_r+0x74>
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	4401      	add	r1, r0
 800a120:	1858      	adds	r0, r3, r1
 800a122:	4282      	cmp	r2, r0
 800a124:	6019      	str	r1, [r3, #0]
 800a126:	d1dd      	bne.n	800a0e4 <_free_r+0x24>
 800a128:	6810      	ldr	r0, [r2, #0]
 800a12a:	6852      	ldr	r2, [r2, #4]
 800a12c:	605a      	str	r2, [r3, #4]
 800a12e:	4401      	add	r1, r0
 800a130:	6019      	str	r1, [r3, #0]
 800a132:	e7d7      	b.n	800a0e4 <_free_r+0x24>
 800a134:	d902      	bls.n	800a13c <_free_r+0x7c>
 800a136:	230c      	movs	r3, #12
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	e7d3      	b.n	800a0e4 <_free_r+0x24>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	1821      	adds	r1, r4, r0
 800a140:	428a      	cmp	r2, r1
 800a142:	bf04      	itt	eq
 800a144:	6811      	ldreq	r1, [r2, #0]
 800a146:	6852      	ldreq	r2, [r2, #4]
 800a148:	6062      	str	r2, [r4, #4]
 800a14a:	bf04      	itt	eq
 800a14c:	1809      	addeq	r1, r1, r0
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	605c      	str	r4, [r3, #4]
 800a152:	e7c7      	b.n	800a0e4 <_free_r+0x24>
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	200000f4 	.word	0x200000f4

0800a15c <_malloc_r>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	1ccd      	adds	r5, r1, #3
 800a160:	f025 0503 	bic.w	r5, r5, #3
 800a164:	3508      	adds	r5, #8
 800a166:	2d0c      	cmp	r5, #12
 800a168:	bf38      	it	cc
 800a16a:	250c      	movcc	r5, #12
 800a16c:	2d00      	cmp	r5, #0
 800a16e:	4606      	mov	r6, r0
 800a170:	db01      	blt.n	800a176 <_malloc_r+0x1a>
 800a172:	42a9      	cmp	r1, r5
 800a174:	d903      	bls.n	800a17e <_malloc_r+0x22>
 800a176:	230c      	movs	r3, #12
 800a178:	6033      	str	r3, [r6, #0]
 800a17a:	2000      	movs	r0, #0
 800a17c:	bd70      	pop	{r4, r5, r6, pc}
 800a17e:	f000 f8f1 	bl	800a364 <__malloc_lock>
 800a182:	4a21      	ldr	r2, [pc, #132]	; (800a208 <_malloc_r+0xac>)
 800a184:	6814      	ldr	r4, [r2, #0]
 800a186:	4621      	mov	r1, r4
 800a188:	b991      	cbnz	r1, 800a1b0 <_malloc_r+0x54>
 800a18a:	4c20      	ldr	r4, [pc, #128]	; (800a20c <_malloc_r+0xb0>)
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	b91b      	cbnz	r3, 800a198 <_malloc_r+0x3c>
 800a190:	4630      	mov	r0, r6
 800a192:	f000 f83d 	bl	800a210 <_sbrk_r>
 800a196:	6020      	str	r0, [r4, #0]
 800a198:	4629      	mov	r1, r5
 800a19a:	4630      	mov	r0, r6
 800a19c:	f000 f838 	bl	800a210 <_sbrk_r>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d124      	bne.n	800a1ee <_malloc_r+0x92>
 800a1a4:	230c      	movs	r3, #12
 800a1a6:	6033      	str	r3, [r6, #0]
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f000 f8dc 	bl	800a366 <__malloc_unlock>
 800a1ae:	e7e4      	b.n	800a17a <_malloc_r+0x1e>
 800a1b0:	680b      	ldr	r3, [r1, #0]
 800a1b2:	1b5b      	subs	r3, r3, r5
 800a1b4:	d418      	bmi.n	800a1e8 <_malloc_r+0x8c>
 800a1b6:	2b0b      	cmp	r3, #11
 800a1b8:	d90f      	bls.n	800a1da <_malloc_r+0x7e>
 800a1ba:	600b      	str	r3, [r1, #0]
 800a1bc:	50cd      	str	r5, [r1, r3]
 800a1be:	18cc      	adds	r4, r1, r3
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f000 f8d0 	bl	800a366 <__malloc_unlock>
 800a1c6:	f104 000b 	add.w	r0, r4, #11
 800a1ca:	1d23      	adds	r3, r4, #4
 800a1cc:	f020 0007 	bic.w	r0, r0, #7
 800a1d0:	1ac3      	subs	r3, r0, r3
 800a1d2:	d0d3      	beq.n	800a17c <_malloc_r+0x20>
 800a1d4:	425a      	negs	r2, r3
 800a1d6:	50e2      	str	r2, [r4, r3]
 800a1d8:	e7d0      	b.n	800a17c <_malloc_r+0x20>
 800a1da:	428c      	cmp	r4, r1
 800a1dc:	684b      	ldr	r3, [r1, #4]
 800a1de:	bf16      	itet	ne
 800a1e0:	6063      	strne	r3, [r4, #4]
 800a1e2:	6013      	streq	r3, [r2, #0]
 800a1e4:	460c      	movne	r4, r1
 800a1e6:	e7eb      	b.n	800a1c0 <_malloc_r+0x64>
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	6849      	ldr	r1, [r1, #4]
 800a1ec:	e7cc      	b.n	800a188 <_malloc_r+0x2c>
 800a1ee:	1cc4      	adds	r4, r0, #3
 800a1f0:	f024 0403 	bic.w	r4, r4, #3
 800a1f4:	42a0      	cmp	r0, r4
 800a1f6:	d005      	beq.n	800a204 <_malloc_r+0xa8>
 800a1f8:	1a21      	subs	r1, r4, r0
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f000 f808 	bl	800a210 <_sbrk_r>
 800a200:	3001      	adds	r0, #1
 800a202:	d0cf      	beq.n	800a1a4 <_malloc_r+0x48>
 800a204:	6025      	str	r5, [r4, #0]
 800a206:	e7db      	b.n	800a1c0 <_malloc_r+0x64>
 800a208:	200000f4 	.word	0x200000f4
 800a20c:	200000f8 	.word	0x200000f8

0800a210 <_sbrk_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4c06      	ldr	r4, [pc, #24]	; (800a22c <_sbrk_r+0x1c>)
 800a214:	2300      	movs	r3, #0
 800a216:	4605      	mov	r5, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	f7f8 fe4a 	bl	8002eb4 <_sbrk>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_sbrk_r+0x1a>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	b103      	cbz	r3, 800a22a <_sbrk_r+0x1a>
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	20000704 	.word	0x20000704

0800a230 <__sread>:
 800a230:	b510      	push	{r4, lr}
 800a232:	460c      	mov	r4, r1
 800a234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a238:	f000 f896 	bl	800a368 <_read_r>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	bfab      	itete	ge
 800a240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a242:	89a3      	ldrhlt	r3, [r4, #12]
 800a244:	181b      	addge	r3, r3, r0
 800a246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a24a:	bfac      	ite	ge
 800a24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a24e:	81a3      	strhlt	r3, [r4, #12]
 800a250:	bd10      	pop	{r4, pc}

0800a252 <__swrite>:
 800a252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a256:	461f      	mov	r7, r3
 800a258:	898b      	ldrh	r3, [r1, #12]
 800a25a:	05db      	lsls	r3, r3, #23
 800a25c:	4605      	mov	r5, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	4616      	mov	r6, r2
 800a262:	d505      	bpl.n	800a270 <__swrite+0x1e>
 800a264:	2302      	movs	r3, #2
 800a266:	2200      	movs	r2, #0
 800a268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26c:	f000 f868 	bl	800a340 <_lseek_r>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	4632      	mov	r2, r6
 800a27e:	463b      	mov	r3, r7
 800a280:	4628      	mov	r0, r5
 800a282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	f000 b817 	b.w	800a2b8 <_write_r>

0800a28a <__sseek>:
 800a28a:	b510      	push	{r4, lr}
 800a28c:	460c      	mov	r4, r1
 800a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a292:	f000 f855 	bl	800a340 <_lseek_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	bf15      	itete	ne
 800a29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2a6:	81a3      	strheq	r3, [r4, #12]
 800a2a8:	bf18      	it	ne
 800a2aa:	81a3      	strhne	r3, [r4, #12]
 800a2ac:	bd10      	pop	{r4, pc}

0800a2ae <__sclose>:
 800a2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b2:	f000 b813 	b.w	800a2dc <_close_r>
	...

0800a2b8 <_write_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4c07      	ldr	r4, [pc, #28]	; (800a2d8 <_write_r+0x20>)
 800a2bc:	4605      	mov	r5, r0
 800a2be:	4608      	mov	r0, r1
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	6022      	str	r2, [r4, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f7f8 fda4 	bl	8002e14 <_write>
 800a2cc:	1c43      	adds	r3, r0, #1
 800a2ce:	d102      	bne.n	800a2d6 <_write_r+0x1e>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	b103      	cbz	r3, 800a2d6 <_write_r+0x1e>
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	20000704 	.word	0x20000704

0800a2dc <_close_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4c06      	ldr	r4, [pc, #24]	; (800a2f8 <_close_r+0x1c>)
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4605      	mov	r5, r0
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	6023      	str	r3, [r4, #0]
 800a2e8:	f7f8 fdb0 	bl	8002e4c <_close>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_close_r+0x1a>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_close_r+0x1a>
 800a2f4:	602b      	str	r3, [r5, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	20000704 	.word	0x20000704

0800a2fc <_fstat_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4c07      	ldr	r4, [pc, #28]	; (800a31c <_fstat_r+0x20>)
 800a300:	2300      	movs	r3, #0
 800a302:	4605      	mov	r5, r0
 800a304:	4608      	mov	r0, r1
 800a306:	4611      	mov	r1, r2
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	f7f8 fdab 	bl	8002e64 <_fstat>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d102      	bne.n	800a318 <_fstat_r+0x1c>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	b103      	cbz	r3, 800a318 <_fstat_r+0x1c>
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	bd38      	pop	{r3, r4, r5, pc}
 800a31a:	bf00      	nop
 800a31c:	20000704 	.word	0x20000704

0800a320 <_isatty_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4c06      	ldr	r4, [pc, #24]	; (800a33c <_isatty_r+0x1c>)
 800a324:	2300      	movs	r3, #0
 800a326:	4605      	mov	r5, r0
 800a328:	4608      	mov	r0, r1
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	f7f8 fdaa 	bl	8002e84 <_isatty>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d102      	bne.n	800a33a <_isatty_r+0x1a>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	b103      	cbz	r3, 800a33a <_isatty_r+0x1a>
 800a338:	602b      	str	r3, [r5, #0]
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	20000704 	.word	0x20000704

0800a340 <_lseek_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4c07      	ldr	r4, [pc, #28]	; (800a360 <_lseek_r+0x20>)
 800a344:	4605      	mov	r5, r0
 800a346:	4608      	mov	r0, r1
 800a348:	4611      	mov	r1, r2
 800a34a:	2200      	movs	r2, #0
 800a34c:	6022      	str	r2, [r4, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f7f8 fda3 	bl	8002e9a <_lseek>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_lseek_r+0x1e>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_lseek_r+0x1e>
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	20000704 	.word	0x20000704

0800a364 <__malloc_lock>:
 800a364:	4770      	bx	lr

0800a366 <__malloc_unlock>:
 800a366:	4770      	bx	lr

0800a368 <_read_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4c07      	ldr	r4, [pc, #28]	; (800a388 <_read_r+0x20>)
 800a36c:	4605      	mov	r5, r0
 800a36e:	4608      	mov	r0, r1
 800a370:	4611      	mov	r1, r2
 800a372:	2200      	movs	r2, #0
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	f7f8 fd2f 	bl	8002dda <_read>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d102      	bne.n	800a386 <_read_r+0x1e>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	b103      	cbz	r3, 800a386 <_read_r+0x1e>
 800a384:	602b      	str	r3, [r5, #0]
 800a386:	bd38      	pop	{r3, r4, r5, pc}
 800a388:	20000704 	.word	0x20000704

0800a38c <pow>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	ed2d 8b04 	vpush	{d8-d9}
 800a394:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a668 <pow+0x2dc>
 800a398:	b08d      	sub	sp, #52	; 0x34
 800a39a:	ec57 6b10 	vmov	r6, r7, d0
 800a39e:	ec55 4b11 	vmov	r4, r5, d1
 800a3a2:	f000 f9bd 	bl	800a720 <__ieee754_pow>
 800a3a6:	f999 3000 	ldrsb.w	r3, [r9]
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	eeb0 8a40 	vmov.f32	s16, s0
 800a3b2:	eef0 8a60 	vmov.f32	s17, s1
 800a3b6:	46c8      	mov	r8, r9
 800a3b8:	d05f      	beq.n	800a47a <pow+0xee>
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	462b      	mov	r3, r5
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f6 fb73 	bl	8000aac <__aeabi_dcmpun>
 800a3c6:	4683      	mov	fp, r0
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d156      	bne.n	800a47a <pow+0xee>
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	f7f6 fb6a 	bl	8000aac <__aeabi_dcmpun>
 800a3d8:	9001      	str	r0, [sp, #4]
 800a3da:	b1e8      	cbz	r0, 800a418 <pow+0x8c>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7f6 fb30 	bl	8000a48 <__aeabi_dcmpeq>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d046      	beq.n	800a47a <pow+0xee>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	9302      	str	r3, [sp, #8]
 800a3f0:	4b96      	ldr	r3, [pc, #600]	; (800a64c <pow+0x2c0>)
 800a3f2:	9303      	str	r3, [sp, #12]
 800a3f4:	4b96      	ldr	r3, [pc, #600]	; (800a650 <pow+0x2c4>)
 800a3f6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a400:	9b00      	ldr	r3, [sp, #0]
 800a402:	2b02      	cmp	r3, #2
 800a404:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a408:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a40c:	d033      	beq.n	800a476 <pow+0xea>
 800a40e:	a802      	add	r0, sp, #8
 800a410:	f000 ff55 	bl	800b2be <matherr>
 800a414:	bb48      	cbnz	r0, 800a46a <pow+0xde>
 800a416:	e05d      	b.n	800a4d4 <pow+0x148>
 800a418:	f04f 0a00 	mov.w	sl, #0
 800a41c:	f04f 0b00 	mov.w	fp, #0
 800a420:	4652      	mov	r2, sl
 800a422:	465b      	mov	r3, fp
 800a424:	4630      	mov	r0, r6
 800a426:	4639      	mov	r1, r7
 800a428:	f7f6 fb0e 	bl	8000a48 <__aeabi_dcmpeq>
 800a42c:	ec4b ab19 	vmov	d9, sl, fp
 800a430:	2800      	cmp	r0, #0
 800a432:	d054      	beq.n	800a4de <pow+0x152>
 800a434:	4652      	mov	r2, sl
 800a436:	465b      	mov	r3, fp
 800a438:	4620      	mov	r0, r4
 800a43a:	4629      	mov	r1, r5
 800a43c:	f7f6 fb04 	bl	8000a48 <__aeabi_dcmpeq>
 800a440:	4680      	mov	r8, r0
 800a442:	b318      	cbz	r0, 800a48c <pow+0x100>
 800a444:	2301      	movs	r3, #1
 800a446:	9302      	str	r3, [sp, #8]
 800a448:	4b80      	ldr	r3, [pc, #512]	; (800a64c <pow+0x2c0>)
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	930a      	str	r3, [sp, #40]	; 0x28
 800a450:	9b00      	ldr	r3, [sp, #0]
 800a452:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a456:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a45a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0d5      	beq.n	800a40e <pow+0x82>
 800a462:	4b7b      	ldr	r3, [pc, #492]	; (800a650 <pow+0x2c4>)
 800a464:	2200      	movs	r2, #0
 800a466:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46c:	b11b      	cbz	r3, 800a476 <pow+0xea>
 800a46e:	f7ff faf3 	bl	8009a58 <__errno>
 800a472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a474:	6003      	str	r3, [r0, #0]
 800a476:	ed9d 8b08 	vldr	d8, [sp, #32]
 800a47a:	eeb0 0a48 	vmov.f32	s0, s16
 800a47e:	eef0 0a68 	vmov.f32	s1, s17
 800a482:	b00d      	add	sp, #52	; 0x34
 800a484:	ecbd 8b04 	vpop	{d8-d9}
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	ec45 4b10 	vmov	d0, r4, r5
 800a490:	f000 ff0d 	bl	800b2ae <finite>
 800a494:	2800      	cmp	r0, #0
 800a496:	d0f0      	beq.n	800a47a <pow+0xee>
 800a498:	4652      	mov	r2, sl
 800a49a:	465b      	mov	r3, fp
 800a49c:	4620      	mov	r0, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f7f6 fadc 	bl	8000a5c <__aeabi_dcmplt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d0e8      	beq.n	800a47a <pow+0xee>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	9302      	str	r3, [sp, #8]
 800a4ac:	4b67      	ldr	r3, [pc, #412]	; (800a64c <pow+0x2c0>)
 800a4ae:	9303      	str	r3, [sp, #12]
 800a4b0:	f999 3000 	ldrsb.w	r3, [r9]
 800a4b4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a4b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a4bc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a4c0:	b913      	cbnz	r3, 800a4c8 <pow+0x13c>
 800a4c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a4c6:	e7a2      	b.n	800a40e <pow+0x82>
 800a4c8:	4962      	ldr	r1, [pc, #392]	; (800a654 <pow+0x2c8>)
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d19c      	bne.n	800a40e <pow+0x82>
 800a4d4:	f7ff fac0 	bl	8009a58 <__errno>
 800a4d8:	2321      	movs	r3, #33	; 0x21
 800a4da:	6003      	str	r3, [r0, #0]
 800a4dc:	e7c5      	b.n	800a46a <pow+0xde>
 800a4de:	eeb0 0a48 	vmov.f32	s0, s16
 800a4e2:	eef0 0a68 	vmov.f32	s1, s17
 800a4e6:	f000 fee2 	bl	800b2ae <finite>
 800a4ea:	9000      	str	r0, [sp, #0]
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f040 8081 	bne.w	800a5f4 <pow+0x268>
 800a4f2:	ec47 6b10 	vmov	d0, r6, r7
 800a4f6:	f000 feda 	bl	800b2ae <finite>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d07a      	beq.n	800a5f4 <pow+0x268>
 800a4fe:	ec45 4b10 	vmov	d0, r4, r5
 800a502:	f000 fed4 	bl	800b2ae <finite>
 800a506:	2800      	cmp	r0, #0
 800a508:	d074      	beq.n	800a5f4 <pow+0x268>
 800a50a:	ec53 2b18 	vmov	r2, r3, d8
 800a50e:	ee18 0a10 	vmov	r0, s16
 800a512:	4619      	mov	r1, r3
 800a514:	f7f6 faca 	bl	8000aac <__aeabi_dcmpun>
 800a518:	f999 9000 	ldrsb.w	r9, [r9]
 800a51c:	4b4b      	ldr	r3, [pc, #300]	; (800a64c <pow+0x2c0>)
 800a51e:	b1b0      	cbz	r0, 800a54e <pow+0x1c2>
 800a520:	2201      	movs	r2, #1
 800a522:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a526:	9b00      	ldr	r3, [sp, #0]
 800a528:	930a      	str	r3, [sp, #40]	; 0x28
 800a52a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a52e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a532:	f1b9 0f00 	cmp.w	r9, #0
 800a536:	d0c4      	beq.n	800a4c2 <pow+0x136>
 800a538:	4652      	mov	r2, sl
 800a53a:	465b      	mov	r3, fp
 800a53c:	4650      	mov	r0, sl
 800a53e:	4659      	mov	r1, fp
 800a540:	f7f6 f944 	bl	80007cc <__aeabi_ddiv>
 800a544:	f1b9 0f02 	cmp.w	r9, #2
 800a548:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a54c:	e7c1      	b.n	800a4d2 <pow+0x146>
 800a54e:	2203      	movs	r2, #3
 800a550:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a554:	900a      	str	r0, [sp, #40]	; 0x28
 800a556:	4629      	mov	r1, r5
 800a558:	4620      	mov	r0, r4
 800a55a:	2200      	movs	r2, #0
 800a55c:	4b3e      	ldr	r3, [pc, #248]	; (800a658 <pow+0x2cc>)
 800a55e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a562:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a566:	f7f6 f807 	bl	8000578 <__aeabi_dmul>
 800a56a:	4604      	mov	r4, r0
 800a56c:	460d      	mov	r5, r1
 800a56e:	f1b9 0f00 	cmp.w	r9, #0
 800a572:	d124      	bne.n	800a5be <pow+0x232>
 800a574:	4b39      	ldr	r3, [pc, #228]	; (800a65c <pow+0x2d0>)
 800a576:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a57a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a57e:	4630      	mov	r0, r6
 800a580:	4652      	mov	r2, sl
 800a582:	465b      	mov	r3, fp
 800a584:	4639      	mov	r1, r7
 800a586:	f7f6 fa69 	bl	8000a5c <__aeabi_dcmplt>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d056      	beq.n	800a63c <pow+0x2b0>
 800a58e:	ec45 4b10 	vmov	d0, r4, r5
 800a592:	f000 fea1 	bl	800b2d8 <rint>
 800a596:	4622      	mov	r2, r4
 800a598:	462b      	mov	r3, r5
 800a59a:	ec51 0b10 	vmov	r0, r1, d0
 800a59e:	f7f6 fa53 	bl	8000a48 <__aeabi_dcmpeq>
 800a5a2:	b920      	cbnz	r0, 800a5ae <pow+0x222>
 800a5a4:	4b2e      	ldr	r3, [pc, #184]	; (800a660 <pow+0x2d4>)
 800a5a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a5aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5ae:	f998 3000 	ldrsb.w	r3, [r8]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d142      	bne.n	800a63c <pow+0x2b0>
 800a5b6:	f7ff fa4f 	bl	8009a58 <__errno>
 800a5ba:	2322      	movs	r3, #34	; 0x22
 800a5bc:	e78d      	b.n	800a4da <pow+0x14e>
 800a5be:	4b29      	ldr	r3, [pc, #164]	; (800a664 <pow+0x2d8>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	4652      	mov	r2, sl
 800a5ca:	465b      	mov	r3, fp
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f6 fa45 	bl	8000a5c <__aeabi_dcmplt>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d0eb      	beq.n	800a5ae <pow+0x222>
 800a5d6:	ec45 4b10 	vmov	d0, r4, r5
 800a5da:	f000 fe7d 	bl	800b2d8 <rint>
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	ec51 0b10 	vmov	r0, r1, d0
 800a5e6:	f7f6 fa2f 	bl	8000a48 <__aeabi_dcmpeq>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d1df      	bne.n	800a5ae <pow+0x222>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	4b18      	ldr	r3, [pc, #96]	; (800a654 <pow+0x2c8>)
 800a5f2:	e7da      	b.n	800a5aa <pow+0x21e>
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	ec51 0b18 	vmov	r0, r1, d8
 800a5fc:	f7f6 fa24 	bl	8000a48 <__aeabi_dcmpeq>
 800a600:	2800      	cmp	r0, #0
 800a602:	f43f af3a 	beq.w	800a47a <pow+0xee>
 800a606:	ec47 6b10 	vmov	d0, r6, r7
 800a60a:	f000 fe50 	bl	800b2ae <finite>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f43f af33 	beq.w	800a47a <pow+0xee>
 800a614:	ec45 4b10 	vmov	d0, r4, r5
 800a618:	f000 fe49 	bl	800b2ae <finite>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f43f af2c 	beq.w	800a47a <pow+0xee>
 800a622:	2304      	movs	r3, #4
 800a624:	9302      	str	r3, [sp, #8]
 800a626:	4b09      	ldr	r3, [pc, #36]	; (800a64c <pow+0x2c0>)
 800a628:	9303      	str	r3, [sp, #12]
 800a62a:	2300      	movs	r3, #0
 800a62c:	930a      	str	r3, [sp, #40]	; 0x28
 800a62e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a632:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a636:	ed8d 9b08 	vstr	d9, [sp, #32]
 800a63a:	e7b8      	b.n	800a5ae <pow+0x222>
 800a63c:	a802      	add	r0, sp, #8
 800a63e:	f000 fe3e 	bl	800b2be <matherr>
 800a642:	2800      	cmp	r0, #0
 800a644:	f47f af11 	bne.w	800a46a <pow+0xde>
 800a648:	e7b5      	b.n	800a5b6 <pow+0x22a>
 800a64a:	bf00      	nop
 800a64c:	0800b5fc 	.word	0x0800b5fc
 800a650:	3ff00000 	.word	0x3ff00000
 800a654:	fff00000 	.word	0xfff00000
 800a658:	3fe00000 	.word	0x3fe00000
 800a65c:	47efffff 	.word	0x47efffff
 800a660:	c7efffff 	.word	0xc7efffff
 800a664:	7ff00000 	.word	0x7ff00000
 800a668:	200000a4 	.word	0x200000a4

0800a66c <sqrt>:
 800a66c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a670:	ed2d 8b02 	vpush	{d8}
 800a674:	b08b      	sub	sp, #44	; 0x2c
 800a676:	ec55 4b10 	vmov	r4, r5, d0
 800a67a:	f000 fd5f 	bl	800b13c <__ieee754_sqrt>
 800a67e:	4b26      	ldr	r3, [pc, #152]	; (800a718 <sqrt+0xac>)
 800a680:	eeb0 8a40 	vmov.f32	s16, s0
 800a684:	eef0 8a60 	vmov.f32	s17, s1
 800a688:	f993 6000 	ldrsb.w	r6, [r3]
 800a68c:	1c73      	adds	r3, r6, #1
 800a68e:	d02a      	beq.n	800a6e6 <sqrt+0x7a>
 800a690:	4622      	mov	r2, r4
 800a692:	462b      	mov	r3, r5
 800a694:	4620      	mov	r0, r4
 800a696:	4629      	mov	r1, r5
 800a698:	f7f6 fa08 	bl	8000aac <__aeabi_dcmpun>
 800a69c:	4607      	mov	r7, r0
 800a69e:	bb10      	cbnz	r0, 800a6e6 <sqrt+0x7a>
 800a6a0:	f04f 0800 	mov.w	r8, #0
 800a6a4:	f04f 0900 	mov.w	r9, #0
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f6 f9d4 	bl	8000a5c <__aeabi_dcmplt>
 800a6b4:	b1b8      	cbz	r0, 800a6e6 <sqrt+0x7a>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	4b18      	ldr	r3, [pc, #96]	; (800a71c <sqrt+0xb0>)
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	9708      	str	r7, [sp, #32]
 800a6c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a6c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a6c8:	b9b6      	cbnz	r6, 800a6f8 <sqrt+0x8c>
 800a6ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a6ce:	4668      	mov	r0, sp
 800a6d0:	f000 fdf5 	bl	800b2be <matherr>
 800a6d4:	b1d0      	cbz	r0, 800a70c <sqrt+0xa0>
 800a6d6:	9b08      	ldr	r3, [sp, #32]
 800a6d8:	b11b      	cbz	r3, 800a6e2 <sqrt+0x76>
 800a6da:	f7ff f9bd 	bl	8009a58 <__errno>
 800a6de:	9b08      	ldr	r3, [sp, #32]
 800a6e0:	6003      	str	r3, [r0, #0]
 800a6e2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800a6ea:	eef0 0a68 	vmov.f32	s1, s17
 800a6ee:	b00b      	add	sp, #44	; 0x2c
 800a6f0:	ecbd 8b02 	vpop	{d8}
 800a6f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f8:	4642      	mov	r2, r8
 800a6fa:	464b      	mov	r3, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	4649      	mov	r1, r9
 800a700:	f7f6 f864 	bl	80007cc <__aeabi_ddiv>
 800a704:	2e02      	cmp	r6, #2
 800a706:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a70a:	d1e0      	bne.n	800a6ce <sqrt+0x62>
 800a70c:	f7ff f9a4 	bl	8009a58 <__errno>
 800a710:	2321      	movs	r3, #33	; 0x21
 800a712:	6003      	str	r3, [r0, #0]
 800a714:	e7df      	b.n	800a6d6 <sqrt+0x6a>
 800a716:	bf00      	nop
 800a718:	200000a4 	.word	0x200000a4
 800a71c:	0800b600 	.word	0x0800b600

0800a720 <__ieee754_pow>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	b091      	sub	sp, #68	; 0x44
 800a726:	ed8d 1b00 	vstr	d1, [sp]
 800a72a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a72e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a732:	ea58 0302 	orrs.w	r3, r8, r2
 800a736:	ec57 6b10 	vmov	r6, r7, d0
 800a73a:	f000 84be 	beq.w	800b0ba <__ieee754_pow+0x99a>
 800a73e:	4b7a      	ldr	r3, [pc, #488]	; (800a928 <__ieee754_pow+0x208>)
 800a740:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a744:	429c      	cmp	r4, r3
 800a746:	463d      	mov	r5, r7
 800a748:	ee10 aa10 	vmov	sl, s0
 800a74c:	dc09      	bgt.n	800a762 <__ieee754_pow+0x42>
 800a74e:	d103      	bne.n	800a758 <__ieee754_pow+0x38>
 800a750:	b93e      	cbnz	r6, 800a762 <__ieee754_pow+0x42>
 800a752:	45a0      	cmp	r8, r4
 800a754:	dc0d      	bgt.n	800a772 <__ieee754_pow+0x52>
 800a756:	e001      	b.n	800a75c <__ieee754_pow+0x3c>
 800a758:	4598      	cmp	r8, r3
 800a75a:	dc02      	bgt.n	800a762 <__ieee754_pow+0x42>
 800a75c:	4598      	cmp	r8, r3
 800a75e:	d10e      	bne.n	800a77e <__ieee754_pow+0x5e>
 800a760:	b16a      	cbz	r2, 800a77e <__ieee754_pow+0x5e>
 800a762:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a766:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a76a:	ea54 030a 	orrs.w	r3, r4, sl
 800a76e:	f000 84a4 	beq.w	800b0ba <__ieee754_pow+0x99a>
 800a772:	486e      	ldr	r0, [pc, #440]	; (800a92c <__ieee754_pow+0x20c>)
 800a774:	b011      	add	sp, #68	; 0x44
 800a776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	f000 bda5 	b.w	800b2c8 <nan>
 800a77e:	2d00      	cmp	r5, #0
 800a780:	da53      	bge.n	800a82a <__ieee754_pow+0x10a>
 800a782:	4b6b      	ldr	r3, [pc, #428]	; (800a930 <__ieee754_pow+0x210>)
 800a784:	4598      	cmp	r8, r3
 800a786:	dc4d      	bgt.n	800a824 <__ieee754_pow+0x104>
 800a788:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a78c:	4598      	cmp	r8, r3
 800a78e:	dd4c      	ble.n	800a82a <__ieee754_pow+0x10a>
 800a790:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a794:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a798:	2b14      	cmp	r3, #20
 800a79a:	dd26      	ble.n	800a7ea <__ieee754_pow+0xca>
 800a79c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a7a0:	fa22 f103 	lsr.w	r1, r2, r3
 800a7a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d13e      	bne.n	800a82a <__ieee754_pow+0x10a>
 800a7ac:	f001 0101 	and.w	r1, r1, #1
 800a7b0:	f1c1 0b02 	rsb	fp, r1, #2
 800a7b4:	2a00      	cmp	r2, #0
 800a7b6:	d15b      	bne.n	800a870 <__ieee754_pow+0x150>
 800a7b8:	4b5b      	ldr	r3, [pc, #364]	; (800a928 <__ieee754_pow+0x208>)
 800a7ba:	4598      	cmp	r8, r3
 800a7bc:	d124      	bne.n	800a808 <__ieee754_pow+0xe8>
 800a7be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a7c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a7c6:	ea53 030a 	orrs.w	r3, r3, sl
 800a7ca:	f000 8476 	beq.w	800b0ba <__ieee754_pow+0x99a>
 800a7ce:	4b59      	ldr	r3, [pc, #356]	; (800a934 <__ieee754_pow+0x214>)
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	dd2d      	ble.n	800a830 <__ieee754_pow+0x110>
 800a7d4:	f1b9 0f00 	cmp.w	r9, #0
 800a7d8:	f280 8473 	bge.w	800b0c2 <__ieee754_pow+0x9a2>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	ec41 0b10 	vmov	d0, r0, r1
 800a7e4:	b011      	add	sp, #68	; 0x44
 800a7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ea:	2a00      	cmp	r2, #0
 800a7ec:	d13e      	bne.n	800a86c <__ieee754_pow+0x14c>
 800a7ee:	f1c3 0314 	rsb	r3, r3, #20
 800a7f2:	fa48 f103 	asr.w	r1, r8, r3
 800a7f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fa:	4543      	cmp	r3, r8
 800a7fc:	f040 8469 	bne.w	800b0d2 <__ieee754_pow+0x9b2>
 800a800:	f001 0101 	and.w	r1, r1, #1
 800a804:	f1c1 0b02 	rsb	fp, r1, #2
 800a808:	4b4b      	ldr	r3, [pc, #300]	; (800a938 <__ieee754_pow+0x218>)
 800a80a:	4598      	cmp	r8, r3
 800a80c:	d118      	bne.n	800a840 <__ieee754_pow+0x120>
 800a80e:	f1b9 0f00 	cmp.w	r9, #0
 800a812:	f280 845a 	bge.w	800b0ca <__ieee754_pow+0x9aa>
 800a816:	4948      	ldr	r1, [pc, #288]	; (800a938 <__ieee754_pow+0x218>)
 800a818:	4632      	mov	r2, r6
 800a81a:	463b      	mov	r3, r7
 800a81c:	2000      	movs	r0, #0
 800a81e:	f7f5 ffd5 	bl	80007cc <__aeabi_ddiv>
 800a822:	e7dd      	b.n	800a7e0 <__ieee754_pow+0xc0>
 800a824:	f04f 0b02 	mov.w	fp, #2
 800a828:	e7c4      	b.n	800a7b4 <__ieee754_pow+0x94>
 800a82a:	f04f 0b00 	mov.w	fp, #0
 800a82e:	e7c1      	b.n	800a7b4 <__ieee754_pow+0x94>
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	dad2      	bge.n	800a7dc <__ieee754_pow+0xbc>
 800a836:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a83a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a83e:	e7cf      	b.n	800a7e0 <__ieee754_pow+0xc0>
 800a840:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a844:	d106      	bne.n	800a854 <__ieee754_pow+0x134>
 800a846:	4632      	mov	r2, r6
 800a848:	463b      	mov	r3, r7
 800a84a:	4610      	mov	r0, r2
 800a84c:	4619      	mov	r1, r3
 800a84e:	f7f5 fe93 	bl	8000578 <__aeabi_dmul>
 800a852:	e7c5      	b.n	800a7e0 <__ieee754_pow+0xc0>
 800a854:	4b39      	ldr	r3, [pc, #228]	; (800a93c <__ieee754_pow+0x21c>)
 800a856:	4599      	cmp	r9, r3
 800a858:	d10a      	bne.n	800a870 <__ieee754_pow+0x150>
 800a85a:	2d00      	cmp	r5, #0
 800a85c:	db08      	blt.n	800a870 <__ieee754_pow+0x150>
 800a85e:	ec47 6b10 	vmov	d0, r6, r7
 800a862:	b011      	add	sp, #68	; 0x44
 800a864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a868:	f000 bc68 	b.w	800b13c <__ieee754_sqrt>
 800a86c:	f04f 0b00 	mov.w	fp, #0
 800a870:	ec47 6b10 	vmov	d0, r6, r7
 800a874:	f000 fd12 	bl	800b29c <fabs>
 800a878:	ec51 0b10 	vmov	r0, r1, d0
 800a87c:	f1ba 0f00 	cmp.w	sl, #0
 800a880:	d127      	bne.n	800a8d2 <__ieee754_pow+0x1b2>
 800a882:	b124      	cbz	r4, 800a88e <__ieee754_pow+0x16e>
 800a884:	4b2c      	ldr	r3, [pc, #176]	; (800a938 <__ieee754_pow+0x218>)
 800a886:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d121      	bne.n	800a8d2 <__ieee754_pow+0x1b2>
 800a88e:	f1b9 0f00 	cmp.w	r9, #0
 800a892:	da05      	bge.n	800a8a0 <__ieee754_pow+0x180>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	2000      	movs	r0, #0
 800a89a:	4927      	ldr	r1, [pc, #156]	; (800a938 <__ieee754_pow+0x218>)
 800a89c:	f7f5 ff96 	bl	80007cc <__aeabi_ddiv>
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	da9d      	bge.n	800a7e0 <__ieee754_pow+0xc0>
 800a8a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a8a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a8ac:	ea54 030b 	orrs.w	r3, r4, fp
 800a8b0:	d108      	bne.n	800a8c4 <__ieee754_pow+0x1a4>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7f5 fca5 	bl	8000208 <__aeabi_dsub>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	e7ac      	b.n	800a81e <__ieee754_pow+0xfe>
 800a8c4:	f1bb 0f01 	cmp.w	fp, #1
 800a8c8:	d18a      	bne.n	800a7e0 <__ieee754_pow+0xc0>
 800a8ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	e786      	b.n	800a7e0 <__ieee754_pow+0xc0>
 800a8d2:	0fed      	lsrs	r5, r5, #31
 800a8d4:	1e6b      	subs	r3, r5, #1
 800a8d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8d8:	ea5b 0303 	orrs.w	r3, fp, r3
 800a8dc:	d102      	bne.n	800a8e4 <__ieee754_pow+0x1c4>
 800a8de:	4632      	mov	r2, r6
 800a8e0:	463b      	mov	r3, r7
 800a8e2:	e7e8      	b.n	800a8b6 <__ieee754_pow+0x196>
 800a8e4:	4b16      	ldr	r3, [pc, #88]	; (800a940 <__ieee754_pow+0x220>)
 800a8e6:	4598      	cmp	r8, r3
 800a8e8:	f340 80fe 	ble.w	800aae8 <__ieee754_pow+0x3c8>
 800a8ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a8f0:	4598      	cmp	r8, r3
 800a8f2:	dd0a      	ble.n	800a90a <__ieee754_pow+0x1ea>
 800a8f4:	4b0f      	ldr	r3, [pc, #60]	; (800a934 <__ieee754_pow+0x214>)
 800a8f6:	429c      	cmp	r4, r3
 800a8f8:	dc0d      	bgt.n	800a916 <__ieee754_pow+0x1f6>
 800a8fa:	f1b9 0f00 	cmp.w	r9, #0
 800a8fe:	f6bf af6d 	bge.w	800a7dc <__ieee754_pow+0xbc>
 800a902:	a307      	add	r3, pc, #28	; (adr r3, 800a920 <__ieee754_pow+0x200>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	e79f      	b.n	800a84a <__ieee754_pow+0x12a>
 800a90a:	4b0e      	ldr	r3, [pc, #56]	; (800a944 <__ieee754_pow+0x224>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	ddf4      	ble.n	800a8fa <__ieee754_pow+0x1da>
 800a910:	4b09      	ldr	r3, [pc, #36]	; (800a938 <__ieee754_pow+0x218>)
 800a912:	429c      	cmp	r4, r3
 800a914:	dd18      	ble.n	800a948 <__ieee754_pow+0x228>
 800a916:	f1b9 0f00 	cmp.w	r9, #0
 800a91a:	dcf2      	bgt.n	800a902 <__ieee754_pow+0x1e2>
 800a91c:	e75e      	b.n	800a7dc <__ieee754_pow+0xbc>
 800a91e:	bf00      	nop
 800a920:	8800759c 	.word	0x8800759c
 800a924:	7e37e43c 	.word	0x7e37e43c
 800a928:	7ff00000 	.word	0x7ff00000
 800a92c:	0800b604 	.word	0x0800b604
 800a930:	433fffff 	.word	0x433fffff
 800a934:	3fefffff 	.word	0x3fefffff
 800a938:	3ff00000 	.word	0x3ff00000
 800a93c:	3fe00000 	.word	0x3fe00000
 800a940:	41e00000 	.word	0x41e00000
 800a944:	3feffffe 	.word	0x3feffffe
 800a948:	2200      	movs	r2, #0
 800a94a:	4b63      	ldr	r3, [pc, #396]	; (800aad8 <__ieee754_pow+0x3b8>)
 800a94c:	f7f5 fc5c 	bl	8000208 <__aeabi_dsub>
 800a950:	a355      	add	r3, pc, #340	; (adr r3, 800aaa8 <__ieee754_pow+0x388>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	4604      	mov	r4, r0
 800a958:	460d      	mov	r5, r1
 800a95a:	f7f5 fe0d 	bl	8000578 <__aeabi_dmul>
 800a95e:	a354      	add	r3, pc, #336	; (adr r3, 800aab0 <__ieee754_pow+0x390>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	4620      	mov	r0, r4
 800a96a:	4629      	mov	r1, r5
 800a96c:	f7f5 fe04 	bl	8000578 <__aeabi_dmul>
 800a970:	2200      	movs	r2, #0
 800a972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a976:	4b59      	ldr	r3, [pc, #356]	; (800aadc <__ieee754_pow+0x3bc>)
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 fdfc 	bl	8000578 <__aeabi_dmul>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	a14c      	add	r1, pc, #304	; (adr r1, 800aab8 <__ieee754_pow+0x398>)
 800a986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a98a:	f7f5 fc3d 	bl	8000208 <__aeabi_dsub>
 800a98e:	4622      	mov	r2, r4
 800a990:	462b      	mov	r3, r5
 800a992:	f7f5 fdf1 	bl	8000578 <__aeabi_dmul>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	2000      	movs	r0, #0
 800a99c:	4950      	ldr	r1, [pc, #320]	; (800aae0 <__ieee754_pow+0x3c0>)
 800a99e:	f7f5 fc33 	bl	8000208 <__aeabi_dsub>
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	4689      	mov	r9, r1
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7f5 fde3 	bl	8000578 <__aeabi_dmul>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f5 fddd 	bl	8000578 <__aeabi_dmul>
 800a9be:	a340      	add	r3, pc, #256	; (adr r3, 800aac0 <__ieee754_pow+0x3a0>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f7f5 fdd8 	bl	8000578 <__aeabi_dmul>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d0:	f7f5 fc1a 	bl	8000208 <__aeabi_dsub>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4604      	mov	r4, r0
 800a9da:	460d      	mov	r5, r1
 800a9dc:	4630      	mov	r0, r6
 800a9de:	4639      	mov	r1, r7
 800a9e0:	f7f5 fc14 	bl	800020c <__adddf3>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9ea:	4632      	mov	r2, r6
 800a9ec:	463b      	mov	r3, r7
 800a9ee:	f7f5 fc0b 	bl	8000208 <__aeabi_dsub>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	f7f5 fc05 	bl	8000208 <__aeabi_dsub>
 800a9fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa00:	f10b 33ff 	add.w	r3, fp, #4294967295
 800aa04:	4313      	orrs	r3, r2
 800aa06:	4606      	mov	r6, r0
 800aa08:	460f      	mov	r7, r1
 800aa0a:	f040 81eb 	bne.w	800ade4 <__ieee754_pow+0x6c4>
 800aa0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800aac8 <__ieee754_pow+0x3a8>
 800aa12:	e9dd 4500 	ldrd	r4, r5, [sp]
 800aa16:	2400      	movs	r4, #0
 800aa18:	4622      	mov	r2, r4
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa24:	f7f5 fbf0 	bl	8000208 <__aeabi_dsub>
 800aa28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa2c:	f7f5 fda4 	bl	8000578 <__aeabi_dmul>
 800aa30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa34:	4680      	mov	r8, r0
 800aa36:	4689      	mov	r9, r1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 fd9c 	bl	8000578 <__aeabi_dmul>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4640      	mov	r0, r8
 800aa46:	4649      	mov	r1, r9
 800aa48:	f7f5 fbe0 	bl	800020c <__adddf3>
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	462b      	mov	r3, r5
 800aa50:	4680      	mov	r8, r0
 800aa52:	4689      	mov	r9, r1
 800aa54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa58:	f7f5 fd8e 	bl	8000578 <__aeabi_dmul>
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4604      	mov	r4, r0
 800aa60:	460d      	mov	r5, r1
 800aa62:	4602      	mov	r2, r0
 800aa64:	4649      	mov	r1, r9
 800aa66:	4640      	mov	r0, r8
 800aa68:	e9cd 4500 	strd	r4, r5, [sp]
 800aa6c:	f7f5 fbce 	bl	800020c <__adddf3>
 800aa70:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <__ieee754_pow+0x3c4>)
 800aa72:	4299      	cmp	r1, r3
 800aa74:	4606      	mov	r6, r0
 800aa76:	460f      	mov	r7, r1
 800aa78:	468b      	mov	fp, r1
 800aa7a:	f340 82f7 	ble.w	800b06c <__ieee754_pow+0x94c>
 800aa7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aa82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aa86:	4303      	orrs	r3, r0
 800aa88:	f000 81ea 	beq.w	800ae60 <__ieee754_pow+0x740>
 800aa8c:	a310      	add	r3, pc, #64	; (adr r3, 800aad0 <__ieee754_pow+0x3b0>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa96:	f7f5 fd6f 	bl	8000578 <__aeabi_dmul>
 800aa9a:	a30d      	add	r3, pc, #52	; (adr r3, 800aad0 <__ieee754_pow+0x3b0>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	e6d5      	b.n	800a84e <__ieee754_pow+0x12e>
 800aaa2:	bf00      	nop
 800aaa4:	f3af 8000 	nop.w
 800aaa8:	60000000 	.word	0x60000000
 800aaac:	3ff71547 	.word	0x3ff71547
 800aab0:	f85ddf44 	.word	0xf85ddf44
 800aab4:	3e54ae0b 	.word	0x3e54ae0b
 800aab8:	55555555 	.word	0x55555555
 800aabc:	3fd55555 	.word	0x3fd55555
 800aac0:	652b82fe 	.word	0x652b82fe
 800aac4:	3ff71547 	.word	0x3ff71547
 800aac8:	00000000 	.word	0x00000000
 800aacc:	bff00000 	.word	0xbff00000
 800aad0:	8800759c 	.word	0x8800759c
 800aad4:	7e37e43c 	.word	0x7e37e43c
 800aad8:	3ff00000 	.word	0x3ff00000
 800aadc:	3fd00000 	.word	0x3fd00000
 800aae0:	3fe00000 	.word	0x3fe00000
 800aae4:	408fffff 	.word	0x408fffff
 800aae8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	da05      	bge.n	800aafe <__ieee754_pow+0x3de>
 800aaf2:	4bd3      	ldr	r3, [pc, #844]	; (800ae40 <__ieee754_pow+0x720>)
 800aaf4:	f7f5 fd40 	bl	8000578 <__aeabi_dmul>
 800aaf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aafc:	460c      	mov	r4, r1
 800aafe:	1523      	asrs	r3, r4, #20
 800ab00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab04:	4413      	add	r3, r2
 800ab06:	9309      	str	r3, [sp, #36]	; 0x24
 800ab08:	4bce      	ldr	r3, [pc, #824]	; (800ae44 <__ieee754_pow+0x724>)
 800ab0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ab0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ab12:	429c      	cmp	r4, r3
 800ab14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab18:	dd08      	ble.n	800ab2c <__ieee754_pow+0x40c>
 800ab1a:	4bcb      	ldr	r3, [pc, #812]	; (800ae48 <__ieee754_pow+0x728>)
 800ab1c:	429c      	cmp	r4, r3
 800ab1e:	f340 815e 	ble.w	800adde <__ieee754_pow+0x6be>
 800ab22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab24:	3301      	adds	r3, #1
 800ab26:	9309      	str	r3, [sp, #36]	; 0x24
 800ab28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ab2c:	f04f 0a00 	mov.w	sl, #0
 800ab30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ab34:	930c      	str	r3, [sp, #48]	; 0x30
 800ab36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab38:	4bc4      	ldr	r3, [pc, #784]	; (800ae4c <__ieee754_pow+0x72c>)
 800ab3a:	4413      	add	r3, r2
 800ab3c:	ed93 7b00 	vldr	d7, [r3]
 800ab40:	4629      	mov	r1, r5
 800ab42:	ec53 2b17 	vmov	r2, r3, d7
 800ab46:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab4e:	f7f5 fb5b 	bl	8000208 <__aeabi_dsub>
 800ab52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab56:	4606      	mov	r6, r0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab5e:	f7f5 fb55 	bl	800020c <__adddf3>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	2000      	movs	r0, #0
 800ab68:	49b9      	ldr	r1, [pc, #740]	; (800ae50 <__ieee754_pow+0x730>)
 800ab6a:	f7f5 fe2f 	bl	80007cc <__aeabi_ddiv>
 800ab6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4630      	mov	r0, r6
 800ab78:	4639      	mov	r1, r7
 800ab7a:	f7f5 fcfd 	bl	8000578 <__aeabi_dmul>
 800ab7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ab86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab92:	106d      	asrs	r5, r5, #1
 800ab94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ab98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	4614      	mov	r4, r2
 800aba8:	461d      	mov	r5, r3
 800abaa:	f7f5 fce5 	bl	8000578 <__aeabi_dmul>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4630      	mov	r0, r6
 800abb4:	4639      	mov	r1, r7
 800abb6:	f7f5 fb27 	bl	8000208 <__aeabi_dsub>
 800abba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abbe:	4606      	mov	r6, r0
 800abc0:	460f      	mov	r7, r1
 800abc2:	4620      	mov	r0, r4
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7f5 fb1f 	bl	8000208 <__aeabi_dsub>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800abd2:	f7f5 fb19 	bl	8000208 <__aeabi_dsub>
 800abd6:	4642      	mov	r2, r8
 800abd8:	464b      	mov	r3, r9
 800abda:	f7f5 fccd 	bl	8000578 <__aeabi_dmul>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4630      	mov	r0, r6
 800abe4:	4639      	mov	r1, r7
 800abe6:	f7f5 fb0f 	bl	8000208 <__aeabi_dsub>
 800abea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800abee:	f7f5 fcc3 	bl	8000578 <__aeabi_dmul>
 800abf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abfa:	4610      	mov	r0, r2
 800abfc:	4619      	mov	r1, r3
 800abfe:	f7f5 fcbb 	bl	8000578 <__aeabi_dmul>
 800ac02:	a37b      	add	r3, pc, #492	; (adr r3, 800adf0 <__ieee754_pow+0x6d0>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	4604      	mov	r4, r0
 800ac0a:	460d      	mov	r5, r1
 800ac0c:	f7f5 fcb4 	bl	8000578 <__aeabi_dmul>
 800ac10:	a379      	add	r3, pc, #484	; (adr r3, 800adf8 <__ieee754_pow+0x6d8>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f7f5 faf9 	bl	800020c <__adddf3>
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	462b      	mov	r3, r5
 800ac1e:	f7f5 fcab 	bl	8000578 <__aeabi_dmul>
 800ac22:	a377      	add	r3, pc, #476	; (adr r3, 800ae00 <__ieee754_pow+0x6e0>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 faf0 	bl	800020c <__adddf3>
 800ac2c:	4622      	mov	r2, r4
 800ac2e:	462b      	mov	r3, r5
 800ac30:	f7f5 fca2 	bl	8000578 <__aeabi_dmul>
 800ac34:	a374      	add	r3, pc, #464	; (adr r3, 800ae08 <__ieee754_pow+0x6e8>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 fae7 	bl	800020c <__adddf3>
 800ac3e:	4622      	mov	r2, r4
 800ac40:	462b      	mov	r3, r5
 800ac42:	f7f5 fc99 	bl	8000578 <__aeabi_dmul>
 800ac46:	a372      	add	r3, pc, #456	; (adr r3, 800ae10 <__ieee754_pow+0x6f0>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f7f5 fade 	bl	800020c <__adddf3>
 800ac50:	4622      	mov	r2, r4
 800ac52:	462b      	mov	r3, r5
 800ac54:	f7f5 fc90 	bl	8000578 <__aeabi_dmul>
 800ac58:	a36f      	add	r3, pc, #444	; (adr r3, 800ae18 <__ieee754_pow+0x6f8>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fad5 	bl	800020c <__adddf3>
 800ac62:	4622      	mov	r2, r4
 800ac64:	4606      	mov	r6, r0
 800ac66:	460f      	mov	r7, r1
 800ac68:	462b      	mov	r3, r5
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	f7f5 fc83 	bl	8000578 <__aeabi_dmul>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	4630      	mov	r0, r6
 800ac78:	4639      	mov	r1, r7
 800ac7a:	f7f5 fc7d 	bl	8000578 <__aeabi_dmul>
 800ac7e:	4642      	mov	r2, r8
 800ac80:	4604      	mov	r4, r0
 800ac82:	460d      	mov	r5, r1
 800ac84:	464b      	mov	r3, r9
 800ac86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac8a:	f7f5 fabf 	bl	800020c <__adddf3>
 800ac8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac92:	f7f5 fc71 	bl	8000578 <__aeabi_dmul>
 800ac96:	4622      	mov	r2, r4
 800ac98:	462b      	mov	r3, r5
 800ac9a:	f7f5 fab7 	bl	800020c <__adddf3>
 800ac9e:	4642      	mov	r2, r8
 800aca0:	4606      	mov	r6, r0
 800aca2:	460f      	mov	r7, r1
 800aca4:	464b      	mov	r3, r9
 800aca6:	4640      	mov	r0, r8
 800aca8:	4649      	mov	r1, r9
 800acaa:	f7f5 fc65 	bl	8000578 <__aeabi_dmul>
 800acae:	2200      	movs	r2, #0
 800acb0:	4b68      	ldr	r3, [pc, #416]	; (800ae54 <__ieee754_pow+0x734>)
 800acb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800acb6:	f7f5 faa9 	bl	800020c <__adddf3>
 800acba:	4632      	mov	r2, r6
 800acbc:	463b      	mov	r3, r7
 800acbe:	f7f5 faa5 	bl	800020c <__adddf3>
 800acc2:	9802      	ldr	r0, [sp, #8]
 800acc4:	460d      	mov	r5, r1
 800acc6:	4604      	mov	r4, r0
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4640      	mov	r0, r8
 800acce:	4649      	mov	r1, r9
 800acd0:	f7f5 fc52 	bl	8000578 <__aeabi_dmul>
 800acd4:	2200      	movs	r2, #0
 800acd6:	4680      	mov	r8, r0
 800acd8:	4689      	mov	r9, r1
 800acda:	4b5e      	ldr	r3, [pc, #376]	; (800ae54 <__ieee754_pow+0x734>)
 800acdc:	4620      	mov	r0, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	f7f5 fa92 	bl	8000208 <__aeabi_dsub>
 800ace4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ace8:	f7f5 fa8e 	bl	8000208 <__aeabi_dsub>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4630      	mov	r0, r6
 800acf2:	4639      	mov	r1, r7
 800acf4:	f7f5 fa88 	bl	8000208 <__aeabi_dsub>
 800acf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acfc:	f7f5 fc3c 	bl	8000578 <__aeabi_dmul>
 800ad00:	4622      	mov	r2, r4
 800ad02:	4606      	mov	r6, r0
 800ad04:	460f      	mov	r7, r1
 800ad06:	462b      	mov	r3, r5
 800ad08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad0c:	f7f5 fc34 	bl	8000578 <__aeabi_dmul>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4630      	mov	r0, r6
 800ad16:	4639      	mov	r1, r7
 800ad18:	f7f5 fa78 	bl	800020c <__adddf3>
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	460f      	mov	r7, r1
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4640      	mov	r0, r8
 800ad26:	4649      	mov	r1, r9
 800ad28:	f7f5 fa70 	bl	800020c <__adddf3>
 800ad2c:	9802      	ldr	r0, [sp, #8]
 800ad2e:	a33c      	add	r3, pc, #240	; (adr r3, 800ae20 <__ieee754_pow+0x700>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	4604      	mov	r4, r0
 800ad36:	460d      	mov	r5, r1
 800ad38:	f7f5 fc1e 	bl	8000578 <__aeabi_dmul>
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad42:	464b      	mov	r3, r9
 800ad44:	4620      	mov	r0, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	f7f5 fa5e 	bl	8000208 <__aeabi_dsub>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 fa58 	bl	8000208 <__aeabi_dsub>
 800ad58:	a333      	add	r3, pc, #204	; (adr r3, 800ae28 <__ieee754_pow+0x708>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f7f5 fc0b 	bl	8000578 <__aeabi_dmul>
 800ad62:	a333      	add	r3, pc, #204	; (adr r3, 800ae30 <__ieee754_pow+0x710>)
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	4606      	mov	r6, r0
 800ad6a:	460f      	mov	r7, r1
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f7f5 fc02 	bl	8000578 <__aeabi_dmul>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 fa46 	bl	800020c <__adddf3>
 800ad80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad82:	4b35      	ldr	r3, [pc, #212]	; (800ae58 <__ieee754_pow+0x738>)
 800ad84:	4413      	add	r3, r2
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 fa3f 	bl	800020c <__adddf3>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad92:	460d      	mov	r5, r1
 800ad94:	f7f5 fb86 	bl	80004a4 <__aeabi_i2d>
 800ad98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad9a:	4b30      	ldr	r3, [pc, #192]	; (800ae5c <__ieee754_pow+0x73c>)
 800ad9c:	4413      	add	r3, r2
 800ad9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	4622      	mov	r2, r4
 800ada8:	462b      	mov	r3, r5
 800adaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adae:	f7f5 fa2d 	bl	800020c <__adddf3>
 800adb2:	4642      	mov	r2, r8
 800adb4:	464b      	mov	r3, r9
 800adb6:	f7f5 fa29 	bl	800020c <__adddf3>
 800adba:	4632      	mov	r2, r6
 800adbc:	463b      	mov	r3, r7
 800adbe:	f7f5 fa25 	bl	800020c <__adddf3>
 800adc2:	9802      	ldr	r0, [sp, #8]
 800adc4:	4632      	mov	r2, r6
 800adc6:	463b      	mov	r3, r7
 800adc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adcc:	f7f5 fa1c 	bl	8000208 <__aeabi_dsub>
 800add0:	4642      	mov	r2, r8
 800add2:	464b      	mov	r3, r9
 800add4:	f7f5 fa18 	bl	8000208 <__aeabi_dsub>
 800add8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800addc:	e607      	b.n	800a9ee <__ieee754_pow+0x2ce>
 800adde:	f04f 0a01 	mov.w	sl, #1
 800ade2:	e6a5      	b.n	800ab30 <__ieee754_pow+0x410>
 800ade4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ae38 <__ieee754_pow+0x718>
 800ade8:	e613      	b.n	800aa12 <__ieee754_pow+0x2f2>
 800adea:	bf00      	nop
 800adec:	f3af 8000 	nop.w
 800adf0:	4a454eef 	.word	0x4a454eef
 800adf4:	3fca7e28 	.word	0x3fca7e28
 800adf8:	93c9db65 	.word	0x93c9db65
 800adfc:	3fcd864a 	.word	0x3fcd864a
 800ae00:	a91d4101 	.word	0xa91d4101
 800ae04:	3fd17460 	.word	0x3fd17460
 800ae08:	518f264d 	.word	0x518f264d
 800ae0c:	3fd55555 	.word	0x3fd55555
 800ae10:	db6fabff 	.word	0xdb6fabff
 800ae14:	3fdb6db6 	.word	0x3fdb6db6
 800ae18:	33333303 	.word	0x33333303
 800ae1c:	3fe33333 	.word	0x3fe33333
 800ae20:	e0000000 	.word	0xe0000000
 800ae24:	3feec709 	.word	0x3feec709
 800ae28:	dc3a03fd 	.word	0xdc3a03fd
 800ae2c:	3feec709 	.word	0x3feec709
 800ae30:	145b01f5 	.word	0x145b01f5
 800ae34:	be3e2fe0 	.word	0xbe3e2fe0
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	3ff00000 	.word	0x3ff00000
 800ae40:	43400000 	.word	0x43400000
 800ae44:	0003988e 	.word	0x0003988e
 800ae48:	000bb679 	.word	0x000bb679
 800ae4c:	0800b608 	.word	0x0800b608
 800ae50:	3ff00000 	.word	0x3ff00000
 800ae54:	40080000 	.word	0x40080000
 800ae58:	0800b628 	.word	0x0800b628
 800ae5c:	0800b618 	.word	0x0800b618
 800ae60:	a3b4      	add	r3, pc, #720	; (adr r3, 800b134 <__ieee754_pow+0xa14>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	4640      	mov	r0, r8
 800ae68:	4649      	mov	r1, r9
 800ae6a:	f7f5 f9cf 	bl	800020c <__adddf3>
 800ae6e:	4622      	mov	r2, r4
 800ae70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae74:	462b      	mov	r3, r5
 800ae76:	4630      	mov	r0, r6
 800ae78:	4639      	mov	r1, r7
 800ae7a:	f7f5 f9c5 	bl	8000208 <__aeabi_dsub>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae86:	f7f5 fe07 	bl	8000a98 <__aeabi_dcmpgt>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	f47f adfe 	bne.w	800aa8c <__ieee754_pow+0x36c>
 800ae90:	4aa3      	ldr	r2, [pc, #652]	; (800b120 <__ieee754_pow+0xa00>)
 800ae92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae96:	4293      	cmp	r3, r2
 800ae98:	f340 810a 	ble.w	800b0b0 <__ieee754_pow+0x990>
 800ae9c:	151b      	asrs	r3, r3, #20
 800ae9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aea2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aea6:	fa4a f303 	asr.w	r3, sl, r3
 800aeaa:	445b      	add	r3, fp
 800aeac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aeb0:	4e9c      	ldr	r6, [pc, #624]	; (800b124 <__ieee754_pow+0xa04>)
 800aeb2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aeb6:	4116      	asrs	r6, r2
 800aeb8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aebc:	2000      	movs	r0, #0
 800aebe:	ea23 0106 	bic.w	r1, r3, r6
 800aec2:	f1c2 0214 	rsb	r2, r2, #20
 800aec6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aeca:	fa4a fa02 	asr.w	sl, sl, r2
 800aece:	f1bb 0f00 	cmp.w	fp, #0
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	bfb8      	it	lt
 800aedc:	f1ca 0a00 	rsblt	sl, sl, #0
 800aee0:	f7f5 f992 	bl	8000208 <__aeabi_dsub>
 800aee4:	e9cd 0100 	strd	r0, r1, [sp]
 800aee8:	4642      	mov	r2, r8
 800aeea:	464b      	mov	r3, r9
 800aeec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aef0:	f7f5 f98c 	bl	800020c <__adddf3>
 800aef4:	2000      	movs	r0, #0
 800aef6:	a378      	add	r3, pc, #480	; (adr r3, 800b0d8 <__ieee754_pow+0x9b8>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	4604      	mov	r4, r0
 800aefe:	460d      	mov	r5, r1
 800af00:	f7f5 fb3a 	bl	8000578 <__aeabi_dmul>
 800af04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af08:	4606      	mov	r6, r0
 800af0a:	460f      	mov	r7, r1
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 f97a 	bl	8000208 <__aeabi_dsub>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4640      	mov	r0, r8
 800af1a:	4649      	mov	r1, r9
 800af1c:	f7f5 f974 	bl	8000208 <__aeabi_dsub>
 800af20:	a36f      	add	r3, pc, #444	; (adr r3, 800b0e0 <__ieee754_pow+0x9c0>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 fb27 	bl	8000578 <__aeabi_dmul>
 800af2a:	a36f      	add	r3, pc, #444	; (adr r3, 800b0e8 <__ieee754_pow+0x9c8>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	4680      	mov	r8, r0
 800af32:	4689      	mov	r9, r1
 800af34:	4620      	mov	r0, r4
 800af36:	4629      	mov	r1, r5
 800af38:	f7f5 fb1e 	bl	8000578 <__aeabi_dmul>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4640      	mov	r0, r8
 800af42:	4649      	mov	r1, r9
 800af44:	f7f5 f962 	bl	800020c <__adddf3>
 800af48:	4604      	mov	r4, r0
 800af4a:	460d      	mov	r5, r1
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4630      	mov	r0, r6
 800af52:	4639      	mov	r1, r7
 800af54:	f7f5 f95a 	bl	800020c <__adddf3>
 800af58:	4632      	mov	r2, r6
 800af5a:	463b      	mov	r3, r7
 800af5c:	4680      	mov	r8, r0
 800af5e:	4689      	mov	r9, r1
 800af60:	f7f5 f952 	bl	8000208 <__aeabi_dsub>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4620      	mov	r0, r4
 800af6a:	4629      	mov	r1, r5
 800af6c:	f7f5 f94c 	bl	8000208 <__aeabi_dsub>
 800af70:	4642      	mov	r2, r8
 800af72:	4606      	mov	r6, r0
 800af74:	460f      	mov	r7, r1
 800af76:	464b      	mov	r3, r9
 800af78:	4640      	mov	r0, r8
 800af7a:	4649      	mov	r1, r9
 800af7c:	f7f5 fafc 	bl	8000578 <__aeabi_dmul>
 800af80:	a35b      	add	r3, pc, #364	; (adr r3, 800b0f0 <__ieee754_pow+0x9d0>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	4604      	mov	r4, r0
 800af88:	460d      	mov	r5, r1
 800af8a:	f7f5 faf5 	bl	8000578 <__aeabi_dmul>
 800af8e:	a35a      	add	r3, pc, #360	; (adr r3, 800b0f8 <__ieee754_pow+0x9d8>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f7f5 f938 	bl	8000208 <__aeabi_dsub>
 800af98:	4622      	mov	r2, r4
 800af9a:	462b      	mov	r3, r5
 800af9c:	f7f5 faec 	bl	8000578 <__aeabi_dmul>
 800afa0:	a357      	add	r3, pc, #348	; (adr r3, 800b100 <__ieee754_pow+0x9e0>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	f7f5 f931 	bl	800020c <__adddf3>
 800afaa:	4622      	mov	r2, r4
 800afac:	462b      	mov	r3, r5
 800afae:	f7f5 fae3 	bl	8000578 <__aeabi_dmul>
 800afb2:	a355      	add	r3, pc, #340	; (adr r3, 800b108 <__ieee754_pow+0x9e8>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 f926 	bl	8000208 <__aeabi_dsub>
 800afbc:	4622      	mov	r2, r4
 800afbe:	462b      	mov	r3, r5
 800afc0:	f7f5 fada 	bl	8000578 <__aeabi_dmul>
 800afc4:	a352      	add	r3, pc, #328	; (adr r3, 800b110 <__ieee754_pow+0x9f0>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f7f5 f91f 	bl	800020c <__adddf3>
 800afce:	4622      	mov	r2, r4
 800afd0:	462b      	mov	r3, r5
 800afd2:	f7f5 fad1 	bl	8000578 <__aeabi_dmul>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 f913 	bl	8000208 <__aeabi_dsub>
 800afe2:	4604      	mov	r4, r0
 800afe4:	460d      	mov	r5, r1
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 fac3 	bl	8000578 <__aeabi_dmul>
 800aff2:	2200      	movs	r2, #0
 800aff4:	e9cd 0100 	strd	r0, r1, [sp]
 800aff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800affc:	4620      	mov	r0, r4
 800affe:	4629      	mov	r1, r5
 800b000:	f7f5 f902 	bl	8000208 <__aeabi_dsub>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b00c:	f7f5 fbde 	bl	80007cc <__aeabi_ddiv>
 800b010:	4632      	mov	r2, r6
 800b012:	4604      	mov	r4, r0
 800b014:	460d      	mov	r5, r1
 800b016:	463b      	mov	r3, r7
 800b018:	4640      	mov	r0, r8
 800b01a:	4649      	mov	r1, r9
 800b01c:	f7f5 faac 	bl	8000578 <__aeabi_dmul>
 800b020:	4632      	mov	r2, r6
 800b022:	463b      	mov	r3, r7
 800b024:	f7f5 f8f2 	bl	800020c <__adddf3>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4620      	mov	r0, r4
 800b02e:	4629      	mov	r1, r5
 800b030:	f7f5 f8ea 	bl	8000208 <__aeabi_dsub>
 800b034:	4642      	mov	r2, r8
 800b036:	464b      	mov	r3, r9
 800b038:	f7f5 f8e6 	bl	8000208 <__aeabi_dsub>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	2000      	movs	r0, #0
 800b042:	4939      	ldr	r1, [pc, #228]	; (800b128 <__ieee754_pow+0xa08>)
 800b044:	f7f5 f8e0 	bl	8000208 <__aeabi_dsub>
 800b048:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b04c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	da2f      	bge.n	800b0b6 <__ieee754_pow+0x996>
 800b056:	4650      	mov	r0, sl
 800b058:	ec43 2b10 	vmov	d0, r2, r3
 800b05c:	f000 f9c0 	bl	800b3e0 <scalbn>
 800b060:	ec51 0b10 	vmov	r0, r1, d0
 800b064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b068:	f7ff bbf1 	b.w	800a84e <__ieee754_pow+0x12e>
 800b06c:	4b2f      	ldr	r3, [pc, #188]	; (800b12c <__ieee754_pow+0xa0c>)
 800b06e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b072:	429e      	cmp	r6, r3
 800b074:	f77f af0c 	ble.w	800ae90 <__ieee754_pow+0x770>
 800b078:	4b2d      	ldr	r3, [pc, #180]	; (800b130 <__ieee754_pow+0xa10>)
 800b07a:	440b      	add	r3, r1
 800b07c:	4303      	orrs	r3, r0
 800b07e:	d00b      	beq.n	800b098 <__ieee754_pow+0x978>
 800b080:	a325      	add	r3, pc, #148	; (adr r3, 800b118 <__ieee754_pow+0x9f8>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b08a:	f7f5 fa75 	bl	8000578 <__aeabi_dmul>
 800b08e:	a322      	add	r3, pc, #136	; (adr r3, 800b118 <__ieee754_pow+0x9f8>)
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	f7ff bbdb 	b.w	800a84e <__ieee754_pow+0x12e>
 800b098:	4622      	mov	r2, r4
 800b09a:	462b      	mov	r3, r5
 800b09c:	f7f5 f8b4 	bl	8000208 <__aeabi_dsub>
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	464b      	mov	r3, r9
 800b0a4:	f7f5 fcee 	bl	8000a84 <__aeabi_dcmpge>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	f43f aef1 	beq.w	800ae90 <__ieee754_pow+0x770>
 800b0ae:	e7e7      	b.n	800b080 <__ieee754_pow+0x960>
 800b0b0:	f04f 0a00 	mov.w	sl, #0
 800b0b4:	e718      	b.n	800aee8 <__ieee754_pow+0x7c8>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	e7d4      	b.n	800b064 <__ieee754_pow+0x944>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	491a      	ldr	r1, [pc, #104]	; (800b128 <__ieee754_pow+0xa08>)
 800b0be:	f7ff bb8f 	b.w	800a7e0 <__ieee754_pow+0xc0>
 800b0c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0c6:	f7ff bb8b 	b.w	800a7e0 <__ieee754_pow+0xc0>
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	f7ff bb87 	b.w	800a7e0 <__ieee754_pow+0xc0>
 800b0d2:	4693      	mov	fp, r2
 800b0d4:	f7ff bb98 	b.w	800a808 <__ieee754_pow+0xe8>
 800b0d8:	00000000 	.word	0x00000000
 800b0dc:	3fe62e43 	.word	0x3fe62e43
 800b0e0:	fefa39ef 	.word	0xfefa39ef
 800b0e4:	3fe62e42 	.word	0x3fe62e42
 800b0e8:	0ca86c39 	.word	0x0ca86c39
 800b0ec:	be205c61 	.word	0xbe205c61
 800b0f0:	72bea4d0 	.word	0x72bea4d0
 800b0f4:	3e663769 	.word	0x3e663769
 800b0f8:	c5d26bf1 	.word	0xc5d26bf1
 800b0fc:	3ebbbd41 	.word	0x3ebbbd41
 800b100:	af25de2c 	.word	0xaf25de2c
 800b104:	3f11566a 	.word	0x3f11566a
 800b108:	16bebd93 	.word	0x16bebd93
 800b10c:	3f66c16c 	.word	0x3f66c16c
 800b110:	5555553e 	.word	0x5555553e
 800b114:	3fc55555 	.word	0x3fc55555
 800b118:	c2f8f359 	.word	0xc2f8f359
 800b11c:	01a56e1f 	.word	0x01a56e1f
 800b120:	3fe00000 	.word	0x3fe00000
 800b124:	000fffff 	.word	0x000fffff
 800b128:	3ff00000 	.word	0x3ff00000
 800b12c:	4090cbff 	.word	0x4090cbff
 800b130:	3f6f3400 	.word	0x3f6f3400
 800b134:	652b82fe 	.word	0x652b82fe
 800b138:	3c971547 	.word	0x3c971547

0800b13c <__ieee754_sqrt>:
 800b13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b140:	4955      	ldr	r1, [pc, #340]	; (800b298 <__ieee754_sqrt+0x15c>)
 800b142:	ec55 4b10 	vmov	r4, r5, d0
 800b146:	43a9      	bics	r1, r5
 800b148:	462b      	mov	r3, r5
 800b14a:	462a      	mov	r2, r5
 800b14c:	d112      	bne.n	800b174 <__ieee754_sqrt+0x38>
 800b14e:	ee10 2a10 	vmov	r2, s0
 800b152:	ee10 0a10 	vmov	r0, s0
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 fa0e 	bl	8000578 <__aeabi_dmul>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4620      	mov	r0, r4
 800b162:	4629      	mov	r1, r5
 800b164:	f7f5 f852 	bl	800020c <__adddf3>
 800b168:	4604      	mov	r4, r0
 800b16a:	460d      	mov	r5, r1
 800b16c:	ec45 4b10 	vmov	d0, r4, r5
 800b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b174:	2d00      	cmp	r5, #0
 800b176:	ee10 0a10 	vmov	r0, s0
 800b17a:	4621      	mov	r1, r4
 800b17c:	dc0f      	bgt.n	800b19e <__ieee754_sqrt+0x62>
 800b17e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b182:	4330      	orrs	r0, r6
 800b184:	d0f2      	beq.n	800b16c <__ieee754_sqrt+0x30>
 800b186:	b155      	cbz	r5, 800b19e <__ieee754_sqrt+0x62>
 800b188:	ee10 2a10 	vmov	r2, s0
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 f83a 	bl	8000208 <__aeabi_dsub>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	f7f5 fb18 	bl	80007cc <__aeabi_ddiv>
 800b19c:	e7e4      	b.n	800b168 <__ieee754_sqrt+0x2c>
 800b19e:	151b      	asrs	r3, r3, #20
 800b1a0:	d073      	beq.n	800b28a <__ieee754_sqrt+0x14e>
 800b1a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b1a6:	07dd      	lsls	r5, r3, #31
 800b1a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b1ac:	bf48      	it	mi
 800b1ae:	0fc8      	lsrmi	r0, r1, #31
 800b1b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b1b4:	bf44      	itt	mi
 800b1b6:	0049      	lslmi	r1, r1, #1
 800b1b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b1bc:	2500      	movs	r5, #0
 800b1be:	1058      	asrs	r0, r3, #1
 800b1c0:	0fcb      	lsrs	r3, r1, #31
 800b1c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b1c6:	0049      	lsls	r1, r1, #1
 800b1c8:	2316      	movs	r3, #22
 800b1ca:	462c      	mov	r4, r5
 800b1cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b1d0:	19a7      	adds	r7, r4, r6
 800b1d2:	4297      	cmp	r7, r2
 800b1d4:	bfde      	ittt	le
 800b1d6:	19bc      	addle	r4, r7, r6
 800b1d8:	1bd2      	suble	r2, r2, r7
 800b1da:	19ad      	addle	r5, r5, r6
 800b1dc:	0fcf      	lsrs	r7, r1, #31
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b1e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b1e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b1ec:	d1f0      	bne.n	800b1d0 <__ieee754_sqrt+0x94>
 800b1ee:	f04f 0c20 	mov.w	ip, #32
 800b1f2:	469e      	mov	lr, r3
 800b1f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b1f8:	42a2      	cmp	r2, r4
 800b1fa:	eb06 070e 	add.w	r7, r6, lr
 800b1fe:	dc02      	bgt.n	800b206 <__ieee754_sqrt+0xca>
 800b200:	d112      	bne.n	800b228 <__ieee754_sqrt+0xec>
 800b202:	428f      	cmp	r7, r1
 800b204:	d810      	bhi.n	800b228 <__ieee754_sqrt+0xec>
 800b206:	2f00      	cmp	r7, #0
 800b208:	eb07 0e06 	add.w	lr, r7, r6
 800b20c:	da42      	bge.n	800b294 <__ieee754_sqrt+0x158>
 800b20e:	f1be 0f00 	cmp.w	lr, #0
 800b212:	db3f      	blt.n	800b294 <__ieee754_sqrt+0x158>
 800b214:	f104 0801 	add.w	r8, r4, #1
 800b218:	1b12      	subs	r2, r2, r4
 800b21a:	428f      	cmp	r7, r1
 800b21c:	bf88      	it	hi
 800b21e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b222:	1bc9      	subs	r1, r1, r7
 800b224:	4433      	add	r3, r6
 800b226:	4644      	mov	r4, r8
 800b228:	0052      	lsls	r2, r2, #1
 800b22a:	f1bc 0c01 	subs.w	ip, ip, #1
 800b22e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b232:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b236:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b23a:	d1dd      	bne.n	800b1f8 <__ieee754_sqrt+0xbc>
 800b23c:	430a      	orrs	r2, r1
 800b23e:	d006      	beq.n	800b24e <__ieee754_sqrt+0x112>
 800b240:	1c5c      	adds	r4, r3, #1
 800b242:	bf13      	iteet	ne
 800b244:	3301      	addne	r3, #1
 800b246:	3501      	addeq	r5, #1
 800b248:	4663      	moveq	r3, ip
 800b24a:	f023 0301 	bicne.w	r3, r3, #1
 800b24e:	106a      	asrs	r2, r5, #1
 800b250:	085b      	lsrs	r3, r3, #1
 800b252:	07e9      	lsls	r1, r5, #31
 800b254:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b258:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b25c:	bf48      	it	mi
 800b25e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b262:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b266:	461c      	mov	r4, r3
 800b268:	e780      	b.n	800b16c <__ieee754_sqrt+0x30>
 800b26a:	0aca      	lsrs	r2, r1, #11
 800b26c:	3815      	subs	r0, #21
 800b26e:	0549      	lsls	r1, r1, #21
 800b270:	2a00      	cmp	r2, #0
 800b272:	d0fa      	beq.n	800b26a <__ieee754_sqrt+0x12e>
 800b274:	02d6      	lsls	r6, r2, #11
 800b276:	d50a      	bpl.n	800b28e <__ieee754_sqrt+0x152>
 800b278:	f1c3 0420 	rsb	r4, r3, #32
 800b27c:	fa21 f404 	lsr.w	r4, r1, r4
 800b280:	1e5d      	subs	r5, r3, #1
 800b282:	4099      	lsls	r1, r3
 800b284:	4322      	orrs	r2, r4
 800b286:	1b43      	subs	r3, r0, r5
 800b288:	e78b      	b.n	800b1a2 <__ieee754_sqrt+0x66>
 800b28a:	4618      	mov	r0, r3
 800b28c:	e7f0      	b.n	800b270 <__ieee754_sqrt+0x134>
 800b28e:	0052      	lsls	r2, r2, #1
 800b290:	3301      	adds	r3, #1
 800b292:	e7ef      	b.n	800b274 <__ieee754_sqrt+0x138>
 800b294:	46a0      	mov	r8, r4
 800b296:	e7bf      	b.n	800b218 <__ieee754_sqrt+0xdc>
 800b298:	7ff00000 	.word	0x7ff00000

0800b29c <fabs>:
 800b29c:	ec51 0b10 	vmov	r0, r1, d0
 800b2a0:	ee10 2a10 	vmov	r2, s0
 800b2a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b2a8:	ec43 2b10 	vmov	d0, r2, r3
 800b2ac:	4770      	bx	lr

0800b2ae <finite>:
 800b2ae:	ee10 3a90 	vmov	r3, s1
 800b2b2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b2b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b2ba:	0fc0      	lsrs	r0, r0, #31
 800b2bc:	4770      	bx	lr

0800b2be <matherr>:
 800b2be:	2000      	movs	r0, #0
 800b2c0:	4770      	bx	lr
 800b2c2:	0000      	movs	r0, r0
 800b2c4:	0000      	movs	r0, r0
	...

0800b2c8 <nan>:
 800b2c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b2d0 <nan+0x8>
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	00000000 	.word	0x00000000
 800b2d4:	7ff80000 	.word	0x7ff80000

0800b2d8 <rint>:
 800b2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2da:	ec51 0b10 	vmov	r0, r1, d0
 800b2de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b2e6:	2e13      	cmp	r6, #19
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	ee10 4a10 	vmov	r4, s0
 800b2ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b2f2:	dc56      	bgt.n	800b3a2 <rint+0xca>
 800b2f4:	2e00      	cmp	r6, #0
 800b2f6:	da2b      	bge.n	800b350 <rint+0x78>
 800b2f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b2fc:	4302      	orrs	r2, r0
 800b2fe:	d023      	beq.n	800b348 <rint+0x70>
 800b300:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b304:	4302      	orrs	r2, r0
 800b306:	4254      	negs	r4, r2
 800b308:	4314      	orrs	r4, r2
 800b30a:	0c4b      	lsrs	r3, r1, #17
 800b30c:	0b24      	lsrs	r4, r4, #12
 800b30e:	045b      	lsls	r3, r3, #17
 800b310:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b314:	ea44 0103 	orr.w	r1, r4, r3
 800b318:	460b      	mov	r3, r1
 800b31a:	492f      	ldr	r1, [pc, #188]	; (800b3d8 <rint+0x100>)
 800b31c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b320:	e9d1 6700 	ldrd	r6, r7, [r1]
 800b324:	4602      	mov	r2, r0
 800b326:	4639      	mov	r1, r7
 800b328:	4630      	mov	r0, r6
 800b32a:	f7f4 ff6f 	bl	800020c <__adddf3>
 800b32e:	e9cd 0100 	strd	r0, r1, [sp]
 800b332:	463b      	mov	r3, r7
 800b334:	4632      	mov	r2, r6
 800b336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b33a:	f7f4 ff65 	bl	8000208 <__aeabi_dsub>
 800b33e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b342:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b346:	4639      	mov	r1, r7
 800b348:	ec41 0b10 	vmov	d0, r0, r1
 800b34c:	b003      	add	sp, #12
 800b34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b350:	4a22      	ldr	r2, [pc, #136]	; (800b3dc <rint+0x104>)
 800b352:	4132      	asrs	r2, r6
 800b354:	ea01 0702 	and.w	r7, r1, r2
 800b358:	4307      	orrs	r7, r0
 800b35a:	d0f5      	beq.n	800b348 <rint+0x70>
 800b35c:	0852      	lsrs	r2, r2, #1
 800b35e:	4011      	ands	r1, r2
 800b360:	430c      	orrs	r4, r1
 800b362:	d00b      	beq.n	800b37c <rint+0xa4>
 800b364:	ea23 0202 	bic.w	r2, r3, r2
 800b368:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b36c:	2e13      	cmp	r6, #19
 800b36e:	fa43 f306 	asr.w	r3, r3, r6
 800b372:	bf0c      	ite	eq
 800b374:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b378:	2400      	movne	r4, #0
 800b37a:	4313      	orrs	r3, r2
 800b37c:	4916      	ldr	r1, [pc, #88]	; (800b3d8 <rint+0x100>)
 800b37e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b382:	4622      	mov	r2, r4
 800b384:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f4 ff3e 	bl	800020c <__adddf3>
 800b390:	e9cd 0100 	strd	r0, r1, [sp]
 800b394:	4622      	mov	r2, r4
 800b396:	462b      	mov	r3, r5
 800b398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b39c:	f7f4 ff34 	bl	8000208 <__aeabi_dsub>
 800b3a0:	e7d2      	b.n	800b348 <rint+0x70>
 800b3a2:	2e33      	cmp	r6, #51	; 0x33
 800b3a4:	dd07      	ble.n	800b3b6 <rint+0xde>
 800b3a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b3aa:	d1cd      	bne.n	800b348 <rint+0x70>
 800b3ac:	ee10 2a10 	vmov	r2, s0
 800b3b0:	f7f4 ff2c 	bl	800020c <__adddf3>
 800b3b4:	e7c8      	b.n	800b348 <rint+0x70>
 800b3b6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b3be:	40f2      	lsrs	r2, r6
 800b3c0:	4210      	tst	r0, r2
 800b3c2:	d0c1      	beq.n	800b348 <rint+0x70>
 800b3c4:	0852      	lsrs	r2, r2, #1
 800b3c6:	4210      	tst	r0, r2
 800b3c8:	bf1f      	itttt	ne
 800b3ca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b3ce:	ea20 0202 	bicne.w	r2, r0, r2
 800b3d2:	4134      	asrne	r4, r6
 800b3d4:	4314      	orrne	r4, r2
 800b3d6:	e7d1      	b.n	800b37c <rint+0xa4>
 800b3d8:	0800b638 	.word	0x0800b638
 800b3dc:	000fffff 	.word	0x000fffff

0800b3e0 <scalbn>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	ec55 4b10 	vmov	r4, r5, d0
 800b3e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	462b      	mov	r3, r5
 800b3ee:	b9aa      	cbnz	r2, 800b41c <scalbn+0x3c>
 800b3f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b3f4:	4323      	orrs	r3, r4
 800b3f6:	d03b      	beq.n	800b470 <scalbn+0x90>
 800b3f8:	4b31      	ldr	r3, [pc, #196]	; (800b4c0 <scalbn+0xe0>)
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	ee10 0a10 	vmov	r0, s0
 800b402:	f7f5 f8b9 	bl	8000578 <__aeabi_dmul>
 800b406:	4b2f      	ldr	r3, [pc, #188]	; (800b4c4 <scalbn+0xe4>)
 800b408:	429e      	cmp	r6, r3
 800b40a:	4604      	mov	r4, r0
 800b40c:	460d      	mov	r5, r1
 800b40e:	da12      	bge.n	800b436 <scalbn+0x56>
 800b410:	a327      	add	r3, pc, #156	; (adr r3, 800b4b0 <scalbn+0xd0>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f5 f8af 	bl	8000578 <__aeabi_dmul>
 800b41a:	e009      	b.n	800b430 <scalbn+0x50>
 800b41c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b420:	428a      	cmp	r2, r1
 800b422:	d10c      	bne.n	800b43e <scalbn+0x5e>
 800b424:	ee10 2a10 	vmov	r2, s0
 800b428:	4620      	mov	r0, r4
 800b42a:	4629      	mov	r1, r5
 800b42c:	f7f4 feee 	bl	800020c <__adddf3>
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	e01c      	b.n	800b470 <scalbn+0x90>
 800b436:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b43a:	460b      	mov	r3, r1
 800b43c:	3a36      	subs	r2, #54	; 0x36
 800b43e:	4432      	add	r2, r6
 800b440:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b444:	428a      	cmp	r2, r1
 800b446:	dd0b      	ble.n	800b460 <scalbn+0x80>
 800b448:	ec45 4b11 	vmov	d1, r4, r5
 800b44c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b4b8 <scalbn+0xd8>
 800b450:	f000 f83c 	bl	800b4cc <copysign>
 800b454:	a318      	add	r3, pc, #96	; (adr r3, 800b4b8 <scalbn+0xd8>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	ec51 0b10 	vmov	r0, r1, d0
 800b45e:	e7da      	b.n	800b416 <scalbn+0x36>
 800b460:	2a00      	cmp	r2, #0
 800b462:	dd08      	ble.n	800b476 <scalbn+0x96>
 800b464:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b46c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b470:	ec45 4b10 	vmov	d0, r4, r5
 800b474:	bd70      	pop	{r4, r5, r6, pc}
 800b476:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b47a:	da0d      	bge.n	800b498 <scalbn+0xb8>
 800b47c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b480:	429e      	cmp	r6, r3
 800b482:	ec45 4b11 	vmov	d1, r4, r5
 800b486:	dce1      	bgt.n	800b44c <scalbn+0x6c>
 800b488:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b4b0 <scalbn+0xd0>
 800b48c:	f000 f81e 	bl	800b4cc <copysign>
 800b490:	a307      	add	r3, pc, #28	; (adr r3, 800b4b0 <scalbn+0xd0>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	e7e0      	b.n	800b45a <scalbn+0x7a>
 800b498:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b49c:	3236      	adds	r2, #54	; 0x36
 800b49e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b4a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <scalbn+0xe8>)
 800b4ae:	e7b2      	b.n	800b416 <scalbn+0x36>
 800b4b0:	c2f8f359 	.word	0xc2f8f359
 800b4b4:	01a56e1f 	.word	0x01a56e1f
 800b4b8:	8800759c 	.word	0x8800759c
 800b4bc:	7e37e43c 	.word	0x7e37e43c
 800b4c0:	43500000 	.word	0x43500000
 800b4c4:	ffff3cb0 	.word	0xffff3cb0
 800b4c8:	3c900000 	.word	0x3c900000

0800b4cc <copysign>:
 800b4cc:	ec51 0b10 	vmov	r0, r1, d0
 800b4d0:	ee11 0a90 	vmov	r0, s3
 800b4d4:	ee10 2a10 	vmov	r2, s0
 800b4d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b4dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b4e0:	ea41 0300 	orr.w	r3, r1, r0
 800b4e4:	ec43 2b10 	vmov	d0, r2, r3
 800b4e8:	4770      	bx	lr
	...

0800b4ec <_init>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	bf00      	nop
 800b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f2:	bc08      	pop	{r3}
 800b4f4:	469e      	mov	lr, r3
 800b4f6:	4770      	bx	lr

0800b4f8 <_fini>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	bf00      	nop
 800b4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fe:	bc08      	pop	{r3}
 800b500:	469e      	mov	lr, r3
 800b502:	4770      	bx	lr
