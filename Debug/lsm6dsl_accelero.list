
lsm6dsl_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007150  08007150  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007158  08007158  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08007160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000040  080071a0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  080071a0  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a72a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c85  00000000  00000000  0003a79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001720  00000000  00000000  0003d420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  0003eb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002dfce  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000114cf  00000000  00000000  0006e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011e780  00000000  00000000  0007f595  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019dd15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006240  00000000  00000000  0019dd90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000040 	.word	0x20000040
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080070c8 	.word	0x080070c8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000044 	.word	0x20000044
 80001f8:	080070c8 	.word	0x080070c8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800050a:	2110      	movs	r1, #16
 800050c:	20d4      	movs	r0, #212	; 0xd4
 800050e:	f000 ff6b 	bl	80013e8 <SENSOR_IO_Read>
 8000512:	4603      	mov	r3, r0
 8000514:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	f003 0303 	and.w	r3, r3, #3
 8000520:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000522:	7bba      	ldrb	r2, [r7, #14]
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	4313      	orrs	r3, r2
 8000528:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	461a      	mov	r2, r3
 800052e:	2110      	movs	r1, #16
 8000530:	20d4      	movs	r0, #212	; 0xd4
 8000532:	f000 ff3f 	bl	80013b4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000536:	2112      	movs	r1, #18
 8000538:	20d4      	movs	r0, #212	; 0xd4
 800053a:	f000 ff55 	bl	80013e8 <SENSOR_IO_Read>
 800053e:	4603      	mov	r3, r0
 8000540:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	b29b      	uxth	r3, r3
 8000548:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800054a:	7bbb      	ldrb	r3, [r7, #14]
 800054c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000550:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000552:	7bba      	ldrb	r2, [r7, #14]
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	4313      	orrs	r3, r2
 8000558:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	461a      	mov	r2, r3
 800055e:	2112      	movs	r1, #18
 8000560:	20d4      	movs	r0, #212	; 0xd4
 8000562:	f000 ff27 	bl	80013b4 <SENSOR_IO_Write>
}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000578:	2110      	movs	r1, #16
 800057a:	20d4      	movs	r0, #212	; 0xd4
 800057c:	f000 ff34 	bl	80013e8 <SENSOR_IO_Read>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	461a      	mov	r2, r3
 8000590:	2110      	movs	r1, #16
 8000592:	20d4      	movs	r0, #212	; 0xd4
 8000594:	f000 ff0e 	bl	80013b4 <SENSOR_IO_Write>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80005a4:	f000 fefc 	bl	80013a0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80005a8:	210f      	movs	r1, #15
 80005aa:	20d4      	movs	r0, #212	; 0xd4
 80005ac:	f000 ff1c 	bl	80013e8 <SENSOR_IO_Read>
 80005b0:	4603      	mov	r3, r0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b084      	sub	sp, #16
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4603      	mov	r3, r0
 80005be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80005c4:	2115      	movs	r1, #21
 80005c6:	20d4      	movs	r0, #212	; 0xd4
 80005c8:	f000 ff0e 	bl	80013e8 <SENSOR_IO_Read>
 80005cc:	4603      	mov	r3, r0
 80005ce:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f023 0310 	bic.w	r3, r3, #16
 80005d6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d003      	beq.n	80005e6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	461a      	mov	r2, r3
 80005ea:	2115      	movs	r1, #21
 80005ec:	20d4      	movs	r0, #212	; 0xd4
 80005ee:	f000 fee1 	bl	80013b4 <SENSOR_IO_Write>
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000604:	2300      	movs	r3, #0
 8000606:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800060c:	f04f 0300 	mov.w	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000612:	2110      	movs	r1, #16
 8000614:	20d4      	movs	r0, #212	; 0xd4
 8000616:	f000 fee7 	bl	80013e8 <SENSOR_IO_Read>
 800061a:	4603      	mov	r3, r0
 800061c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800061e:	f107 0208 	add.w	r2, r7, #8
 8000622:	2306      	movs	r3, #6
 8000624:	2128      	movs	r1, #40	; 0x28
 8000626:	20d4      	movs	r0, #212	; 0xd4
 8000628:	f000 fefc 	bl	8001424 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	77fb      	strb	r3, [r7, #31]
 8000630:	e01f      	b.n	8000672 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000632:	7ffb      	ldrb	r3, [r7, #31]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	3301      	adds	r3, #1
 8000638:	f107 0220 	add.w	r2, r7, #32
 800063c:	4413      	add	r3, r2
 800063e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000642:	b29b      	uxth	r3, r3
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b29a      	uxth	r2, r3
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	f107 0120 	add.w	r1, r7, #32
 8000650:	440b      	add	r3, r1
 8000652:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4413      	add	r3, r2
 800065a:	b29a      	uxth	r2, r3
 800065c:	7ffb      	ldrb	r3, [r7, #31]
 800065e:	b212      	sxth	r2, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	f107 0120 	add.w	r1, r7, #32
 8000666:	440b      	add	r3, r1
 8000668:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800066c:	7ffb      	ldrb	r3, [r7, #31]
 800066e:	3301      	adds	r3, #1
 8000670:	77fb      	strb	r3, [r7, #31]
 8000672:	7ffb      	ldrb	r3, [r7, #31]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d9dc      	bls.n	8000632 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000678:	7dfb      	ldrb	r3, [r7, #23]
 800067a:	f003 030c 	and.w	r3, r3, #12
 800067e:	2b0c      	cmp	r3, #12
 8000680:	d828      	bhi.n	80006d4 <LSM6DSL_AccReadXYZ+0xd8>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <LSM6DSL_AccReadXYZ+0x8c>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006d5 	.word	0x080006d5
 8000690:	080006d5 	.word	0x080006d5
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080006cf 	.word	0x080006cf
 800069c:	080006d5 	.word	0x080006d5
 80006a0:	080006d5 	.word	0x080006d5
 80006a4:	080006d5 	.word	0x080006d5
 80006a8:	080006c3 	.word	0x080006c3
 80006ac:	080006d5 	.word	0x080006d5
 80006b0:	080006d5 	.word	0x080006d5
 80006b4:	080006d5 	.word	0x080006d5
 80006b8:	080006c9 	.word	0x080006c9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <LSM6DSL_AccReadXYZ+0x124>)
 80006be:	61bb      	str	r3, [r7, #24]
    break;
 80006c0:	e008      	b.n	80006d4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <LSM6DSL_AccReadXYZ+0x128>)
 80006c4:	61bb      	str	r3, [r7, #24]
    break;
 80006c6:	e005      	b.n	80006d4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <LSM6DSL_AccReadXYZ+0x12c>)
 80006ca:	61bb      	str	r3, [r7, #24]
    break;
 80006cc:	e002      	b.n	80006d4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <LSM6DSL_AccReadXYZ+0x130>)
 80006d0:	61bb      	str	r3, [r7, #24]
    break;    
 80006d2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	77fb      	strb	r3, [r7, #31]
 80006d8:	e01b      	b.n	8000712 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80006da:	7ffb      	ldrb	r3, [r7, #31]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	f107 0220 	add.w	r2, r7, #32
 80006e2:	4413      	add	r3, r2
 80006e4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80006e8:	ee07 3a90 	vmov	s15, r3
 80006ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80006f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000704:	ee17 2a90 	vmov	r2, s15
 8000708:	b212      	sxth	r2, r2
 800070a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800070c:	7ffb      	ldrb	r3, [r7, #31]
 800070e:	3301      	adds	r3, #1
 8000710:	77fb      	strb	r3, [r7, #31]
 8000712:	7ffb      	ldrb	r3, [r7, #31]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d9e0      	bls.n	80006da <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	3d79db23 	.word	0x3d79db23
 8000724:	3df9db23 	.word	0x3df9db23
 8000728:	3e79db23 	.word	0x3e79db23
 800072c:	3ef9db23 	.word	0x3ef9db23

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f001 fa9c 	bl	8001c72 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 800073a:	f000 fe91 	bl	8001460 <BSP_ACCELERO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f823 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 fbf9 	bl	8000f38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000746:	f000 f8cf 	bl	80008e8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800074a:	f000 f931 	bl	80009b0 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800074e:	f000 f967 	bl	8000a20 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000752:	f000 f9a5 	bl	8000aa0 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000756:	f000 f9e3 	bl	8000b20 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800075a:	f000 fa37 	bl	8000bcc <MX_SPI1_Init>
  MX_SPI3_Init();
 800075e:	f000 fa73 	bl	8000c48 <MX_SPI3_Init>
  MX_UART4_Init();
 8000762:	f000 faaf 	bl	8000cc4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000766:	f000 faf9 	bl	8000d5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800076a:	f000 fb43 	bl	8000df4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800076e:	f000 fb8f 	bl	8000e90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000772:	f000 fbd9 	bl	8000f28 <MX_USB_OTG_FS_USB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_ACCELERO_AccGetXYZ(axyz);
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f000 feaf 	bl	80014dc <BSP_ACCELERO_AccGetXYZ>
	  HAL_Delay(1000);
 800077e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000782:	f001 faeb 	bl	8001d5c <HAL_Delay>
	  BSP_ACCELERO_AccGetXYZ(axyz);
 8000786:	e7f6      	b.n	8000776 <main+0x46>

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b0bc      	sub	sp, #240	; 0xf0
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000792:	2244      	movs	r2, #68	; 0x44
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 fc8e 	bl	80070b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2294      	movs	r2, #148	; 0x94
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 fc80 	bl	80070b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f004 f979 	bl	8004ab0 <HAL_PWREx_ControlVoltageScaling>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80007c4:	f000 fcf8 	bl	80011b8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c8:	f004 f942 	bl	8004a50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007cc:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <SystemClock_Config+0x158>)
 80007ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007d2:	4a43      	ldr	r2, [pc, #268]	; (80008e0 <SystemClock_Config+0x158>)
 80007d4:	f023 0318 	bic.w	r3, r3, #24
 80007d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007dc:	2314      	movs	r3, #20
 80007de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f4:	2360      	movs	r3, #96	; 0x60
 80007f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000800:	2301      	movs	r3, #1
 8000802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800080c:	233c      	movs	r3, #60	; 0x3c
 800080e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000828:	4618      	mov	r0, r3
 800082a:	f004 f9e5 	bl	8004bf8 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000834:	f000 fcc0 	bl	80011b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000856:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800085a:	2105      	movs	r1, #5
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fdf1 	bl	8005444 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000868:	f000 fca6 	bl	80011b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <SystemClock_Config+0x15c>)
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000870:	2300      	movs	r3, #0
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800087c:	2300      	movs	r3, #0
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000880:	2300      	movs	r3, #0
 8000882:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000884:	2300      	movs	r3, #0
 8000886:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000888:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800088c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800089c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008a0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80008aa:	2318      	movs	r3, #24
 80008ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80008ba:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80008be:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 f86e 	bl	80059a4 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80008ce:	f000 fc73 	bl	80011b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008d2:	f005 fb8f 	bl	8005ff4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008d6:	bf00      	nop
 80008d8:	37f0      	adds	r7, #240	; 0xf0
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	010160cf 	.word	0x010160cf

080008e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000900:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <MX_ADC1_Init+0xc0>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_ADC1_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_ADC1_Init+0xbc>)
 800091e:	2204      	movs	r2, #4
 8000920:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_ADC1_Init+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000930:	2201      	movs	r2, #1
 8000932:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_ADC1_Init+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_ADC1_Init+0xbc>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_ADC1_Init+0xbc>)
 8000960:	f001 fbbe 	bl	80020e0 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800096a:	f000 fc25 	bl	80011b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_ADC1_Init+0xc4>)
 8000970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000972:	2306      	movs	r3, #6
 8000974:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800097a:	237f      	movs	r3, #127	; 0x7f
 800097c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800097e:	2304      	movs	r3, #4
 8000980:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_ADC1_Init+0xbc>)
 800098c:	f001 fcf2 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000996:	f000 fc0f 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000260 	.word	0x20000260
 80009a8:	50040000 	.word	0x50040000
 80009ac:	04300002 	.word	0x04300002

080009b0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <MX_DFSDM1_Init+0x6c>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009bc:	2201      	movs	r2, #1
 80009be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_DFSDM1_Init+0x68>)
 8000a04:	f002 f9c2 	bl	8002d8c <HAL_DFSDM_ChannelInit>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000a0e:	f000 fbd3 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200004d0 	.word	0x200004d0
 8000a1c:	40016040 	.word	0x40016040

08000a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C1_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C1_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a5c:	f002 fd61 	bl	8003522 <HAL_I2C_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a66:	f000 fba7 	bl	80011b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a6e:	f003 fa61 	bl	8003f34 <HAL_I2CEx_ConfigAnalogFilter>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a78:	f000 fb9e 	bl	80011b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a80:	f003 faa3 	bl	8003fca <HAL_I2CEx_ConfigDigitalFilter>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8a:	f000 fb95 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000114 	.word	0x20000114
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	307075b1 	.word	0x307075b1

08000aa0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C2_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C2_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000adc:	f002 fd21 	bl	8003522 <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 fb67 	bl	80011b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aee:	f003 fa21 	bl	8003f34 <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 fb5e 	bl	80011b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000b00:	f003 fa63 	bl	8003fca <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 fb55 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001b0 	.word	0x200001b0
 8000b18:	40005800 	.word	0x40005800
 8000b1c:	307075b1 	.word	0x307075b1

08000b20 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b36:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <MX_OCTOSPI1_Init+0xa8>)
 8000b38:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b4c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b50:	2220      	movs	r2, #32
 8000b52:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b80:	2208      	movs	r2, #8
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000b86:	f003 fa6d 	bl	8004064 <HAL_OSPI_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000b90:	f000 fb12 	bl	80011b8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000b9c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000ba0:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_OCTOSPI1_Init+0xa4>)
 8000bac:	f003 fb14 	bl	80041d8 <HAL_OSPIM_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000bb6:	f000 faff 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000160 	.word	0x20000160
 8000bc8:	a0001000 	.word	0xa0001000

08000bcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_SPI1_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000be6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_SPI1_Init+0x74>)
 8000c2c:	f005 fbd2 	bl	80063d4 <HAL_SPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f000 fabf 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003e0 	.word	0x200003e0
 8000c44:	40013000 	.word	0x40013000

08000c48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <MX_SPI3_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c96:	2207      	movs	r2, #7
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_SPI3_Init+0x74>)
 8000ca8:	f005 fb94 	bl	80063d4 <HAL_SPI_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 fa81 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001fc 	.word	0x200001fc
 8000cc0:	40003c00 	.word	0x40003c00

08000cc4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <MX_UART4_Init+0x94>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_UART4_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_UART4_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_UART4_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_UART4_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <MX_UART4_Init+0x90>)
 8000d0e:	f005 fc04 	bl	800651a <HAL_UART_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d18:	f000 fa4e 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_UART4_Init+0x90>)
 8000d20:	f006 f8c1 	bl	8006ea6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 fa45 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <MX_UART4_Init+0x90>)
 8000d32:	f006 f8f6 	bl	8006f22 <HAL_UARTEx_SetRxFifoThreshold>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d3c:	f000 fa3c 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_UART4_Init+0x90>)
 8000d42:	f006 f877 	bl	8006e34 <HAL_UARTEx_DisableFifoMode>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 fa34 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000354 	.word	0x20000354
 8000d58:	40004c00 	.word	0x40004c00

08000d5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d62:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <MX_USART1_UART_Init+0x94>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000da6:	f005 fbb8 	bl	800651a <HAL_UART_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000db0:	f000 fa02 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000db8:	f006 f875 	bl	8006ea6 <HAL_UARTEx_SetTxFifoThreshold>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc2:	f000 f9f9 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000dca:	f006 f8aa 	bl	8006f22 <HAL_UARTEx_SetRxFifoThreshold>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f000 f9f0 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_USART1_UART_Init+0x90>)
 8000dda:	f006 f82b 	bl	8006e34 <HAL_UARTEx_DisableFifoMode>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 f9e8 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200002c8 	.word	0x200002c8
 8000df0:	40013800 	.word	0x40013800

08000df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000dfa:	4a24      	ldr	r2, [pc, #144]	; (8000e8c <MX_USART2_UART_Init+0x98>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e24:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3e:	4812      	ldr	r0, [pc, #72]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e40:	f005 fb6b 	bl	800651a <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000e4a:	f000 f9b5 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e52:	f006 f828 	bl	8006ea6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000e5c:	f000 f9ac 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e64:	f006 f85d 	bl	8006f22 <HAL_UARTEx_SetRxFifoThreshold>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000e6e:	f000 f9a3 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x94>)
 8000e74:	f005 ffde 	bl	8006e34 <HAL_UARTEx_DisableFifoMode>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000e7e:	f000 f99b 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000444 	.word	0x20000444
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <MX_USART3_UART_Init+0x94>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eda:	f005 fb1e 	bl	800651a <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f000 f968 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eec:	f005 ffdb 	bl	8006ea6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ef6:	f000 f95f 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000efe:	f006 f810 	bl	8006f22 <HAL_UARTEx_SetRxFifoThreshold>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f08:	f000 f956 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_USART3_UART_Init+0x90>)
 8000f0e:	f005 ff91 	bl	8006e34 <HAL_UARTEx_DisableFifoMode>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 f94e 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000088 	.word	0x20000088
 8000f24:	40004800 	.word	0x40004800

08000f28 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b94      	ldr	r3, [pc, #592]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a93      	ldr	r2, [pc, #588]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b91      	ldr	r3, [pc, #580]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b8e      	ldr	r3, [pc, #568]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a8d      	ldr	r2, [pc, #564]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b8b      	ldr	r3, [pc, #556]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	4b88      	ldr	r3, [pc, #544]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b85      	ldr	r3, [pc, #532]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b82      	ldr	r3, [pc, #520]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a81      	ldr	r2, [pc, #516]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b7f      	ldr	r3, [pc, #508]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b7c      	ldr	r3, [pc, #496]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a7b      	ldr	r2, [pc, #492]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b79      	ldr	r3, [pc, #484]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b76      	ldr	r3, [pc, #472]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a75      	ldr	r2, [pc, #468]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <MX_GPIO_Init+0x268>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f240 1105 	movw	r1, #261	; 0x105
 8000fe4:	486f      	ldr	r0, [pc, #444]	; (80011a4 <MX_GPIO_Init+0x26c>)
 8000fe6:	f002 fa61 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000fea:	2200      	movs	r2, #0
 8000fec:	f248 111c 	movw	r1, #33052	; 0x811c
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f002 fa5a 	bl	80034ac <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000ffe:	486a      	ldr	r0, [pc, #424]	; (80011a8 <MX_GPIO_Init+0x270>)
 8001000:	f002 fa54 	bl	80034ac <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f242 0183 	movw	r1, #8323	; 0x2083
 800100a:	4868      	ldr	r0, [pc, #416]	; (80011ac <MX_GPIO_Init+0x274>)
 800100c:	f002 fa4e 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001016:	4866      	ldr	r0, [pc, #408]	; (80011b0 <MX_GPIO_Init+0x278>)
 8001018:	f002 fa48 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800101c:	f240 1305 	movw	r3, #261	; 0x105
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	485b      	ldr	r0, [pc, #364]	; (80011a4 <MX_GPIO_Init+0x26c>)
 8001036:	f001 ffb5 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800103a:	237a      	movs	r3, #122	; 0x7a
 800103c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103e:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <MX_GPIO_Init+0x27c>)
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4855      	ldr	r0, [pc, #340]	; (80011a4 <MX_GPIO_Init+0x26c>)
 800104e:	f001 ffa9 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001052:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <MX_GPIO_Init+0x27c>)
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4852      	ldr	r0, [pc, #328]	; (80011b0 <MX_GPIO_Init+0x278>)
 8001068:	f001 ff9c 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800106c:	f248 131c 	movw	r3, #33052	; 0x811c
 8001070:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f001 ff8c 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <MX_GPIO_Init+0x27c>)
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	4842      	ldr	r0, [pc, #264]	; (80011a8 <MX_GPIO_Init+0x270>)
 80010a0:	f001 ff80 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	483a      	ldr	r0, [pc, #232]	; (80011a8 <MX_GPIO_Init+0x270>)
 80010c0:	f001 ff70 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010c4:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010c8:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4832      	ldr	r0, [pc, #200]	; (80011a8 <MX_GPIO_Init+0x270>)
 80010de:	f001 ff61 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80010e2:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80010e6:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <MX_GPIO_Init+0x27c>)
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	482d      	ldr	r0, [pc, #180]	; (80011ac <MX_GPIO_Init+0x274>)
 80010f8:	f001 ff54 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80010fc:	f242 0383 	movw	r3, #8323	; 0x2083
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4825      	ldr	r0, [pc, #148]	; (80011ac <MX_GPIO_Init+0x274>)
 8001116:	f001 ff45 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800111a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	481f      	ldr	r0, [pc, #124]	; (80011b0 <MX_GPIO_Init+0x278>)
 8001134:	f001 ff36 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f001 ff28 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001154:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001166:	230a      	movs	r3, #10
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f001 ff16 	bl	8002fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2017      	movs	r0, #23
 800117e:	f001 fdce 	bl	8002d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001182:	2017      	movs	r0, #23
 8001184:	f001 fde7 	bl	8002d56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f001 fdc6 	bl	8002d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	; 0x28
 8001194:	f001 fddf 	bl	8002d56 <HAL_NVIC_EnableIRQ>

}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48001000 	.word	0x48001000
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000c00 	.word	0x48000c00
 80011b0:	48000800 	.word	0x48000800
 80011b4:	10110000 	.word	0x10110000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011be:	e7fe      	b.n	80011be <Error_Handler+0x6>

080011c0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <I2Cx_MspInit+0xa8>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <I2Cx_MspInit+0xa8>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <I2Cx_MspInit+0xa8>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80011e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80011f2:	2304      	movs	r3, #4
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	481b      	ldr	r0, [pc, #108]	; (800126c <I2Cx_MspInit+0xac>)
 80011fe:	f001 fed1 	bl	8002fa4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <I2Cx_MspInit+0xac>)
 800120a:	f001 fecb 	bl	8002fa4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <I2Cx_MspInit+0xa8>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <I2Cx_MspInit+0xa8>)
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001218:	6593      	str	r3, [r2, #88]	; 0x58
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <I2Cx_MspInit+0xa8>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <I2Cx_MspInit+0xa8>)
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <I2Cx_MspInit+0xa8>)
 800122c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001230:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <I2Cx_MspInit+0xa8>)
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <I2Cx_MspInit+0xa8>)
 8001238:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800123c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	210f      	movs	r1, #15
 8001242:	2021      	movs	r0, #33	; 0x21
 8001244:	f001 fd6b 	bl	8002d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001248:	2021      	movs	r0, #33	; 0x21
 800124a:	f001 fd84 	bl	8002d56 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	210f      	movs	r1, #15
 8001252:	2022      	movs	r0, #34	; 0x22
 8001254:	f001 fd63 	bl	8002d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001258:	2022      	movs	r0, #34	; 0x22
 800125a:	f001 fd7c 	bl	8002d56 <HAL_NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	48000400 	.word	0x48000400

08001270 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <I2Cx_Init+0x54>)
 800127c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <I2Cx_Init+0x58>)
 8001282:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff89 	bl	80011c0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f002 f937 	bl	8003522 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f002 fe3c 	bl	8003f34 <HAL_I2CEx_ConfigAnalogFilter>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40005800 	.word	0x40005800
 80012c8:	00702681 	.word	0x00702681

080012cc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	72fb      	strb	r3, [r7, #11]
 80012de:	460b      	mov	r3, r1
 80012e0:	813b      	strh	r3, [r7, #8]
 80012e2:	4613      	mov	r3, r2
 80012e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	b299      	uxth	r1, r3
 80012ee:	88f8      	ldrh	r0, [r7, #6]
 80012f0:	893a      	ldrh	r2, [r7, #8]
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4603      	mov	r3, r0
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f002 fae0 	bl	80038c8 <HAL_I2C_Mem_Read>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d004      	beq.n	800131c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f832 	bl	8001380 <I2Cx_Error>
  }
  return status;
 800131c:	7dfb      	ldrb	r3, [r7, #23]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b08a      	sub	sp, #40	; 0x28
 800132a:	af04      	add	r7, sp, #16
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	4608      	mov	r0, r1
 8001330:	4611      	mov	r1, r2
 8001332:	461a      	mov	r2, r3
 8001334:	4603      	mov	r3, r0
 8001336:	72fb      	strb	r3, [r7, #11]
 8001338:	460b      	mov	r3, r1
 800133a:	813b      	strh	r3, [r7, #8]
 800133c:	4613      	mov	r3, r2
 800133e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	b299      	uxth	r1, r3
 8001348:	88f8      	ldrh	r0, [r7, #6]
 800134a:	893a      	ldrh	r2, [r7, #8]
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4603      	mov	r3, r0
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f002 f99f 	bl	80036a0 <HAL_I2C_Mem_Write>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800136c:	7afb      	ldrb	r3, [r7, #11]
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f805 	bl	8001380 <I2Cx_Error>
  }
  return status;
 8001376:	7dfb      	ldrb	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f002 f957 	bl	8003640 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff6c 	bl	8001270 <I2Cx_Init>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <SENSOR_IO_Init+0x10>)
 80013a6:	f7ff ff63 	bl	8001270 <I2Cx_Init>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000594 	.word	0x20000594

080013b4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	460b      	mov	r3, r1
 80013c0:	71bb      	strb	r3, [r7, #6]
 80013c2:	4613      	mov	r3, r2
 80013c4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80013c6:	79bb      	ldrb	r3, [r7, #6]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	79f9      	ldrb	r1, [r7, #7]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	1d7b      	adds	r3, r7, #5
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <SENSOR_IO_Write+0x30>)
 80013d8:	f7ff ffa5 	bl	8001326 <I2Cx_WriteMultiple>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000594 	.word	0x20000594

080013e8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	460a      	mov	r2, r1
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	4613      	mov	r3, r2
 80013f6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	79f9      	ldrb	r1, [r7, #7]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <SENSOR_IO_Read+0x38>)
 8001410:	f7ff ff5c 	bl	80012cc <I2Cx_ReadMultiple>

  return read_value;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000594 	.word	0x20000594

08001424 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af02      	add	r7, sp, #8
 800142a:	603a      	str	r2, [r7, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	460b      	mov	r3, r1
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	b29a      	uxth	r2, r3
 800143e:	79f9      	ldrb	r1, [r7, #7]
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	4804      	ldr	r0, [pc, #16]	; (800145c <SENSOR_IO_ReadMultiple+0x38>)
 800144c:	f7ff ff3e 	bl	80012cc <I2Cx_ReadMultiple>
 8001450:	4603      	mov	r3, r0
 8001452:	b29b      	uxth	r3, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000594 	.word	0x20000594

08001460 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800146a:	2300      	movs	r3, #0
 800146c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <BSP_ACCELERO_Init+0x74>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4798      	blx	r3
 8001474:	4603      	mov	r3, r0
 8001476:	2b6a      	cmp	r3, #106	; 0x6a
 8001478:	d002      	beq.n	8001480 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e024      	b.n	80014ca <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <BSP_ACCELERO_Init+0x78>)
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <BSP_ACCELERO_Init+0x74>)
 8001484:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001486:	2330      	movs	r3, #48	; 0x30
 8001488:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800148e:	2300      	movs	r3, #0
 8001490:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800149e:	797a      	ldrb	r2, [r7, #5]
 80014a0:	7abb      	ldrb	r3, [r7, #10]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80014a8:	7a3b      	ldrb	r3, [r7, #8]
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <BSP_ACCELERO_Init+0x78>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	89ba      	ldrh	r2, [r7, #12]
 80014c6:	4610      	mov	r0, r2
 80014c8:	4798      	blx	r3
  }  

  return ret;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000000 	.word	0x20000000
 80014d8:	2000005c 	.word	0x2000005c

080014dc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
    }
  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000005c 	.word	0x2000005c

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_MspInit+0x44>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_MspInit+0x44>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6613      	str	r3, [r2, #96]	; 0x60
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_MspInit+0x44>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x44>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x44>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6593      	str	r3, [r2, #88]	; 0x58
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x44>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <HAL_ADC_MspInit+0x74>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d123      	bne.n	80015be <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_ADC_MspInit+0x78>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_ADC_MspInit+0x78>)
 800157c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_ADC_MspInit+0x78>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_ADC_MspInit+0x78>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_ADC_MspInit+0x78>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_ADC_MspInit+0x78>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80015a6:	233f      	movs	r3, #63	; 0x3f
 80015a8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015aa:	230b      	movs	r3, #11
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_ADC_MspInit+0x7c>)
 80015ba:	f001 fcf3 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	50040000 	.word	0x50040000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000800 	.word	0x48000800

080015d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_DFSDM_ChannelMspInit+0x84>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d12d      	bne.n	8001650 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_DFSDM_ChannelMspInit+0x88>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_DFSDM_ChannelMspInit+0x88>)
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_DFSDM_ChannelMspInit+0x88>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_DFSDM_ChannelMspInit+0x88>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001624:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001636:	2306      	movs	r3, #6
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001642:	f001 fcaf 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a02      	ldr	r2, [pc, #8]	; (8001658 <HAL_DFSDM_ChannelMspInit+0x84>)
 800164e:	6013      	str	r3, [r2, #0]
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000060 	.word	0x20000060
 800165c:	40021000 	.word	0x40021000
 8001660:	48001000 	.word	0x48001000

08001664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	; 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <HAL_I2C_MspInit+0xdc>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d129      	bne.n	80016da <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800169e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b0:	2304      	movs	r3, #4
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4823      	ldr	r0, [pc, #140]	; (8001748 <HAL_I2C_MspInit+0xe4>)
 80016bc:	f001 fc72 	bl	8002fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ca:	6593      	str	r3, [r2, #88]	; 0x58
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016d8:	e02d      	b.n	8001736 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_I2C_MspInit+0xe8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d128      	bne.n	8001736 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a16      	ldr	r2, [pc, #88]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80016fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001706:	2301      	movs	r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800170e:	2304      	movs	r3, #4
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <HAL_I2C_MspInit+0xe4>)
 800171a:	f001 fc43 	bl	8002fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 8001724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001728:	6593      	str	r3, [r2, #88]	; 0x58
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_I2C_MspInit+0xe0>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	bf00      	nop
 8001738:	3730      	adds	r7, #48	; 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40005400 	.word	0x40005400
 8001744:	40021000 	.word	0x40021000
 8001748:	48000400 	.word	0x48000400
 800174c:	40005800 	.word	0x40005800

08001750 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <HAL_I2C_MspDeInit+0x68>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d110      	bne.n	8001784 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_I2C_MspDeInit+0x6c>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_I2C_MspDeInit+0x6c>)
 8001768:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800176c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 800176e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001772:	4813      	ldr	r0, [pc, #76]	; (80017c0 <HAL_I2C_MspDeInit+0x70>)
 8001774:	f001 fda8 	bl	80032c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177c:	4810      	ldr	r0, [pc, #64]	; (80017c0 <HAL_I2C_MspDeInit+0x70>)
 800177e:	f001 fda3 	bl	80032c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001782:	e014      	b.n	80017ae <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_I2C_MspDeInit+0x74>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10f      	bne.n	80017ae <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_I2C_MspDeInit+0x6c>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_I2C_MspDeInit+0x6c>)
 8001794:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001798:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800179a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <HAL_I2C_MspDeInit+0x70>)
 80017a0:	f001 fd92 	bl	80032c8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80017a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_I2C_MspDeInit+0x70>)
 80017aa:	f001 fd8d 	bl	80032c8 <HAL_GPIO_DeInit>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000400 	.word	0x48000400
 80017c4:	40005800 	.word	0x40005800

080017c8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_OSPI_MspInit+0x94>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d134      	bne.n	8001854 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 80017f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 8001804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6513      	str	r3, [r2, #80]	; 0x50
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 8001810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_OSPI_MspInit+0x98>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001832:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001836:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001844:	230a      	movs	r3, #10
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_OSPI_MspInit+0x9c>)
 8001850:	f001 fba8 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	a0001000 	.word	0xa0001000
 8001860:	40021000 	.word	0x40021000
 8001864:	48001000 	.word	0x48001000

08001868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <HAL_SPI_MspInit+0xdc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d129      	bne.n	80018de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	4a2e      	ldr	r2, [pc, #184]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 8001890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001894:	6613      	str	r3, [r2, #96]	; 0x60
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a28      	ldr	r2, [pc, #160]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80018ba:	23e0      	movs	r3, #224	; 0xe0
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ca:	2305      	movs	r3, #5
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f001 fb64 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018dc:	e02d      	b.n	800193a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_SPI_MspInit+0xe4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d128      	bne.n	800193a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	4a16      	ldr	r2, [pc, #88]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 80018ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f2:	6593      	str	r3, [r2, #88]	; 0x58
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_SPI_MspInit+0xe0>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001918:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800192a:	2306      	movs	r3, #6
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4806      	ldr	r0, [pc, #24]	; (8001950 <HAL_SPI_MspInit+0xe8>)
 8001936:	f001 fb35 	bl	8002fa4 <HAL_GPIO_Init>
}
 800193a:	bf00      	nop
 800193c:	3730      	adds	r7, #48	; 0x30
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40013000 	.word	0x40013000
 8001948:	40021000 	.word	0x40021000
 800194c:	40003c00 	.word	0x40003c00
 8001950:	48000800 	.word	0x48000800

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b090      	sub	sp, #64	; 0x40
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <HAL_UART_MspInit+0x194>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d129      	bne.n	80019ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a5c      	ldr	r2, [pc, #368]	; (8001aec <HAL_UART_MspInit+0x198>)
 800197c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
 8001982:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a56      	ldr	r2, [pc, #344]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b54      	ldr	r3, [pc, #336]	; (8001aec <HAL_UART_MspInit+0x198>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80019a6:	2303      	movs	r3, #3
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019b6:	2308      	movs	r3, #8
 80019b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c4:	f001 faee 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019c8:	e089      	b.n	8001ade <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_UART_MspInit+0x19c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d128      	bne.n	8001a26 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d4:	4b45      	ldr	r3, [pc, #276]	; (8001aec <HAL_UART_MspInit+0x198>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	4a44      	ldr	r2, [pc, #272]	; (8001aec <HAL_UART_MspInit+0x198>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019de:	6613      	str	r3, [r2, #96]	; 0x60
 80019e0:	4b42      	ldr	r3, [pc, #264]	; (8001aec <HAL_UART_MspInit+0x198>)
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_UART_MspInit+0x198>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a3e      	ldr	r2, [pc, #248]	; (8001aec <HAL_UART_MspInit+0x198>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <HAL_UART_MspInit+0x198>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a14:	2307      	movs	r3, #7
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4835      	ldr	r0, [pc, #212]	; (8001af4 <HAL_UART_MspInit+0x1a0>)
 8001a20:	f001 fac0 	bl	8002fa4 <HAL_GPIO_Init>
}
 8001a24:	e05b      	b.n	8001ade <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a33      	ldr	r2, [pc, #204]	; (8001af8 <HAL_UART_MspInit+0x1a4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d128      	bne.n	8001a82 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	4a2d      	ldr	r2, [pc, #180]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a60:	2378      	movs	r3, #120	; 0x78
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a70:	2307      	movs	r3, #7
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4820      	ldr	r0, [pc, #128]	; (8001afc <HAL_UART_MspInit+0x1a8>)
 8001a7c:	f001 fa92 	bl	8002fa4 <HAL_GPIO_Init>
}
 8001a80:	e02d      	b.n	8001ade <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_UART_MspInit+0x1ac>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d128      	bne.n	8001ade <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_UART_MspInit+0x198>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001abc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <HAL_UART_MspInit+0x1a8>)
 8001ada:	f001 fa63 	bl	8002fa4 <HAL_GPIO_Init>
}
 8001ade:	bf00      	nop
 8001ae0:	3740      	adds	r7, #64	; 0x40
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40004c00 	.word	0x40004c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40013800 	.word	0x40013800
 8001af4:	48000400 	.word	0x48000400
 8001af8:	40004400 	.word	0x40004400
 8001afc:	48000c00 	.word	0x48000c00
 8001b00:	40004800 	.word	0x40004800

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <NMI_Handler+0x4>

08001b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <MemManage_Handler+0x4>

08001b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b50:	f000 f8e4 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b5c:	2020      	movs	r0, #32
 8001b5e:	f001 fcbd 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b62:	2040      	movs	r0, #64	; 0x40
 8001b64:	f001 fcba 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b68:	2080      	movs	r0, #128	; 0x80
 8001b6a:	f001 fcb7 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b72:	f001 fcb3 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b82:	f001 fcab 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b8a:	f001 fca7 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b92:	f001 fca3 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b9a:	f001 fc9f 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ba2:	f001 fc9b 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ba6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001baa:	f001 fc97 	bl	80034dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <SystemInit+0x64>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <SystemInit+0x64>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <SystemInit+0x68>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <SystemInit+0x68>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <SystemInit+0x68>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <SystemInit+0x68>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <SystemInit+0x68>)
 8001be0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001be4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001be8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <SystemInit+0x68>)
 8001bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <SystemInit+0x68>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <SystemInit+0x68>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <SystemInit+0x68>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SystemInit+0x64>)
 8001c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	40021000 	.word	0x40021000

08001c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c24:	f7ff ffc6 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c2a:	e003      	b.n	8001c34 <LoopCopyDataInit>

08001c2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c32:	3104      	adds	r1, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c34:	480a      	ldr	r0, [pc, #40]	; (8001c60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c3c:	d3f6      	bcc.n	8001c2c <CopyDataInit>
	ldr	r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c40:	e002      	b.n	8001c48 <LoopFillZerobss>

08001c42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c44:	f842 3b04 	str.w	r3, [r2], #4

08001c48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <LoopForever+0x16>)
	cmp	r2, r3
 8001c4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c4c:	d3f9      	bcc.n	8001c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f005 fa0f 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c52:	f7fe fd6d 	bl	8000730 <main>

08001c56 <LoopForever>:

LoopForever:
    b LoopForever
 8001c56:	e7fe      	b.n	8001c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c58:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001c5c:	08007160 	.word	0x08007160
	ldr	r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c64:	20000040 	.word	0x20000040
	ldr	r2, =_sbss
 8001c68:	20000040 	.word	0x20000040
	ldr	r3, = _ebss
 8001c6c:	200005e4 	.word	0x200005e4

08001c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_IRQHandler>

08001c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f001 f843 	bl	8002d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f80e 	bl	8001ca4 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	e001      	b.n	8001c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c94:	f7ff fc3a 	bl	800150c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c98:	79fb      	ldrb	r3, [r7, #7]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_InitTick+0x6c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d023      	beq.n	8001d00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_InitTick+0x70>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_InitTick+0x6c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 f84f 	bl	8002d72 <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d809      	bhi.n	8001cf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f001 f819 	bl	8002d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_InitTick+0x74>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e007      	b.n	8001d04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e004      	b.n	8001d04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e001      	b.n	8001d04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000003c 	.word	0x2000003c
 8001d14:	20000034 	.word	0x20000034
 8001d18:	20000038 	.word	0x20000038

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	2000003c 	.word	0x2000003c
 8001d40:	200005e0 	.word	0x200005e0

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200005e0 	.word	0x200005e0

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_Delay+0x40>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000003c 	.word	0x2000003c

08001da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3360      	adds	r3, #96	; 0x60
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <LL_ADC_SetOffset+0x44>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	03fff000 	.word	0x03fff000

08001e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3360      	adds	r3, #96	; 0x60
 8001e5e:	461a      	mov	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3360      	adds	r3, #96	; 0x60
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	615a      	str	r2, [r3, #20]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3330      	adds	r3, #48	; 0x30
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	4413      	add	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	211f      	movs	r1, #31
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	f003 011f 	and.w	r1, r3, #31
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	0d1b      	lsrs	r3, r3, #20
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2107      	movs	r1, #7
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0d1b      	lsrs	r3, r3, #20
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0318 	and.w	r3, r3, #24
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fac:	40d9      	lsrs	r1, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	0007ffff 	.word	0x0007ffff

08001fd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002008:	d101      	bne.n	800200e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800202c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002030:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d101      	bne.n	80020d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e12d      	b.n	8002356 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fa23 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff67 	bl	8001ff4 <LL_ADC_IsDeepPowerDownEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff4d 	bl	8001fd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff82 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d113      	bne.n	800216e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff66 	bl	800201c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002150:	4b83      	ldr	r3, [pc, #524]	; (8002360 <HAL_ADC_Init+0x280>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	4a83      	ldr	r2, [pc, #524]	; (8002364 <HAL_ADC_Init+0x284>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002160:	e002      	b.n	8002168 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3b01      	subs	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f9      	bne.n	8002162 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff66 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff77 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80021a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 80c8 	bne.w	8002344 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80c4 	bne.w	8002344 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021c4:	f043 0202 	orr.w	r2, r3, #2
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff4b 	bl	800206c <LL_ADC_IsEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021dc:	4862      	ldr	r0, [pc, #392]	; (8002368 <HAL_ADC_Init+0x288>)
 80021de:	f7ff ff45 	bl	800206c <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4619      	mov	r1, r3
 80021ee:	485f      	ldr	r0, [pc, #380]	; (800236c <HAL_ADC_Init+0x28c>)
 80021f0:	f7ff fdd6 	bl	8001da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e5b      	ldrb	r3, [r3, #25]
 80021f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002204:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800220a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002212:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d106      	bne.n	8002230 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	3b01      	subs	r3, #1
 8002228:	045b      	lsls	r3, r3, #17
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_ADC_Init+0x290>)
 8002254:	4013      	ands	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	430b      	orrs	r3, r1
 800225e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff14 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 800226a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff21 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 8002276:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d140      	bne.n	8002300 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d13d      	bne.n	8002300 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800228e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002296:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a6:	f023 0306 	bic.w	r3, r3, #6
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d118      	bne.n	80022f0 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022d4:	4311      	orrs	r1, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022e0:	430a      	orrs	r2, r1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	e007      	b.n	8002300 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f023 010f 	bic.w	r1, r3, #15
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 020f 	bic.w	r2, r2, #15
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	659a      	str	r2, [r3, #88]	; 0x58
 8002342:	e007      	b.n	8002354 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002354:	7ffb      	ldrb	r3, [r7, #31]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000034 	.word	0x20000034
 8002364:	053e2d63 	.word	0x053e2d63
 8002368:	50040000 	.word	0x50040000
 800236c:	50040300 	.word	0x50040300
 8002370:	fff0c007 	.word	0xfff0c007

08002374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0b6      	sub	sp, #216	; 0xd8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x22>
 8002392:	2302      	movs	r3, #2
 8002394:	e3d4      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x7cc>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fe75 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 83b9 	bne.w	8002b22 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d824      	bhi.n	8002402 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	3b02      	subs	r3, #2
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d81b      	bhi.n	80023fa <HAL_ADC_ConfigChannel+0x86>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <HAL_ADC_ConfigChannel+0x54>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023e1 	.word	0x080023e1
 80023d0:	080023e9 	.word	0x080023e9
 80023d4:	080023f1 	.word	0x080023f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	220c      	movs	r2, #12
 80023dc:	605a      	str	r2, [r3, #4]
          break;
 80023de:	e011      	b.n	8002404 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2212      	movs	r2, #18
 80023e4:	605a      	str	r2, [r3, #4]
          break;
 80023e6:	e00d      	b.n	8002404 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2218      	movs	r2, #24
 80023ec:	605a      	str	r2, [r3, #4]
          break;
 80023ee:	e009      	b.n	8002404 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f6:	605a      	str	r2, [r3, #4]
          break;
 80023f8:	e004      	b.n	8002404 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2206      	movs	r2, #6
 80023fe:	605a      	str	r2, [r3, #4]
          break;
 8002400:	e000      	b.n	8002404 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002402:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	f7ff fd61 	bl	8001ed8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fe39 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002420:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe45 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 800242e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002432:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 81c1 	bne.w	80027be <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800243c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 81bc 	bne.w	80027be <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800244e:	d10f      	bne.n	8002470 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	f7ff fd68 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fd22 	bl	8001eb2 <LL_ADC_SetSamplingTimeCommonConfig>
 800246e:	e00e      	b.n	800248e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	461a      	mov	r2, r3
 800247e:	f7ff fd57 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fd12 	bl	8001eb2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00a      	beq.n	80024c6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6919      	ldr	r1, [r3, #16]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024c0:	f7ff fca2 	bl	8001e08 <LL_ADC_SetOffset>
 80024c4:	e17b      	b.n	80027be <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fcbf 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x17e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fcb4 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	e01e      	b.n	8002530 <HAL_ADC_ConfigChannel+0x1bc>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fca9 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e004      	b.n	800252e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d4>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	e018      	b.n	800257a <HAL_ADC_ConfigChannel+0x206>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800255c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002564:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e004      	b.n	800257a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800257a:	429a      	cmp	r2, r3
 800257c:	d106      	bne.n	800258c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fc78 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fc5c 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x244>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fc51 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 021f 	and.w	r2, r3, #31
 80025b6:	e01e      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x282>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc46 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80025e6:	2320      	movs	r3, #32
 80025e8:	e004      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80025ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_ConfigChannel+0x29a>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	e018      	b.n	8002640 <HAL_ADC_ConfigChannel+0x2cc>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002622:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800262a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002636:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fc15 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2102      	movs	r1, #2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fbf9 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_ADC_ConfigChannel+0x30a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2102      	movs	r1, #2
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fbee 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	0e9b      	lsrs	r3, r3, #26
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	e01e      	b.n	80026bc <HAL_ADC_ConfigChannel+0x348>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbe3 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800269c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e004      	b.n	80026ba <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80026b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x360>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	e016      	b.n	8002702 <HAL_ADC_ConfigChannel+0x38e>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e004      	b.n	8002702 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80026f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002702:	429a      	cmp	r2, r3
 8002704:	d106      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	2102      	movs	r1, #2
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fbb4 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2103      	movs	r1, #3
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fb98 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x3cc>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2103      	movs	r1, #3
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fb8d 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	e017      	b.n	8002770 <HAL_ADC_ConfigChannel+0x3fc>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2103      	movs	r1, #3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fb82 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800275a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800275c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x414>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	e011      	b.n	80027ac <HAL_ADC_ConfigChannel+0x438>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002798:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fb5f 	bl	8001e7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fc52 	bl	800206c <LL_ADC_IsEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 8140 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	461a      	mov	r2, r3
 80027de:	f7ff fbd3 	bl	8001f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a8f      	ldr	r2, [pc, #572]	; (8002a24 <HAL_ADC_ConfigChannel+0x6b0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	f040 8131 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x4a2>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0e9b      	lsrs	r3, r3, #26
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b09      	cmp	r3, #9
 800280c:	bf94      	ite	ls
 800280e:	2301      	movls	r3, #1
 8002810:	2300      	movhi	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	e019      	b.n	800284a <HAL_ADC_ConfigChannel+0x4d6>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002826:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e003      	b.n	800283a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2b09      	cmp	r3, #9
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284a:	2b00      	cmp	r3, #0
 800284c:	d079      	beq.n	8002942 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_ADC_ConfigChannel+0x4f6>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	3301      	adds	r3, #1
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002868:	e015      	b.n	8002896 <HAL_ADC_ConfigChannel+0x522>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x542>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	e017      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x572>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80028d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_ADC_ConfigChannel+0x598>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	e018      	b.n	800293e <HAL_ADC_ConfigChannel+0x5ca>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002924:	2320      	movs	r3, #32
 8002926:	e003      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293e:	430b      	orrs	r3, r1
 8002940:	e081      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <HAL_ADC_ConfigChannel+0x5ea>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	3301      	adds	r3, #1
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800295c:	e015      	b.n	800298a <HAL_ADC_ConfigChannel+0x616>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x636>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	e017      	b.n	80029da <HAL_ADC_ConfigChannel+0x666>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	61fb      	str	r3, [r7, #28]
  return result;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	ea42 0103 	orr.w	r1, r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x692>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	051b      	lsls	r3, r3, #20
 8002a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a04:	e01e      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x6d0>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	613b      	str	r3, [r7, #16]
  return result;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	e006      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x6bc>
 8002a22:	bf00      	nop
 8002a24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b1e      	subs	r3, #30
 8002a3e:	051b      	lsls	r3, r3, #20
 8002a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a44:	430b      	orrs	r3, r1
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6892      	ldr	r2, [r2, #8]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7ff fa70 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d06b      	beq.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5c:	483b      	ldr	r0, [pc, #236]	; (8002b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a5e:	f7ff f9c5 	bl	8001dec <LL_ADC_GetCommonPathInternalCh>
 8002a62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a39      	ldr	r2, [pc, #228]	; (8002b50 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d126      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d120      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d156      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a8e:	4619      	mov	r1, r3
 8002a90:	482e      	ldr	r0, [pc, #184]	; (8002b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a92:	f7ff f998 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <HAL_ADC_ConfigChannel+0x7e8>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	099a      	lsrs	r2, r3, #6
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aae:	e002      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f9      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002abc:	e03a      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <HAL_ADC_ConfigChannel+0x7ec>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d113      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x77c>
 8002ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10d      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d12a      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4818      	ldr	r0, [pc, #96]	; (8002b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002aea:	f7ff f96c 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aee:	e021      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_ADC_ConfigChannel+0x7f0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d11c      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b18:	4619      	mov	r1, r3
 8002b1a:	480c      	ldr	r0, [pc, #48]	; (8002b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b1c:	f7ff f953 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
 8002b20:	e008      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	37d8      	adds	r7, #216	; 0xd8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	80080000 	.word	0x80080000
 8002b4c:	50040300 	.word	0x50040300
 8002b50:	c7520000 	.word	0xc7520000
 8002b54:	50040000 	.word	0x50040000
 8002b58:	20000034 	.word	0x20000034
 8002b5c:	053e2d63 	.word	0x053e2d63
 8002b60:	cb840000 	.word	0xcb840000
 8002b64:	80000001 	.word	0x80000001

08002b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b84:	4013      	ands	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	60d3      	str	r3, [r2, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0307 	and.w	r3, r3, #7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db0b      	blt.n	8002bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4907      	ldr	r1, [pc, #28]	; (8002c04 <__NVIC_EnableIRQ+0x38>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2001      	movs	r0, #1
 8002bee:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db0a      	blt.n	8002c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	490c      	ldr	r1, [pc, #48]	; (8002c54 <__NVIC_SetPriority+0x4c>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c30:	e00a      	b.n	8002c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4908      	ldr	r1, [pc, #32]	; (8002c58 <__NVIC_SetPriority+0x50>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	440b      	add	r3, r1
 8002c46:	761a      	strb	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000e100 	.word	0xe000e100
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f1c3 0307 	rsb	r3, r3, #7
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	bf28      	it	cs
 8002c7a:	2304      	movcs	r3, #4
 8002c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d902      	bls.n	8002c8c <NVIC_EncodePriority+0x30>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3b03      	subs	r3, #3
 8002c8a:	e000      	b.n	8002c8e <NVIC_EncodePriority+0x32>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	4313      	orrs	r3, r2
         );
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd4:	d301      	bcc.n	8002cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00f      	b.n	8002cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <SysTick_Config+0x40>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce2:	210f      	movs	r1, #15
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f7ff ff8e 	bl	8002c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <SysTick_Config+0x40>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <SysTick_Config+0x40>)
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	e000e010 	.word	0xe000e010

08002d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ff29 	bl	8002b68 <__NVIC_SetPriorityGrouping>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d30:	f7ff ff3e 	bl	8002bb0 <__NVIC_GetPriorityGrouping>
 8002d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f7ff ff8e 	bl	8002c5c <NVIC_EncodePriority>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff5d 	bl	8002c08 <__NVIC_SetPriority>
}
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff31 	bl	8002bcc <__NVIC_EnableIRQ>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffa2 	bl	8002cc4 <SysTick_Config>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0ac      	b.n	8002ef8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f8b2 	bl	8002f0c <DFSDM_GetChannelFromInstance>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <HAL_DFSDM_ChannelInit+0x174>)
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e09f      	b.n	8002ef8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fe fc0b 	bl	80015d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <HAL_DFSDM_ChannelInit+0x178>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a4f      	ldr	r2, [pc, #316]	; (8002f04 <HAL_DFSDM_ChannelInit+0x178>)
 8002dc6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <HAL_DFSDM_ChannelInit+0x178>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d125      	bne.n	8002e1c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dda:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4948      	ldr	r1, [pc, #288]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a46      	ldr	r2, [pc, #280]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002df0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002df4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	791b      	ldrb	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d108      	bne.n	8002e10 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002dfe:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	493f      	ldr	r1, [pc, #252]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e10:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e1a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e2a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e3a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e40:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 020f 	bic.w	r2, r2, #15
 8002e58:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002e80:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6899      	ldr	r1, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f002 0207 	and.w	r2, r2, #7
 8002eac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f810 	bl	8002f0c <DFSDM_GetChannelFromInstance>
 8002eec:	4601      	mov	r1, r0
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_DFSDM_ChannelInit+0x174>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000068 	.word	0x20000068
 8002f04:	20000064 	.word	0x20000064
 8002f08:	40016000 	.word	0x40016000

08002f0c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <DFSDM_GetChannelFromInstance+0x7c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e02b      	b.n	8002f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <DFSDM_GetChannelFromInstance+0x80>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d102      	bne.n	8002f30 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e024      	b.n	8002f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <DFSDM_GetChannelFromInstance+0x84>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d102      	bne.n	8002f3e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e01d      	b.n	8002f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <DFSDM_GetChannelFromInstance+0x88>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d102      	bne.n	8002f4c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002f46:	2304      	movs	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e016      	b.n	8002f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <DFSDM_GetChannelFromInstance+0x8c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d102      	bne.n	8002f5a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002f54:	2305      	movs	r3, #5
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e00f      	b.n	8002f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <DFSDM_GetChannelFromInstance+0x90>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d102      	bne.n	8002f68 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002f62:	2306      	movs	r3, #6
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e008      	b.n	8002f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <DFSDM_GetChannelFromInstance+0x94>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d102      	bne.n	8002f76 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002f70:	2307      	movs	r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e001      	b.n	8002f7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002f76:	2303      	movs	r3, #3
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40016000 	.word	0x40016000
 8002f8c:	40016020 	.word	0x40016020
 8002f90:	40016040 	.word	0x40016040
 8002f94:	40016080 	.word	0x40016080
 8002f98:	400160a0 	.word	0x400160a0
 8002f9c:	400160c0 	.word	0x400160c0
 8002fa0:	400160e0 	.word	0x400160e0

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb2:	e166      	b.n	8003282 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8158 	beq.w	800327c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d00b      	beq.n	8002fec <HAL_GPIO_Init+0x48>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d007      	beq.n	8002fec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fe0:	2b11      	cmp	r3, #17
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b12      	cmp	r3, #18
 8002fea:	d130      	bne.n	800304e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003022:	2201      	movs	r2, #1
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 0201 	and.w	r2, r3, #1
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0xea>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b12      	cmp	r3, #18
 800308c:	d123      	bne.n	80030d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	6939      	ldr	r1, [r7, #16]
 80030d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0203 	and.w	r2, r3, #3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80b2 	beq.w	800327c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003118:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 800311a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311c:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6613      	str	r3, [r2, #96]	; 0x60
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003130:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_GPIO_Init+0x300>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	220f      	movs	r2, #15
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800315a:	d02b      	beq.n	80031b4 <HAL_GPIO_Init+0x210>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_GPIO_Init+0x304>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d025      	beq.n	80031b0 <HAL_GPIO_Init+0x20c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a51      	ldr	r2, [pc, #324]	; (80032ac <HAL_GPIO_Init+0x308>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d01f      	beq.n	80031ac <HAL_GPIO_Init+0x208>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a50      	ldr	r2, [pc, #320]	; (80032b0 <HAL_GPIO_Init+0x30c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d019      	beq.n	80031a8 <HAL_GPIO_Init+0x204>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a4f      	ldr	r2, [pc, #316]	; (80032b4 <HAL_GPIO_Init+0x310>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <HAL_GPIO_Init+0x200>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <HAL_GPIO_Init+0x314>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00d      	beq.n	80031a0 <HAL_GPIO_Init+0x1fc>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_GPIO_Init+0x318>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <HAL_GPIO_Init+0x1f8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <HAL_GPIO_Init+0x31c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_GPIO_Init+0x1f4>
 8003194:	2307      	movs	r3, #7
 8003196:	e00e      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 8003198:	2308      	movs	r3, #8
 800319a:	e00c      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 800319c:	2306      	movs	r3, #6
 800319e:	e00a      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 80031a0:	2305      	movs	r3, #5
 80031a2:	e008      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 80031a4:	2304      	movs	r3, #4
 80031a6:	e006      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 80031a8:	2303      	movs	r3, #3
 80031aa:	e004      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_GPIO_Init+0x212>
 80031b4:	2300      	movs	r3, #0
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	f002 0203 	and.w	r2, r2, #3
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	4093      	lsls	r3, r2
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031c6:	4937      	ldr	r1, [pc, #220]	; (80032a4 <HAL_GPIO_Init+0x300>)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031d4:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_GPIO_Init+0x320>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031f8:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <HAL_GPIO_Init+0x320>)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_GPIO_Init+0x320>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003222:	4a28      	ldr	r2, [pc, #160]	; (80032c4 <HAL_GPIO_Init+0x320>)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003228:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_GPIO_Init+0x320>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_GPIO_Init+0x320>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_GPIO_Init+0x320>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003276:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <HAL_GPIO_Init+0x320>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3301      	adds	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	f47f ae91 	bne.w	8002fb4 <HAL_GPIO_Init+0x10>
  }
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010000 	.word	0x40010000
 80032a8:	48000400 	.word	0x48000400
 80032ac:	48000800 	.word	0x48000800
 80032b0:	48000c00 	.word	0x48000c00
 80032b4:	48001000 	.word	0x48001000
 80032b8:	48001400 	.word	0x48001400
 80032bc:	48001800 	.word	0x48001800
 80032c0:	48001c00 	.word	0x48001c00
 80032c4:	40010400 	.word	0x40010400

080032c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032d6:	e0c9      	b.n	800346c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032d8:	2201      	movs	r2, #1
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80bc 	beq.w	8003466 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80032ee:	4a66      	ldr	r2, [pc, #408]	; (8003488 <HAL_GPIO_DeInit+0x1c0>)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003316:	d02b      	beq.n	8003370 <HAL_GPIO_DeInit+0xa8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a5c      	ldr	r2, [pc, #368]	; (800348c <HAL_GPIO_DeInit+0x1c4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d025      	beq.n	800336c <HAL_GPIO_DeInit+0xa4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a5b      	ldr	r2, [pc, #364]	; (8003490 <HAL_GPIO_DeInit+0x1c8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01f      	beq.n	8003368 <HAL_GPIO_DeInit+0xa0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a5a      	ldr	r2, [pc, #360]	; (8003494 <HAL_GPIO_DeInit+0x1cc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d019      	beq.n	8003364 <HAL_GPIO_DeInit+0x9c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a59      	ldr	r2, [pc, #356]	; (8003498 <HAL_GPIO_DeInit+0x1d0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_GPIO_DeInit+0x98>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_GPIO_DeInit+0x1d4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00d      	beq.n	800335c <HAL_GPIO_DeInit+0x94>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_GPIO_DeInit+0x1d8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <HAL_GPIO_DeInit+0x90>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_GPIO_DeInit+0x1dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d101      	bne.n	8003354 <HAL_GPIO_DeInit+0x8c>
 8003350:	2307      	movs	r3, #7
 8003352:	e00e      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 8003354:	2308      	movs	r3, #8
 8003356:	e00c      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 8003358:	2306      	movs	r3, #6
 800335a:	e00a      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 800335c:	2305      	movs	r3, #5
 800335e:	e008      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 8003360:	2304      	movs	r3, #4
 8003362:	e006      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 8003364:	2303      	movs	r3, #3
 8003366:	e004      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 8003368:	2302      	movs	r3, #2
 800336a:	e002      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_GPIO_DeInit+0xaa>
 8003370:	2300      	movs	r3, #0
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	f002 0203 	and.w	r2, r2, #3
 8003378:	0092      	lsls	r2, r2, #2
 800337a:	4093      	lsls	r3, r2
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	429a      	cmp	r2, r3
 8003380:	d132      	bne.n	80033e8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003382:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	43db      	mvns	r3, r3
 800338a:	4947      	ldr	r1, [pc, #284]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 800338c:	4013      	ands	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003390:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	4943      	ldr	r1, [pc, #268]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 800339a:	4013      	ands	r3, r2
 800339c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800339e:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	4940      	ldr	r1, [pc, #256]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80033ac:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	493c      	ldr	r1, [pc, #240]	; (80034a8 <HAL_GPIO_DeInit+0x1e0>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033ca:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <HAL_GPIO_DeInit+0x1c0>)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	3302      	adds	r3, #2
 80033d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43da      	mvns	r2, r3
 80033da:	482b      	ldr	r0, [pc, #172]	; (8003488 <HAL_GPIO_DeInit+0x1c0>)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	400a      	ands	r2, r1
 80033e2:	3302      	adds	r3, #2
 80033e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2103      	movs	r1, #3
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	08da      	lsrs	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3208      	adds	r2, #8
 8003404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	220f      	movs	r2, #15
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	08d2      	lsrs	r2, r2, #3
 800341c:	4019      	ands	r1, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3208      	adds	r2, #8
 8003422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2103      	movs	r1, #3
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	2101      	movs	r1, #1
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2103      	movs	r1, #3
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	401a      	ands	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3301      	adds	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	f47f af2f 	bne.w	80032d8 <HAL_GPIO_DeInit+0x10>
  }
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	48000400 	.word	0x48000400
 8003490:	48000800 	.word	0x48000800
 8003494:	48000c00 	.word	0x48000c00
 8003498:	48001000 	.word	0x48001000
 800349c:	48001400 	.word	0x48001400
 80034a0:	48001800 	.word	0x48001800
 80034a4:	48001c00 	.word	0x48001c00
 80034a8:	40010400 	.word	0x40010400

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034c8:	e002      	b.n	80034d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034f2:	4a05      	ldr	r2, [pc, #20]	; (8003508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f806 	bl	800350c <HAL_GPIO_EXTI_Callback>
  }
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40010400 	.word	0x40010400

0800350c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e081      	b.n	8003638 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fe f88b 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2224      	movs	r2, #36	; 0x24
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003572:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003582:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	e006      	b.n	80035aa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d104      	bne.n	80035bc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	ea42 0103 	orr.w	r1, r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	021a      	lsls	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69d9      	ldr	r1, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e021      	b.n	8003696 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2224      	movs	r2, #36	; 0x24
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe f870 	bl	8001750 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	f040 80f9 	bne.w	80038ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_I2C_Mem_Write+0x34>
 80036ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0ed      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Mem_Write+0x4e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0e6      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f6:	f7fe fb25 	bl	8001d44 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2319      	movs	r3, #25
 8003702:	2201      	movs	r2, #1
 8003704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fac3 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0d1      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2221      	movs	r2, #33	; 0x21
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003740:	88f8      	ldrh	r0, [r7, #6]
 8003742:	893a      	ldrh	r2, [r7, #8]
 8003744:	8979      	ldrh	r1, [r7, #10]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4603      	mov	r3, r0
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f9d3 	bl	8003afc <I2C_RequestMemoryWrite>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0a9      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	d90e      	bls.n	8003790 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	b2da      	uxtb	r2, r3
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	2300      	movs	r3, #0
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fba5 	bl	8003ed8 <I2C_TransferConfig>
 800378e:	e00f      	b.n	80037b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	8979      	ldrh	r1, [r7, #10]
 80037a2:	2300      	movs	r3, #0
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb94 	bl	8003ed8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 faad 	bl	8003d14 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e07b      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d034      	beq.n	8003868 <HAL_I2C_Mem_Write+0x1c8>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	2b00      	cmp	r3, #0
 8003804:	d130      	bne.n	8003868 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	2200      	movs	r2, #0
 800380e:	2180      	movs	r1, #128	; 0x80
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fa3f 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e04d      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2bff      	cmp	r3, #255	; 0xff
 8003828:	d90e      	bls.n	8003848 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	22ff      	movs	r2, #255	; 0xff
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	b2da      	uxtb	r2, r3
 8003836:	8979      	ldrh	r1, [r7, #10]
 8003838:	2300      	movs	r3, #0
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fb49 	bl	8003ed8 <I2C_TransferConfig>
 8003846:	e00f      	b.n	8003868 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	b2da      	uxtb	r2, r3
 8003858:	8979      	ldrh	r1, [r7, #10]
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fb38 	bl	8003ed8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d19e      	bne.n	80037b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fa8c 	bl	8003d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e01a      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2220      	movs	r2, #32
 800388c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_I2C_Mem_Write+0x224>)
 800389a:	400b      	ands	r3, r1
 800389c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e000      	b.n	80038bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	fe00e800 	.word	0xfe00e800

080038c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	817b      	strh	r3, [r7, #10]
 80038da:	460b      	mov	r3, r1
 80038dc:	813b      	strh	r3, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	f040 80fd 	bne.w	8003aea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_I2C_Mem_Read+0x34>
 80038f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0f1      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_I2C_Mem_Read+0x4e>
 8003912:	2302      	movs	r3, #2
 8003914:	e0ea      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800391e:	f7fe fa11 	bl	8001d44 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2319      	movs	r3, #25
 800392a:	2201      	movs	r2, #1
 800392c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f9af 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0d5      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2222      	movs	r2, #34	; 0x22
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003968:	88f8      	ldrh	r0, [r7, #6]
 800396a:	893a      	ldrh	r2, [r7, #8]
 800396c:	8979      	ldrh	r1, [r7, #10]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4603      	mov	r3, r0
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f913 	bl	8003ba4 <I2C_RequestMemoryRead>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0ad      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2bff      	cmp	r3, #255	; 0xff
 8003998:	d90e      	bls.n	80039b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	22ff      	movs	r2, #255	; 0xff
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <HAL_I2C_Mem_Read+0x22c>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa91 	bl	8003ed8 <I2C_TransferConfig>
 80039b6:	e00f      	b.n	80039d8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	8979      	ldrh	r1, [r7, #10]
 80039ca:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <HAL_I2C_Mem_Read+0x22c>)
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fa80 	bl	8003ed8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	2200      	movs	r2, #0
 80039e0:	2104      	movs	r1, #4
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f956 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07c      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d034      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x1d0>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d130      	bne.n	8003a98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2180      	movs	r1, #128	; 0x80
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f927 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e04d      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2bff      	cmp	r3, #255	; 0xff
 8003a58:	d90e      	bls.n	8003a78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	22ff      	movs	r2, #255	; 0xff
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	8979      	ldrh	r1, [r7, #10]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fa31 	bl	8003ed8 <I2C_TransferConfig>
 8003a76:	e00f      	b.n	8003a98 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	8979      	ldrh	r1, [r7, #10]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fa20 	bl	8003ed8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d19a      	bne.n	80039d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f974 	bl	8003d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e01a      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2220      	movs	r2, #32
 8003abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_I2C_Mem_Read+0x230>)
 8003aca:	400b      	ands	r3, r1
 8003acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	80002400 	.word	0x80002400
 8003af8:	fe00e800 	.word	0xfe00e800

08003afc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	817b      	strh	r3, [r7, #10]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	813b      	strh	r3, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <I2C_RequestMemoryWrite+0xa4>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f9d7 	bl	8003ed8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f8f0 	bl	8003d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e02c      	b.n	8003b98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b44:	893b      	ldrh	r3, [r7, #8]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4e:	e015      	b.n	8003b7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b50:	893b      	ldrh	r3, [r7, #8]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f8d6 	bl	8003d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e012      	b.n	8003b98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b72:	893b      	ldrh	r3, [r7, #8]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f884 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	80002000 	.word	0x80002000

08003ba4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <I2C_RequestMemoryRead+0xa4>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f984 	bl	8003ed8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f89d 	bl	8003d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e02c      	b.n	8003c3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bea:	893b      	ldrh	r3, [r7, #8]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf4:	e015      	b.n	8003c22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bf6:	893b      	ldrh	r3, [r7, #8]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f883 	bl	8003d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e012      	b.n	8003c3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c18:	893b      	ldrh	r3, [r7, #8]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2140      	movs	r1, #64	; 0x40
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f831 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	80002000 	.word	0x80002000

08003c4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d103      	bne.n	8003c6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d007      	beq.n	8003c88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	619a      	str	r2, [r3, #24]
  }
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca4:	e022      	b.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d01e      	beq.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe f849 	bl	8001d44 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d113      	bne.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e00f      	b.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d0cd      	beq.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d20:	e02c      	b.n	8003d7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f870 	bl	8003e0c <I2C_IsAcknowledgeFailed>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e02a      	b.n	8003d8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d01e      	beq.n	8003d7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fe f801 	bl	8001d44 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d113      	bne.n	8003d7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e007      	b.n	8003d8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d1cb      	bne.n	8003d22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da0:	e028      	b.n	8003df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f830 	bl	8003e0c <I2C_IsAcknowledgeFailed>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e026      	b.n	8003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db6:	f7fd ffc5 	bl	8001d44 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e007      	b.n	8003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d1cf      	bne.n	8003da2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d151      	bne.n	8003eca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e26:	e022      	b.n	8003e6e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d01e      	beq.n	8003e6e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7fd ff88 	bl	8001d44 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <I2C_IsAcknowledgeFailed+0x3a>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d113      	bne.n	8003e6e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e02e      	b.n	8003ecc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d1d5      	bne.n	8003e28 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2210      	movs	r2, #16
 8003e82:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff fedd 	bl	8003c4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e9e:	400b      	ands	r3, r1
 8003ea0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f043 0204 	orr.w	r2, r3, #4
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	fe00e800 	.word	0xfe00e800

08003ed8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	817b      	strh	r3, [r7, #10]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	0d5b      	lsrs	r3, r3, #21
 8003ef4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <I2C_TransferConfig+0x58>)
 8003efa:	430b      	orrs	r3, r1
 8003efc:	43db      	mvns	r3, r3
 8003efe:	ea02 0103 	and.w	r1, r2, r3
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f08:	7a7b      	ldrb	r3, [r7, #9]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	03ff63ff 	.word	0x03ff63ff

08003f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d138      	bne.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e032      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d139      	bne.n	8004054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e033      	b.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2224      	movs	r2, #36	; 0x24
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800401c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004070:	f7fd fe68 	bl	8001d44 <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e092      	b.n	80041a8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 808b 	bne.w	80041a8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fb98 	bl	80017c8 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004098:	f241 3188 	movw	r1, #5000	; 0x1388
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f88b 	bl	80041b8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <HAL_OSPI_Init+0x150>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68d1      	ldr	r1, [r2, #12]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6912      	ldr	r2, [r2, #16]
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0412      	lsls	r2, r2, #16
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6952      	ldr	r2, [r2, #20]
 80040be:	3a01      	subs	r2, #1
 80040c0:	0212      	lsls	r2, r2, #8
 80040c2:	4311      	orrs	r1, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040c8:	4311      	orrs	r1, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	69d2      	ldr	r2, [r2, #28]
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0412      	lsls	r2, r2, #16
 80040e2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	2120      	movs	r1, #32
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fbb8 	bl	8004880 <OSPI_WaitFlagStateUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d146      	bne.n	80041a8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	1e5a      	subs	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004150:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d107      	bne.n	8004190 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0202 	orr.w	r2, r2, #2
 800418e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004198:	d103      	bne.n	80041a2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
 80041a0:	e002      	b.n	80041a8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	f8e0f8f4 	.word	0xf8e0f8f4

080041b8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b092      	sub	sp, #72	; 0x48
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a08      	ldr	r2, [pc, #32]	; (8004218 <HAL_OSPIM_Config+0x40>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d105      	bne.n	8004206 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004204:	e004      	b.n	8004210 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004206:	2301      	movs	r3, #1
 8004208:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004210:	2300      	movs	r3, #0
 8004212:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004216:	e01f      	b.n	8004258 <HAL_OSPIM_Config+0x80>
 8004218:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800421c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004220:	3301      	adds	r3, #1
 8004222:	b2d8      	uxtb	r0, r3
 8004224:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004228:	f107 0114 	add.w	r1, r7, #20
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	4619      	mov	r1, r3
 8004238:	f000 fb5a 	bl	80048f0 <OSPIM_GetConfig>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2208      	movs	r2, #8
 800424c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800424e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004252:	3301      	adds	r3, #1
 8004254:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004258:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800425c:	2b01      	cmp	r3, #1
 800425e:	d9dd      	bls.n	800421c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004260:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 82fe 	bne.w	8004866 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800426a:	4bcd      	ldr	r3, [pc, #820]	; (80045a0 <HAL_OSPIM_Config+0x3c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004276:	4bca      	ldr	r3, [pc, #808]	; (80045a0 <HAL_OSPIM_Config+0x3c8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4ac9      	ldr	r2, [pc, #804]	; (80045a0 <HAL_OSPIM_Config+0x3c8>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004282:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800428e:	4bc5      	ldr	r3, [pc, #788]	; (80045a4 <HAL_OSPIM_Config+0x3cc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800429a:	4bc2      	ldr	r3, [pc, #776]	; (80045a4 <HAL_OSPIM_Config+0x3cc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4ac1      	ldr	r2, [pc, #772]	; (80045a4 <HAL_OSPIM_Config+0x3cc>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80042a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80042aa:	f043 0302 	orr.w	r3, r3, #2
 80042ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80042b2:	49bd      	ldr	r1, [pc, #756]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 80042b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042c2:	4413      	add	r3, r2
 80042c4:	3b2c      	subs	r3, #44	; 0x2c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	48b5      	ldr	r0, [pc, #724]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 80042d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042e0:	4413      	add	r3, r2
 80042e2:	3b2c      	subs	r3, #44	; 0x2c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4403      	add	r3, r0
 80042f0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80042f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004300:	4413      	add	r3, r2
 8004302:	3b34      	subs	r3, #52	; 0x34
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80ac 	beq.w	8004464 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800430c:	49a6      	ldr	r1, [pc, #664]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 800430e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800431c:	4413      	add	r3, r2
 800431e:	3b34      	subs	r3, #52	; 0x34
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3b01      	subs	r3, #1
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	489f      	ldr	r0, [pc, #636]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 800432c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800433a:	4413      	add	r3, r2
 800433c:	3b34      	subs	r3, #52	; 0x34
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3b01      	subs	r3, #1
 8004342:	f021 0201 	bic.w	r2, r1, #1
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4403      	add	r3, r0
 800434a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800434c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800435a:	4413      	add	r3, r2
 800435c:	3b30      	subs	r3, #48	; 0x30
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01f      	beq.n	80043a4 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004364:	4990      	ldr	r1, [pc, #576]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 8004366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004374:	4413      	add	r3, r2
 8004376:	3b30      	subs	r3, #48	; 0x30
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3b01      	subs	r3, #1
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	4889      	ldr	r0, [pc, #548]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 8004384:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004392:	4413      	add	r3, r2
 8004394:	3b30      	subs	r3, #48	; 0x30
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	f021 0210 	bic.w	r2, r1, #16
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4403      	add	r3, r0
 80043a2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80043a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043b2:	4413      	add	r3, r2
 80043b4:	3b28      	subs	r3, #40	; 0x28
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80043bc:	497a      	ldr	r1, [pc, #488]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 80043be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043cc:	4413      	add	r3, r2
 80043ce:	3b28      	subs	r3, #40	; 0x28
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	4872      	ldr	r0, [pc, #456]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 80043e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043ee:	4413      	add	r3, r2
 80043f0:	3b28      	subs	r3, #40	; 0x28
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4403      	add	r3, r0
 8004402:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004412:	4413      	add	r3, r2
 8004414:	3b24      	subs	r3, #36	; 0x24
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d023      	beq.n	8004464 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800441c:	4962      	ldr	r1, [pc, #392]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 800441e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800442c:	4413      	add	r3, r2
 800442e:	3b24      	subs	r3, #36	; 0x24
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	485a      	ldr	r0, [pc, #360]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 8004440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800444e:	4413      	add	r3, r2
 8004450:	3b24      	subs	r3, #36	; 0x24
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3b01      	subs	r3, #1
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4403      	add	r3, r0
 8004462:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004478:	4413      	add	r3, r2
 800447a:	3b34      	subs	r3, #52	; 0x34
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4299      	cmp	r1, r3
 8004480:	d03c      	beq.n	80044fc <HAL_OSPIM_Config+0x324>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004496:	4413      	add	r3, r2
 8004498:	3b30      	subs	r3, #48	; 0x30
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4299      	cmp	r1, r3
 800449e:	d02d      	beq.n	80044fc <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6899      	ldr	r1, [r3, #8]
 80044a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044b4:	4413      	add	r3, r2
 80044b6:	3b2c      	subs	r3, #44	; 0x2c
 80044b8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80044ba:	4299      	cmp	r1, r3
 80044bc:	d01e      	beq.n	80044fc <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044d2:	4413      	add	r3, r2
 80044d4:	3b28      	subs	r3, #40	; 0x28
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4299      	cmp	r1, r3
 80044da:	d00f      	beq.n	80044fc <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6919      	ldr	r1, [r3, #16]
 80044e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044f0:	4413      	add	r3, r2
 80044f2:	3b24      	subs	r3, #36	; 0x24
 80044f4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80044f6:	4299      	cmp	r1, r3
 80044f8:	f040 80e0 	bne.w	80046bc <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80044fc:	492a      	ldr	r1, [pc, #168]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 80044fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800450e:	4413      	add	r3, r2
 8004510:	3b34      	subs	r3, #52	; 0x34
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3b01      	subs	r3, #1
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	4822      	ldr	r0, [pc, #136]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 800451e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800452e:	4413      	add	r3, r2
 8004530:	3b34      	subs	r3, #52	; 0x34
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3b01      	subs	r3, #1
 8004536:	f021 0201 	bic.w	r2, r1, #1
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4403      	add	r3, r0
 800453e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004540:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004550:	4413      	add	r3, r2
 8004552:	3b30      	subs	r3, #48	; 0x30
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d028      	beq.n	80045ac <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800455a:	4913      	ldr	r1, [pc, #76]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 800455c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800456c:	4413      	add	r3, r2
 800456e:	3b30      	subs	r3, #48	; 0x30
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3b01      	subs	r3, #1
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	480b      	ldr	r0, [pc, #44]	; (80045a8 <HAL_OSPIM_Config+0x3d0>)
 800457c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800458c:	4413      	add	r3, r2
 800458e:	3b30      	subs	r3, #48	; 0x30
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	f021 0210 	bic.w	r2, r1, #16
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4403      	add	r3, r0
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	e005      	b.n	80045ac <HAL_OSPIM_Config+0x3d4>
 80045a0:	a0001000 	.word	0xa0001000
 80045a4:	a0001400 	.word	0xa0001400
 80045a8:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80045ac:	49b1      	ldr	r1, [pc, #708]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80045ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045be:	4413      	add	r3, r2
 80045c0:	3b2c      	subs	r3, #44	; 0x2c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	48a9      	ldr	r0, [pc, #676]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80045ce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045de:	4413      	add	r3, r2
 80045e0:	3b2c      	subs	r3, #44	; 0x2c
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4403      	add	r3, r0
 80045ee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80045f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004600:	4413      	add	r3, r2
 8004602:	3b28      	subs	r3, #40	; 0x28
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d025      	beq.n	8004656 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800460a:	499a      	ldr	r1, [pc, #616]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 800460c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800461c:	4413      	add	r3, r2
 800461e:	3b28      	subs	r3, #40	; 0x28
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3b01      	subs	r3, #1
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	4891      	ldr	r0, [pc, #580]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004630:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004640:	4413      	add	r3, r2
 8004642:	3b28      	subs	r3, #40	; 0x28
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3b01      	subs	r3, #1
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4403      	add	r3, r0
 8004654:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004656:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004666:	4413      	add	r3, r2
 8004668:	3b24      	subs	r3, #36	; 0x24
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d025      	beq.n	80046bc <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004670:	4980      	ldr	r1, [pc, #512]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004672:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004682:	4413      	add	r3, r2
 8004684:	3b24      	subs	r3, #36	; 0x24
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3b01      	subs	r3, #1
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	4877      	ldr	r0, [pc, #476]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004696:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046a6:	4413      	add	r3, r2
 80046a8:	3b24      	subs	r3, #36	; 0x24
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4403      	add	r3, r0
 80046ba:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 80046bc:	4a6d      	ldr	r2, [pc, #436]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d0:	025b      	lsls	r3, r3, #9
 80046d2:	431a      	orrs	r2, r3
 80046d4:	4967      	ldr	r1, [pc, #412]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	3b01      	subs	r3, #1
 80046dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 80046e6:	4a63      	ldr	r2, [pc, #396]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 0203 	bic.w	r2, r3, #3
 80046f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	431a      	orrs	r2, r3
 80046fe:	495d      	ldr	r1, [pc, #372]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d014      	beq.n	8004742 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8004718:	4a56      	ldr	r2, [pc, #344]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800472a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472c:	015b      	lsls	r3, r3, #5
 800472e:	431a      	orrs	r2, r3
 8004730:	4950      	ldr	r1, [pc, #320]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	f042 0210 	orr.w	r2, r2, #16
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d019      	beq.n	8004782 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800474e:	4a49      	ldr	r2, [pc, #292]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	3b01      	subs	r3, #1
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004766:	049b      	lsls	r3, r3, #18
 8004768:	431a      	orrs	r2, r3
 800476a:	4942      	ldr	r1, [pc, #264]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	3b01      	subs	r3, #1
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	e01c      	b.n	80047bc <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d018      	beq.n	80047bc <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 800478a:	4a3a      	ldr	r2, [pc, #232]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	3b01      	subs	r3, #1
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	069b      	lsls	r3, r3, #26
 80047a4:	431a      	orrs	r2, r3
 80047a6:	4933      	ldr	r1, [pc, #204]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d019      	beq.n	80047fc <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	049b      	lsls	r3, r3, #18
 80047e2:	431a      	orrs	r2, r3
 80047e4:	4923      	ldr	r1, [pc, #140]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	e01c      	b.n	8004836 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d018      	beq.n	8004836 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	3b01      	subs	r3, #1
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800481a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481c:	069b      	lsls	r3, r3, #26
 800481e:	431a      	orrs	r2, r3
 8004820:	4914      	ldr	r1, [pc, #80]	; (8004874 <HAL_OSPIM_Config+0x69c>)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	3b01      	subs	r3, #1
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004836:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_OSPIM_Config+0x6a0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <HAL_OSPIM_Config+0x6a0>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800484e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_OSPIM_Config+0x6a4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <HAL_OSPIM_Config+0x6a4>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004866:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800486a:	4618      	mov	r0, r3
 800486c:	3748      	adds	r7, #72	; 0x48
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	50061c00 	.word	0x50061c00
 8004878:	a0001000 	.word	0xa0001000
 800487c:	a0001400 	.word	0xa0001400

08004880 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004890:	e01a      	b.n	80048c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d016      	beq.n	80048c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fd fa53 	bl	8001d44 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048bc:	f043 0201 	orr.w	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e00e      	b.n	80048e6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d1d6      	bne.n	8004892 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	6039      	str	r1, [r7, #0]
 80048fa:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <OSPIM_GetConfig+0x26>
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d802      	bhi.n	8004916 <OSPIM_GetConfig+0x26>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]
 800491a:	e08e      	b.n	8004a3a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2200      	movs	r2, #0
 8004926:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d101      	bne.n	8004944 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8004940:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <OSPIM_GetConfig+0x158>)
 8004942:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e074      	b.n	8004a34 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800494a:	4a40      	ldr	r2, [pc, #256]	; (8004a4c <OSPIM_GetConfig+0x15c>)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4053      	eors	r3, r2
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4053      	eors	r3, r2
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4053      	eors	r3, r2
 80049a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d018      	beq.n	80049f2 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4053      	eors	r3, r2
 80049c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d111      	bne.n	80049f2 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3301      	adds	r3, #1
 80049dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e005      	b.n	80049f2 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3301      	adds	r3, #1
 80049ea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d018      	beq.n	8004a2e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4053      	eors	r3, r2
 8004a02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d111      	bne.n	8004a2e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	611a      	str	r2, [r3, #16]
 8004a20:	e005      	b.n	8004a2e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3301      	adds	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d987      	bls.n	800494a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	04040222 	.word	0x04040222
 8004a4c:	50061c00 	.word	0x50061c00

08004a50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40007000 	.word	0x40007000

08004a70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <HAL_PWREx_GetVoltageRange+0x3c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d102      	bne.n	8004a88 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a86:	e00b      	b.n	8004aa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_PWREx_GetVoltageRange+0x3c>)
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a96:	d102      	bne.n	8004a9e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9c:	e000      	b.n	8004aa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004a9e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40007000 	.word	0x40007000

08004ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d141      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004abe:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aca:	d131      	bne.n	8004b30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004acc:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad2:	4a46      	ldr	r2, [pc, #280]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004adc:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ae4:	4a41      	ldr	r2, [pc, #260]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004aec:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2232      	movs	r2, #50	; 0x32
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	4a3f      	ldr	r2, [pc, #252]	; (8004bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	0c9b      	lsrs	r3, r3, #18
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b02:	e002      	b.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b0a:	4b38      	ldr	r3, [pc, #224]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d102      	bne.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f2      	bne.n	8004b04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b1e:	4b33      	ldr	r3, [pc, #204]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d158      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e057      	b.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b30:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b40:	e04d      	b.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b48:	d141      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d131      	bne.n	8004bbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5e:	4a23      	ldr	r2, [pc, #140]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b68:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004b78:	4b1d      	ldr	r3, [pc, #116]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2232      	movs	r2, #50	; 0x32
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	0c9b      	lsrs	r3, r3, #18
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b8e:	e002      	b.n	8004b96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	d102      	bne.n	8004baa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f2      	bne.n	8004b90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb6:	d112      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e011      	b.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bcc:	e007      	b.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bd6:	4a05      	ldr	r2, [pc, #20]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bdc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	20000034 	.word	0x20000034
 8004bf4:	431bde83 	.word	0x431bde83

08004bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f000 bc16 	b.w	8005438 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c0c:	4ba0      	ldr	r3, [pc, #640]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c16:	4b9e      	ldr	r3, [pc, #632]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80e4 	beq.w	8004df6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4c>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	f040 808b 	bne.w	8004d52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	f040 8087 	bne.w	8004d52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c44:	4b92      	ldr	r3, [pc, #584]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x64>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e3ed      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	4b8b      	ldr	r3, [pc, #556]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_RCC_OscConfig+0x7e>
 8004c6c:	4b88      	ldr	r3, [pc, #544]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c74:	e005      	b.n	8004c82 <HAL_RCC_OscConfig+0x8a>
 8004c76:	4b86      	ldr	r3, [pc, #536]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d223      	bcs.n	8004cce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fdc8 	bl	8005820 <RCC_SetFlashLatencyFromMSIRange>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e3ce      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c9a:	4b7d      	ldr	r3, [pc, #500]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7c      	ldr	r2, [pc, #496]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004ca0:	f043 0308 	orr.w	r3, r3, #8
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b7a      	ldr	r3, [pc, #488]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	4977      	ldr	r1, [pc, #476]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cb8:	4b75      	ldr	r3, [pc, #468]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	4972      	ldr	r1, [pc, #456]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
 8004ccc:	e025      	b.n	8004d1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cce:	4b70      	ldr	r3, [pc, #448]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a6f      	ldr	r2, [pc, #444]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cd4:	f043 0308 	orr.w	r3, r3, #8
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b6d      	ldr	r3, [pc, #436]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	496a      	ldr	r1, [pc, #424]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cec:	4b68      	ldr	r3, [pc, #416]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	4965      	ldr	r1, [pc, #404]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fd88 	bl	8005820 <RCC_SetFlashLatencyFromMSIRange>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e38e      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d1a:	f000 fcbf 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8004d1e:	4601      	mov	r1, r0
 8004d20:	4b5b      	ldr	r3, [pc, #364]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	4a5a      	ldr	r2, [pc, #360]	; (8004e94 <HAL_RCC_OscConfig+0x29c>)
 8004d2c:	5cd3      	ldrb	r3, [r2, r3]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	fa21 f303 	lsr.w	r3, r1, r3
 8004d36:	4a58      	ldr	r2, [pc, #352]	; (8004e98 <HAL_RCC_OscConfig+0x2a0>)
 8004d38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d3a:	4b58      	ldr	r3, [pc, #352]	; (8004e9c <HAL_RCC_OscConfig+0x2a4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fc ffb0 	bl	8001ca4 <HAL_InitTick>
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d052      	beq.n	8004df4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	e372      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d032      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d5a:	4b4d      	ldr	r3, [pc, #308]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4c      	ldr	r2, [pc, #304]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d66:	f7fc ffed 	bl	8001d44 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d6e:	f7fc ffe9 	bl	8001d44 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e35b      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d80:	4b43      	ldr	r3, [pc, #268]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d8c:	4b40      	ldr	r3, [pc, #256]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a3f      	ldr	r2, [pc, #252]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004d92:	f043 0308 	orr.w	r3, r3, #8
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	4b3d      	ldr	r3, [pc, #244]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	493a      	ldr	r1, [pc, #232]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004daa:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	4935      	ldr	r1, [pc, #212]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
 8004dbe:	e01a      	b.n	8004df6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dc0:	4b33      	ldr	r3, [pc, #204]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a32      	ldr	r2, [pc, #200]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dcc:	f7fc ffba 	bl	8001d44 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dd4:	f7fc ffb6 	bl	8001d44 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e328      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004de6:	4b2a      	ldr	r3, [pc, #168]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x1dc>
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004df4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d073      	beq.n	8004eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_OscConfig+0x21c>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d10e      	bne.n	8004e2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d10b      	bne.n	8004e2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e14:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d063      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x2f0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d15f      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e305      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d106      	bne.n	8004e44 <HAL_RCC_OscConfig+0x24c>
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e01d      	b.n	8004e80 <HAL_RCC_OscConfig+0x288>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x270>
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e00b      	b.n	8004e80 <HAL_RCC_OscConfig+0x288>
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <HAL_RCC_OscConfig+0x298>)
 8004e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fc ff5c 	bl	8001d44 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e8e:	e010      	b.n	8004eb2 <HAL_RCC_OscConfig+0x2ba>
 8004e90:	40021000 	.word	0x40021000
 8004e94:	080070f0 	.word	0x080070f0
 8004e98:	20000034 	.word	0x20000034
 8004e9c:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fc ff50 	bl	8001d44 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e2c2      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb2:	4baf      	ldr	r3, [pc, #700]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x2a8>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc ff40 	bl	8001d44 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fc ff3c 	bl	8001d44 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e2ae      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eda:	4ba5      	ldr	r3, [pc, #660]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x2d0>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d060      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_OscConfig+0x310>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d119      	bne.n	8004f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d116      	bne.n	8004f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f08:	4b99      	ldr	r3, [pc, #612]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_OscConfig+0x328>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e28b      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f20:	4b93      	ldr	r3, [pc, #588]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	4990      	ldr	r1, [pc, #576]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f34:	e040      	b.n	8004fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d023      	beq.n	8004f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f3e:	4b8c      	ldr	r3, [pc, #560]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a8b      	ldr	r2, [pc, #556]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4a:	f7fc fefb 	bl	8001d44 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f52:	f7fc fef7 	bl	8001d44 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e269      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f64:	4b82      	ldr	r3, [pc, #520]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b7f      	ldr	r3, [pc, #508]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	497c      	ldr	r1, [pc, #496]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
 8004f84:	e018      	b.n	8004fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f86:	4b7a      	ldr	r3, [pc, #488]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a79      	ldr	r2, [pc, #484]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f92:	f7fc fed7 	bl	8001d44 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f9a:	f7fc fed3 	bl	8001d44 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e245      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fac:	4b70      	ldr	r3, [pc, #448]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f0      	bne.n	8004f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d03c      	beq.n	800503e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01c      	beq.n	8005006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fcc:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	4a67      	ldr	r2, [pc, #412]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fc feb2 	bl	8001d44 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fc feae 	bl	8001d44 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e220      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ff6:	4b5e      	ldr	r3, [pc, #376]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8004ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x3ec>
 8005004:	e01b      	b.n	800503e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005006:	4b5a      	ldr	r3, [pc, #360]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8005008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500c:	4a58      	ldr	r2, [pc, #352]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005016:	f7fc fe95 	bl	8001d44 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501e:	f7fc fe91 	bl	8001d44 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e203      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005030:	4b4f      	ldr	r3, [pc, #316]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8005032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1ef      	bne.n	800501e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80a6 	beq.w	8005198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504c:	2300      	movs	r3, #0
 800504e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005050:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505c:	4b44      	ldr	r3, [pc, #272]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	4a43      	ldr	r2, [pc, #268]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8005062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005066:	6593      	str	r3, [r2, #88]	; 0x58
 8005068:	4b41      	ldr	r3, [pc, #260]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005074:	2301      	movs	r3, #1
 8005076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005078:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <HAL_RCC_OscConfig+0x57c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d118      	bne.n	80050b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005084:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_OscConfig+0x57c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3a      	ldr	r2, [pc, #232]	; (8005174 <HAL_RCC_OscConfig+0x57c>)
 800508a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005090:	f7fc fe58 	bl	8001d44 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005098:	f7fc fe54 	bl	8001d44 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e1c6      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050aa:	4b32      	ldr	r3, [pc, #200]	; (8005174 <HAL_RCC_OscConfig+0x57c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d108      	bne.n	80050d0 <HAL_RCC_OscConfig+0x4d8>
 80050be:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050ce:	e024      	b.n	800511a <HAL_RCC_OscConfig+0x522>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d110      	bne.n	80050fa <HAL_RCC_OscConfig+0x502>
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	4a24      	ldr	r2, [pc, #144]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 80050e0:	f043 0304 	orr.w	r3, r3, #4
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	4a20      	ldr	r2, [pc, #128]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f8:	e00f      	b.n	800511a <HAL_RCC_OscConfig+0x522>
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005100:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800510a:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8005112:	f023 0304 	bic.w	r3, r3, #4
 8005116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005122:	f7fc fe0f 	bl	8001d44 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512a:	f7fc fe0b 	bl	8001d44 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e17b      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_OscConfig+0x578>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0ed      	beq.n	800512a <HAL_RCC_OscConfig+0x532>
 800514e:	e01a      	b.n	8005186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fc fdf8 	bl	8001d44 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005156:	e00f      	b.n	8005178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fc fdf4 	bl	8001d44 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d906      	bls.n	8005178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e164      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005178:	4ba8      	ldr	r3, [pc, #672]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e8      	bne.n	8005158 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d105      	bne.n	8005198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518c:	4ba3      	ldr	r3, [pc, #652]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	4aa2      	ldr	r2, [pc, #648]	; (800541c <HAL_RCC_OscConfig+0x824>)
 8005192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005196:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d03c      	beq.n	800521e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01c      	beq.n	80051e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051ac:	4b9b      	ldr	r3, [pc, #620]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80051ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051b2:	4a9a      	ldr	r2, [pc, #616]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fc fdc2 	bl	8001d44 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051c4:	f7fc fdbe 	bl	8001d44 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e130      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051d6:	4b91      	ldr	r3, [pc, #580]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80051d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ef      	beq.n	80051c4 <HAL_RCC_OscConfig+0x5cc>
 80051e4:	e01b      	b.n	800521e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051e6:	4b8d      	ldr	r3, [pc, #564]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80051e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051ec:	4a8b      	ldr	r2, [pc, #556]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f6:	f7fc fda5 	bl	8001d44 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051fe:	f7fc fda1 	bl	8001d44 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e113      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005210:	4b82      	ldr	r3, [pc, #520]	; (800541c <HAL_RCC_OscConfig+0x824>)
 8005212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1ef      	bne.n	80051fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8107 	beq.w	8005436 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	2b02      	cmp	r3, #2
 800522e:	f040 80cb 	bne.w	80053c8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005232:	4b7a      	ldr	r3, [pc, #488]	; (800541c <HAL_RCC_OscConfig+0x824>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f003 0203 	and.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	429a      	cmp	r2, r3
 8005244:	d12c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	3b01      	subs	r3, #1
 8005252:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005254:	429a      	cmp	r2, r3
 8005256:	d123      	bne.n	80052a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d11b      	bne.n	80052a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d113      	bne.n	80052a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	3b01      	subs	r3, #1
 8005286:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d109      	bne.n	80052a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	3b01      	subs	r3, #1
 800529a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d06d      	beq.n	800537c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d068      	beq.n	8005378 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052a6:	4b5d      	ldr	r3, [pc, #372]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d105      	bne.n	80052be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80052b2:	4b5a      	ldr	r3, [pc, #360]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0ba      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052c2:	4b56      	ldr	r3, [pc, #344]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a55      	ldr	r2, [pc, #340]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80052c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052ce:	f7fc fd39 	bl	8001d44 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d6:	f7fc fd35 	bl	8001d44 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0a7      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e8:	4b4c      	ldr	r3, [pc, #304]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f0      	bne.n	80052d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f4:	4b49      	ldr	r3, [pc, #292]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	4b49      	ldr	r3, [pc, #292]	; (8005420 <HAL_RCC_OscConfig+0x828>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005304:	3a01      	subs	r2, #1
 8005306:	0112      	lsls	r2, r2, #4
 8005308:	4311      	orrs	r1, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800530e:	0212      	lsls	r2, r2, #8
 8005310:	4311      	orrs	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005316:	0852      	lsrs	r2, r2, #1
 8005318:	3a01      	subs	r2, #1
 800531a:	0552      	lsls	r2, r2, #21
 800531c:	4311      	orrs	r1, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005322:	0852      	lsrs	r2, r2, #1
 8005324:	3a01      	subs	r2, #1
 8005326:	0652      	lsls	r2, r2, #25
 8005328:	4311      	orrs	r1, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800532e:	06d2      	lsls	r2, r2, #27
 8005330:	430a      	orrs	r2, r1
 8005332:	493a      	ldr	r1, [pc, #232]	; (800541c <HAL_RCC_OscConfig+0x824>)
 8005334:	4313      	orrs	r3, r2
 8005336:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005338:	4b38      	ldr	r3, [pc, #224]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a37      	ldr	r2, [pc, #220]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800533e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005342:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005344:	4b35      	ldr	r3, [pc, #212]	; (800541c <HAL_RCC_OscConfig+0x824>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a34      	ldr	r2, [pc, #208]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800534a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005350:	f7fc fcf8 	bl	8001d44 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005358:	f7fc fcf4 	bl	8001d44 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e066      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536a:	4b2c      	ldr	r3, [pc, #176]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005376:	e05e      	b.n	8005436 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e05d      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537c:	4b27      	ldr	r3, [pc, #156]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d156      	bne.n	8005436 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005388:	4b24      	ldr	r3, [pc, #144]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a23      	ldr	r2, [pc, #140]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800538e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005392:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005394:	4b21      	ldr	r3, [pc, #132]	; (800541c <HAL_RCC_OscConfig+0x824>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <HAL_RCC_OscConfig+0x824>)
 800539a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800539e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053a0:	f7fc fcd0 	bl	8001d44 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fc fccc 	bl	8001d44 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e03e      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x7b0>
 80053c6:	e036      	b.n	8005436 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d031      	beq.n	8005432 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a12      	ldr	r2, [pc, #72]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d105      	bne.n	80053f2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	4a0c      	ldr	r2, [pc, #48]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053ec:	f023 0303 	bic.w	r3, r3, #3
 80053f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053f2:	4b0a      	ldr	r3, [pc, #40]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <HAL_RCC_OscConfig+0x824>)
 80053f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80053fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005400:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fc fc9f 	bl	8001d44 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005408:	e00c      	b.n	8005424 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540a:	f7fc fc9b 	bl	8001d44 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d905      	bls.n	8005424 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e00d      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
 800541c:	40021000 	.word	0x40021000
 8005420:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_OscConfig+0x848>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ec      	bne.n	800540a <HAL_RCC_OscConfig+0x812>
 8005430:	e001      	b.n	8005436 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000

08005444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e10f      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b89      	ldr	r3, [pc, #548]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d910      	bls.n	800548c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b86      	ldr	r3, [pc, #536]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 020f 	bic.w	r2, r3, #15
 8005472:	4984      	ldr	r1, [pc, #528]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	4313      	orrs	r3, r2
 8005478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b82      	ldr	r3, [pc, #520]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0f7      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8089 	beq.w	80055ac <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d133      	bne.n	800550a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a2:	4b79      	ldr	r3, [pc, #484]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0e4      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80054b2:	f000 fa0f 	bl	80058d4 <RCC_GetSysClockFreqFromPLLSource>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b74      	ldr	r3, [pc, #464]	; (800568c <HAL_RCC_ClockConfig+0x248>)
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d955      	bls.n	800556a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054be:	4b72      	ldr	r3, [pc, #456]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054ca:	4b6f      	ldr	r3, [pc, #444]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d2:	4a6d      	ldr	r2, [pc, #436]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e044      	b.n	800556a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d03e      	beq.n	800556a <HAL_RCC_ClockConfig+0x126>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d13a      	bne.n	800556a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054f4:	4b64      	ldr	r3, [pc, #400]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054fc:	4a62      	ldr	r2, [pc, #392]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005502:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e02f      	b.n	800556a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005512:	4b5d      	ldr	r3, [pc, #372]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d115      	bne.n	800554a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0ac      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800552a:	4b57      	ldr	r3, [pc, #348]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0a0      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800553a:	4b53      	ldr	r3, [pc, #332]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e098      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800554a:	f000 f8a7 	bl	800569c <HAL_RCC_GetSysClockFreq>
 800554e:	4602      	mov	r2, r0
 8005550:	4b4e      	ldr	r3, [pc, #312]	; (800568c <HAL_RCC_ClockConfig+0x248>)
 8005552:	429a      	cmp	r2, r3
 8005554:	d909      	bls.n	800556a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005556:	4b4c      	ldr	r3, [pc, #304]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800555e:	4a4a      	ldr	r2, [pc, #296]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005564:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800556a:	4b47      	ldr	r3, [pc, #284]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4944      	ldr	r1, [pc, #272]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005578:	4313      	orrs	r3, r2
 800557a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557c:	f7fc fbe2 	bl	8001d44 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	e00a      	b.n	800559a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005584:	f7fc fbde 	bl	8001d44 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e070      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	4b3b      	ldr	r3, [pc, #236]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 020c 	and.w	r2, r3, #12
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d1eb      	bne.n	8005584 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b8:	4b33      	ldr	r3, [pc, #204]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4930      	ldr	r1, [pc, #192]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
 80055ca:	e008      	b.n	80055de <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b80      	cmp	r3, #128	; 0x80
 80055d0:	d105      	bne.n	80055de <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055d2:	4b2d      	ldr	r3, [pc, #180]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 80055d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055dc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d210      	bcs.n	800560e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ec:	4b25      	ldr	r3, [pc, #148]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f023 020f 	bic.w	r2, r3, #15
 80055f4:	4923      	ldr	r1, [pc, #140]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fc:	4b21      	ldr	r3, [pc, #132]	; (8005684 <HAL_RCC_ClockConfig+0x240>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d001      	beq.n	800560e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e036      	b.n	800567c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4918      	ldr	r1, [pc, #96]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005628:	4313      	orrs	r3, r2
 800562a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d009      	beq.n	800564c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005638:	4b13      	ldr	r3, [pc, #76]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4910      	ldr	r1, [pc, #64]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005648:	4313      	orrs	r3, r2
 800564a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800564c:	f000 f826 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8005650:	4601      	mov	r1, r0
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <HAL_RCC_ClockConfig+0x244>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	091b      	lsrs	r3, r3, #4
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <HAL_RCC_ClockConfig+0x24c>)
 800565e:	5cd3      	ldrb	r3, [r2, r3]
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	fa21 f303 	lsr.w	r3, r1, r3
 8005668:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <HAL_RCC_ClockConfig+0x250>)
 800566a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <HAL_RCC_ClockConfig+0x254>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f7fc fb17 	bl	8001ca4 <HAL_InitTick>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]

  return status;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40022000 	.word	0x40022000
 8005688:	40021000 	.word	0x40021000
 800568c:	04c4b400 	.word	0x04c4b400
 8005690:	080070f0 	.word	0x080070f0
 8005694:	20000034 	.word	0x20000034
 8005698:	20000038 	.word	0x20000038

0800569c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056b4:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x34>
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d121      	bne.n	800570e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d11e      	bne.n	800570e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056d0:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056dc:	4b30      	ldr	r3, [pc, #192]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80056de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	e005      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056ec:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	091b      	lsrs	r3, r3, #4
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056f8:	4a2a      	ldr	r2, [pc, #168]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10d      	bne.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d102      	bne.n	800571a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005714:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e004      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d101      	bne.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005720:	4b22      	ldr	r3, [pc, #136]	; (80057ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d133      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d002      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0xa4>
 800573a:	2b03      	cmp	r3, #3
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0xaa>
 800573e:	e005      	b.n	800574c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005742:	617b      	str	r3, [r7, #20]
      break;
 8005744:	e005      	b.n	8005752 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005746:	4b19      	ldr	r3, [pc, #100]	; (80057ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005748:	617b      	str	r3, [r7, #20]
      break;
 800574a:	e002      	b.n	8005752 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	617b      	str	r3, [r7, #20]
      break;
 8005750:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	3301      	adds	r3, #1
 800575e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	fb02 f203 	mul.w	r2, r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	0e5b      	lsrs	r3, r3, #25
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	3301      	adds	r3, #1
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005792:	69bb      	ldr	r3, [r7, #24]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3724      	adds	r7, #36	; 0x24
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40021000 	.word	0x40021000
 80057a4:	08007108 	.word	0x08007108
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	007a1200 	.word	0x007a1200

080057b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000034 	.word	0x20000034

080057c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057cc:	f7ff fff0 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 80057d0:	4601      	mov	r1, r0
 80057d2:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057de:	5cd3      	ldrb	r3, [r2, r3]
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021000 	.word	0x40021000
 80057f0:	08007100 	.word	0x08007100

080057f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057f8:	f7ff ffda 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 80057fc:	4601      	mov	r1, r0
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0adb      	lsrs	r3, r3, #11
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4a04      	ldr	r2, [pc, #16]	; (800581c <HAL_RCC_GetPCLK2Freq+0x28>)
 800580a:	5cd3      	ldrb	r3, [r2, r3]
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000
 800581c:	08007100 	.word	0x08007100

08005820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800582c:	4b27      	ldr	r3, [pc, #156]	; (80058cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005838:	f7ff f91a 	bl	8004a70 <HAL_PWREx_GetVoltageRange>
 800583c:	6178      	str	r0, [r7, #20]
 800583e:	e014      	b.n	800586a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005840:	4b22      	ldr	r3, [pc, #136]	; (80058cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005844:	4a21      	ldr	r2, [pc, #132]	; (80058cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584a:	6593      	str	r3, [r2, #88]	; 0x58
 800584c:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005858:	f7ff f90a 	bl	8004a70 <HAL_PWREx_GetVoltageRange>
 800585c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005868:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	d10b      	bne.n	800588a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d913      	bls.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2ba0      	cmp	r3, #160	; 0xa0
 800587c:	d902      	bls.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800587e:	2302      	movs	r3, #2
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e00d      	b.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005884:	2301      	movs	r3, #1
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	e00a      	b.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b7f      	cmp	r3, #127	; 0x7f
 800588e:	d902      	bls.n	8005896 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005890:	2302      	movs	r3, #2
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	e004      	b.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b70      	cmp	r3, #112	; 0x70
 800589a:	d101      	bne.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800589c:	2301      	movs	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f023 020f 	bic.w	r2, r3, #15
 80058a8:	4909      	ldr	r1, [pc, #36]	; (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d001      	beq.n	80058c2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40021000 	.word	0x40021000
 80058d0:	40022000 	.word	0x40022000

080058d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80058de:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d118      	bne.n	800591c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058ea:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058f6:	4b27      	ldr	r3, [pc, #156]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80058f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e005      	b.n	8005912 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005912:	4a21      	ldr	r2, [pc, #132]	; (8005998 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800591c:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d002      	beq.n	8005932 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800592c:	2b03      	cmp	r3, #3
 800592e:	d003      	beq.n	8005938 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005930:	e005      	b.n	800593e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005934:	613b      	str	r3, [r7, #16]
    break;
 8005936:	e005      	b.n	8005944 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800593a:	613b      	str	r3, [r7, #16]
    break;
 800593c:	e002      	b.n	8005944 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	613b      	str	r3, [r7, #16]
    break;
 8005942:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	3301      	adds	r3, #1
 8005950:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	fb02 f203 	mul.w	r2, r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	0e5b      	lsrs	r3, r3, #25
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	3301      	adds	r3, #1
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005984:	683b      	ldr	r3, [r7, #0]
}
 8005986:	4618      	mov	r0, r3
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
 8005998:	08007108 	.word	0x08007108
 800599c:	00f42400 	.word	0x00f42400
 80059a0:	007a1200 	.word	0x007a1200

080059a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059ac:	2300      	movs	r3, #0
 80059ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059b0:	2300      	movs	r3, #0
 80059b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03d      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d00b      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d804      	bhi.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00e      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d015      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80059d4:	e01d      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80059d6:	2b60      	cmp	r3, #96	; 0x60
 80059d8:	d01e      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059da:	2b80      	cmp	r3, #128	; 0x80
 80059dc:	d01c      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059de:	e018      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059e0:	4b86      	ldr	r3, [pc, #536]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4a85      	ldr	r2, [pc, #532]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059ec:	e015      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fb0d 	bl	8006014 <RCCEx_PLLSAI1_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059fe:	e00c      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3320      	adds	r3, #32
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fbf4 	bl	80061f4 <RCCEx_PLLSAI2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a10:	e003      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	74fb      	strb	r3, [r7, #19]
      break;
 8005a16:	e000      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a1a:	7cfb      	ldrb	r3, [r7, #19]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10b      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a20:	4b76      	ldr	r3, [pc, #472]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a26:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2e:	4973      	ldr	r1, [pc, #460]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005a36:	e001      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a38:	7cfb      	ldrb	r3, [r7, #19]
 8005a3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d042      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a50:	d00f      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8005a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a56:	d805      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d011      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8005a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a60:	d017      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005a62:	e01f      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a68:	d01f      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6e:	d01c      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a70:	e018      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a72:	4b62      	ldr	r3, [pc, #392]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	4a61      	ldr	r2, [pc, #388]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a7c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a7e:	e015      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fac4 	bl	8006014 <RCCEx_PLLSAI1_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a90:	e00c      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3320      	adds	r3, #32
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fbab 	bl	80061f4 <RCCEx_PLLSAI2_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	74fb      	strb	r3, [r7, #19]
      break;
 8005aa8:	e000      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8005aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ab2:	4b52      	ldr	r3, [pc, #328]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	494e      	ldr	r1, [pc, #312]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005ac8:	e001      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 809f 	beq.w	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005adc:	2300      	movs	r3, #0
 8005ade:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ae0:	4b46      	ldr	r3, [pc, #280]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00d      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	4a40      	ldr	r2, [pc, #256]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6593      	str	r3, [r2, #88]	; 0x58
 8005b02:	4b3e      	ldr	r3, [pc, #248]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b12:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a3a      	ldr	r2, [pc, #232]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b1e:	f7fc f911 	bl	8001d44 <HAL_GetTick>
 8005b22:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b24:	e009      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b26:	f7fc f90d 	bl	8001d44 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d902      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	74fb      	strb	r3, [r7, #19]
        break;
 8005b38:	e005      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0ef      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8005b46:	7cfb      	ldrb	r3, [r7, #19]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d15b      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b4c:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b56:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01f      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d019      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b76:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b96:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d016      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba8:	f7fc f8cc 	bl	8001d44 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bae:	e00b      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb0:	f7fc f8c8 	bl	8001d44 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d902      	bls.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	74fb      	strb	r3, [r7, #19]
            break;
 8005bc6:	e006      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0ec      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8005bd6:	7cfb      	ldrb	r3, [r7, #19]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10c      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	4903      	ldr	r1, [pc, #12]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bf4:	e008      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bf6:	7cfb      	ldrb	r3, [r7, #19]
 8005bf8:	74bb      	strb	r3, [r7, #18]
 8005bfa:	e005      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c08:	7c7b      	ldrb	r3, [r7, #17]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d105      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0e:	4ba0      	ldr	r3, [pc, #640]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	4a9f      	ldr	r2, [pc, #636]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c26:	4b9a      	ldr	r3, [pc, #616]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	f023 0203 	bic.w	r2, r3, #3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c34:	4996      	ldr	r1, [pc, #600]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c48:	4b91      	ldr	r3, [pc, #580]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4e:	f023 020c 	bic.w	r2, r3, #12
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	498e      	ldr	r1, [pc, #568]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c6a:	4b89      	ldr	r3, [pc, #548]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	4985      	ldr	r1, [pc, #532]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c8c:	4b80      	ldr	r3, [pc, #512]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9a:	497d      	ldr	r1, [pc, #500]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cae:	4b78      	ldr	r3, [pc, #480]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbc:	4974      	ldr	r1, [pc, #464]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cd0:	4b6f      	ldr	r3, [pc, #444]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cde:	496c      	ldr	r1, [pc, #432]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cf2:	4b67      	ldr	r3, [pc, #412]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d00:	4963      	ldr	r1, [pc, #396]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d14:	4b5e      	ldr	r3, [pc, #376]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d22:	495b      	ldr	r1, [pc, #364]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d36:	4b56      	ldr	r3, [pc, #344]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d44:	4952      	ldr	r1, [pc, #328]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d58:	4b4d      	ldr	r3, [pc, #308]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	494a      	ldr	r1, [pc, #296]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d7a:	4b45      	ldr	r3, [pc, #276]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d88:	4941      	ldr	r1, [pc, #260]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d9c:	4b3c      	ldr	r3, [pc, #240]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da2:	f023 0203 	bic.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005daa:	4939      	ldr	r1, [pc, #228]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d028      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dbe:	4b34      	ldr	r3, [pc, #208]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dcc:	4930      	ldr	r1, [pc, #192]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ddc:	d106      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4a2b      	ldr	r2, [pc, #172]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005de8:	60d3      	str	r3, [r2, #12]
 8005dea:	e011      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f909 	bl	8006014 <RCCEx_PLLSAI1_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e06:	7cfb      	ldrb	r3, [r7, #19]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d04d      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e24:	d108      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005e26:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e2c:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e36:	e012      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e3e:	4a14      	ldr	r2, [pc, #80]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e56:	490e      	ldr	r1, [pc, #56]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e66:	d106      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e72:	60d3      	str	r3, [r2, #12]
 8005e74:	e020      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e7e:	d109      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4a02      	ldr	r2, [pc, #8]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e8a:	60d3      	str	r3, [r2, #12]
 8005e8c:	e014      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e8e:	bf00      	nop
 8005e90:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f8b5 	bl	8006014 <RCCEx_PLLSAI1_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005eb4:	7cfb      	ldrb	r3, [r7, #19]
 8005eb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d028      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed2:	4947      	ldr	r1, [pc, #284]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee4:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a41      	ldr	r2, [pc, #260]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eee:	60d3      	str	r3, [r2, #12]
 8005ef0:	e011      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005efa:	d10c      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	2101      	movs	r1, #1
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f886 	bl	8006014 <RCCEx_PLLSAI1_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f0c:	7cfb      	ldrb	r3, [r7, #19]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005f12:	7cfb      	ldrb	r3, [r7, #19]
 8005f14:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01e      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f22:	4b33      	ldr	r3, [pc, #204]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f32:	492f      	ldr	r1, [pc, #188]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f861 	bl	8006014 <RCCEx_PLLSAI1_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f6c:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f72:	f023 0204 	bic.w	r2, r3, #4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7c:	491c      	ldr	r1, [pc, #112]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f90:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f96:	f023 0218 	bic.w	r2, r3, #24
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	4913      	ldr	r1, [pc, #76]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d017      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc4:	490a      	ldr	r1, [pc, #40]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd6:	d105      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	4a04      	ldr	r2, [pc, #16]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000

08005ff4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a04      	ldr	r2, [pc, #16]	; (8006010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005ffe:	f043 0304 	orr.w	r3, r3, #4
 8006002:	6013      	str	r3, [r2, #0]
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000

08006014 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006022:	4b70      	ldr	r3, [pc, #448]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800602e:	4b6d      	ldr	r3, [pc, #436]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0203 	and.w	r2, r3, #3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d103      	bne.n	8006046 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
       ||
 8006042:	2b00      	cmp	r3, #0
 8006044:	d13f      	bne.n	80060c6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	73fb      	strb	r3, [r7, #15]
 800604a:	e03c      	b.n	80060c6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d00c      	beq.n	800606e <RCCEx_PLLSAI1_Config+0x5a>
 8006054:	2b03      	cmp	r3, #3
 8006056:	d013      	beq.n	8006080 <RCCEx_PLLSAI1_Config+0x6c>
 8006058:	2b01      	cmp	r3, #1
 800605a:	d120      	bne.n	800609e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800605c:	4b61      	ldr	r3, [pc, #388]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11d      	bne.n	80060a4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800606c:	e01a      	b.n	80060a4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800606e:	4b5d      	ldr	r3, [pc, #372]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006076:	2b00      	cmp	r3, #0
 8006078:	d116      	bne.n	80060a8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607e:	e013      	b.n	80060a8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006080:	4b58      	ldr	r3, [pc, #352]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10f      	bne.n	80060ac <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800608c:	4b55      	ldr	r3, [pc, #340]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800609c:	e006      	b.n	80060ac <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	73fb      	strb	r3, [r7, #15]
      break;
 80060a2:	e004      	b.n	80060ae <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80060a4:	bf00      	nop
 80060a6:	e002      	b.n	80060ae <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80060a8:	bf00      	nop
 80060aa:	e000      	b.n	80060ae <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80060ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d108      	bne.n	80060c6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80060b4:	4b4b      	ldr	r3, [pc, #300]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f023 0203 	bic.w	r2, r3, #3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4948      	ldr	r1, [pc, #288]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f040 8086 	bne.w	80061da <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060ce:	4b45      	ldr	r3, [pc, #276]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a44      	ldr	r2, [pc, #272]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80060d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060da:	f7fb fe33 	bl	8001d44 <HAL_GetTick>
 80060de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060e0:	e009      	b.n	80060f6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060e2:	f7fb fe2f 	bl	8001d44 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d902      	bls.n	80060f6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	73fb      	strb	r3, [r7, #15]
        break;
 80060f4:	e005      	b.n	8006102 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060f6:	4b3b      	ldr	r3, [pc, #236]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1ef      	bne.n	80060e2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d168      	bne.n	80061da <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d113      	bne.n	8006136 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800610e:	4b35      	ldr	r3, [pc, #212]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	4b35      	ldr	r3, [pc, #212]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d4>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6892      	ldr	r2, [r2, #8]
 800611a:	0211      	lsls	r1, r2, #8
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68d2      	ldr	r2, [r2, #12]
 8006120:	06d2      	lsls	r2, r2, #27
 8006122:	4311      	orrs	r1, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6852      	ldr	r2, [r2, #4]
 8006128:	3a01      	subs	r2, #1
 800612a:	0112      	lsls	r2, r2, #4
 800612c:	430a      	orrs	r2, r1
 800612e:	492d      	ldr	r1, [pc, #180]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006130:	4313      	orrs	r3, r2
 8006132:	610b      	str	r3, [r1, #16]
 8006134:	e02d      	b.n	8006192 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d115      	bne.n	8006168 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800613c:	4b29      	ldr	r3, [pc, #164]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006142:	4013      	ands	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6892      	ldr	r2, [r2, #8]
 8006148:	0211      	lsls	r1, r2, #8
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6912      	ldr	r2, [r2, #16]
 800614e:	0852      	lsrs	r2, r2, #1
 8006150:	3a01      	subs	r2, #1
 8006152:	0552      	lsls	r2, r2, #21
 8006154:	4311      	orrs	r1, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6852      	ldr	r2, [r2, #4]
 800615a:	3a01      	subs	r2, #1
 800615c:	0112      	lsls	r2, r2, #4
 800615e:	430a      	orrs	r2, r1
 8006160:	4920      	ldr	r1, [pc, #128]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006162:	4313      	orrs	r3, r2
 8006164:	610b      	str	r3, [r1, #16]
 8006166:	e014      	b.n	8006192 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	4b20      	ldr	r3, [pc, #128]	; (80061f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800616e:	4013      	ands	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6892      	ldr	r2, [r2, #8]
 8006174:	0211      	lsls	r1, r2, #8
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6952      	ldr	r2, [r2, #20]
 800617a:	0852      	lsrs	r2, r2, #1
 800617c:	3a01      	subs	r2, #1
 800617e:	0652      	lsls	r2, r2, #25
 8006180:	4311      	orrs	r1, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6852      	ldr	r2, [r2, #4]
 8006186:	3a01      	subs	r2, #1
 8006188:	0112      	lsls	r2, r2, #4
 800618a:	430a      	orrs	r2, r1
 800618c:	4915      	ldr	r1, [pc, #84]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800618e:	4313      	orrs	r3, r2
 8006190:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800619c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619e:	f7fb fdd1 	bl	8001d44 <HAL_GetTick>
 80061a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061a4:	e009      	b.n	80061ba <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061a6:	f7fb fdcd 	bl	8001d44 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d902      	bls.n	80061ba <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	73fb      	strb	r3, [r7, #15]
          break;
 80061b8:	e005      	b.n	80061c6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061ba:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0ef      	beq.n	80061a6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	4903      	ldr	r1, [pc, #12]	; (80061e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40021000 	.word	0x40021000
 80061e8:	07ff800f 	.word	0x07ff800f
 80061ec:	ff9f800f 	.word	0xff9f800f
 80061f0:	f9ff800f 	.word	0xf9ff800f

080061f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006202:	4b70      	ldr	r3, [pc, #448]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800620e:	4b6d      	ldr	r3, [pc, #436]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0203 	and.w	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d103      	bne.n	8006226 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
       ||
 8006222:	2b00      	cmp	r3, #0
 8006224:	d13f      	bne.n	80062a6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
 800622a:	e03c      	b.n	80062a6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d00c      	beq.n	800624e <RCCEx_PLLSAI2_Config+0x5a>
 8006234:	2b03      	cmp	r3, #3
 8006236:	d013      	beq.n	8006260 <RCCEx_PLLSAI2_Config+0x6c>
 8006238:	2b01      	cmp	r3, #1
 800623a:	d120      	bne.n	800627e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800623c:	4b61      	ldr	r3, [pc, #388]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d11d      	bne.n	8006284 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800624c:	e01a      	b.n	8006284 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800624e:	4b5d      	ldr	r3, [pc, #372]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006256:	2b00      	cmp	r3, #0
 8006258:	d116      	bne.n	8006288 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800625e:	e013      	b.n	8006288 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006260:	4b58      	ldr	r3, [pc, #352]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10f      	bne.n	800628c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800626c:	4b55      	ldr	r3, [pc, #340]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800627c:	e006      	b.n	800628c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	73fb      	strb	r3, [r7, #15]
      break;
 8006282:	e004      	b.n	800628e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006284:	bf00      	nop
 8006286:	e002      	b.n	800628e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006288:	bf00      	nop
 800628a:	e000      	b.n	800628e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800628c:	bf00      	nop
    }

    if(status == HAL_OK)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d108      	bne.n	80062a6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006294:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f023 0203 	bic.w	r2, r3, #3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4948      	ldr	r1, [pc, #288]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8086 	bne.w	80063ba <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062ae:	4b45      	ldr	r3, [pc, #276]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a44      	ldr	r2, [pc, #272]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80062b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ba:	f7fb fd43 	bl	8001d44 <HAL_GetTick>
 80062be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062c0:	e009      	b.n	80062d6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062c2:	f7fb fd3f 	bl	8001d44 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d902      	bls.n	80062d6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	73fb      	strb	r3, [r7, #15]
        break;
 80062d4:	e005      	b.n	80062e2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062d6:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1ef      	bne.n	80062c2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d168      	bne.n	80063ba <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d113      	bne.n	8006316 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062ee:	4b35      	ldr	r3, [pc, #212]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	4b35      	ldr	r3, [pc, #212]	; (80063c8 <RCCEx_PLLSAI2_Config+0x1d4>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6892      	ldr	r2, [r2, #8]
 80062fa:	0211      	lsls	r1, r2, #8
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68d2      	ldr	r2, [r2, #12]
 8006300:	06d2      	lsls	r2, r2, #27
 8006302:	4311      	orrs	r1, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6852      	ldr	r2, [r2, #4]
 8006308:	3a01      	subs	r2, #1
 800630a:	0112      	lsls	r2, r2, #4
 800630c:	430a      	orrs	r2, r1
 800630e:	492d      	ldr	r1, [pc, #180]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006310:	4313      	orrs	r3, r2
 8006312:	614b      	str	r3, [r1, #20]
 8006314:	e02d      	b.n	8006372 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d115      	bne.n	8006348 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800631c:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800631e:	695a      	ldr	r2, [r3, #20]
 8006320:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006322:	4013      	ands	r3, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6892      	ldr	r2, [r2, #8]
 8006328:	0211      	lsls	r1, r2, #8
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6912      	ldr	r2, [r2, #16]
 800632e:	0852      	lsrs	r2, r2, #1
 8006330:	3a01      	subs	r2, #1
 8006332:	0552      	lsls	r2, r2, #21
 8006334:	4311      	orrs	r1, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6852      	ldr	r2, [r2, #4]
 800633a:	3a01      	subs	r2, #1
 800633c:	0112      	lsls	r2, r2, #4
 800633e:	430a      	orrs	r2, r1
 8006340:	4920      	ldr	r1, [pc, #128]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006342:	4313      	orrs	r3, r2
 8006344:	614b      	str	r3, [r1, #20]
 8006346:	e014      	b.n	8006372 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006348:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800634e:	4013      	ands	r3, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6892      	ldr	r2, [r2, #8]
 8006354:	0211      	lsls	r1, r2, #8
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6952      	ldr	r2, [r2, #20]
 800635a:	0852      	lsrs	r2, r2, #1
 800635c:	3a01      	subs	r2, #1
 800635e:	0652      	lsls	r2, r2, #25
 8006360:	4311      	orrs	r1, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6852      	ldr	r2, [r2, #4]
 8006366:	3a01      	subs	r2, #1
 8006368:	0112      	lsls	r2, r2, #4
 800636a:	430a      	orrs	r2, r1
 800636c:	4915      	ldr	r1, [pc, #84]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800636e:	4313      	orrs	r3, r2
 8006370:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006372:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637e:	f7fb fce1 	bl	8001d44 <HAL_GetTick>
 8006382:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006384:	e009      	b.n	800639a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006386:	f7fb fcdd 	bl	8001d44 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d902      	bls.n	800639a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	73fb      	strb	r3, [r7, #15]
          break;
 8006398:	e005      	b.n	80063a6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0ef      	beq.n	8006386 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80063ae:	695a      	ldr	r2, [r3, #20]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	4903      	ldr	r1, [pc, #12]	; (80063c4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40021000 	.word	0x40021000
 80063c8:	07ff800f 	.word	0x07ff800f
 80063cc:	ff9f800f 	.word	0xff9f800f
 80063d0:	f9ff800f 	.word	0xf9ff800f

080063d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e095      	b.n	8006512 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d108      	bne.n	8006400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063f6:	d009      	beq.n	800640c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	61da      	str	r2, [r3, #28]
 80063fe:	e005      	b.n	800640c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fb fa1e 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800644c:	d902      	bls.n	8006454 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e002      	b.n	800645a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006458:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006462:	d007      	beq.n	8006474 <HAL_SPI_Init+0xa0>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800646c:	d002      	beq.n	8006474 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	ea42 0103 	orr.w	r1, r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	f003 0204 	and.w	r2, r3, #4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064f0:	ea42 0103 	orr.w	r1, r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e042      	b.n	80065b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fb fa08 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2224      	movs	r2, #36	; 0x24
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0201 	bic.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f82d 	bl	80065bc <UART_SetConfig>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e022      	b.n	80065b2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 faf3 	bl	8006b60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006588:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006598:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0201 	orr.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb7a 	bl	8006ca4 <UART_CheckIdleState>
 80065b0:	4603      	mov	r3, r0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80065c0:	b088      	sub	sp, #32
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	4313      	orrs	r3, r2
 80065e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4bb1      	ldr	r3, [pc, #708]	; (80068b8 <UART_SetConfig+0x2fc>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	69f9      	ldr	r1, [r7, #28]
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4aa6      	ldr	r2, [pc, #664]	; (80068bc <UART_SetConfig+0x300>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	4313      	orrs	r3, r2
 800662e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800663a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	69f9      	ldr	r1, [r7, #28]
 8006644:	430b      	orrs	r3, r1
 8006646:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	f023 010f 	bic.w	r1, r3, #15
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a97      	ldr	r2, [pc, #604]	; (80068c0 <UART_SetConfig+0x304>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d121      	bne.n	80066ac <UART_SetConfig+0xf0>
 8006668:	4b96      	ldr	r3, [pc, #600]	; (80068c4 <UART_SetConfig+0x308>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b03      	cmp	r3, #3
 8006674:	d816      	bhi.n	80066a4 <UART_SetConfig+0xe8>
 8006676:	a201      	add	r2, pc, #4	; (adr r2, 800667c <UART_SetConfig+0xc0>)
 8006678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667c:	0800668d 	.word	0x0800668d
 8006680:	08006699 	.word	0x08006699
 8006684:	08006693 	.word	0x08006693
 8006688:	0800669f 	.word	0x0800669f
 800668c:	2301      	movs	r3, #1
 800668e:	76fb      	strb	r3, [r7, #27]
 8006690:	e0e8      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006692:	2302      	movs	r3, #2
 8006694:	76fb      	strb	r3, [r7, #27]
 8006696:	e0e5      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006698:	2304      	movs	r3, #4
 800669a:	76fb      	strb	r3, [r7, #27]
 800669c:	e0e2      	b.n	8006864 <UART_SetConfig+0x2a8>
 800669e:	2308      	movs	r3, #8
 80066a0:	76fb      	strb	r3, [r7, #27]
 80066a2:	e0df      	b.n	8006864 <UART_SetConfig+0x2a8>
 80066a4:	2310      	movs	r3, #16
 80066a6:	76fb      	strb	r3, [r7, #27]
 80066a8:	bf00      	nop
 80066aa:	e0db      	b.n	8006864 <UART_SetConfig+0x2a8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a85      	ldr	r2, [pc, #532]	; (80068c8 <UART_SetConfig+0x30c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d134      	bne.n	8006720 <UART_SetConfig+0x164>
 80066b6:	4b83      	ldr	r3, [pc, #524]	; (80068c4 <UART_SetConfig+0x308>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b0c      	cmp	r3, #12
 80066c2:	d829      	bhi.n	8006718 <UART_SetConfig+0x15c>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <UART_SetConfig+0x110>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	08006701 	.word	0x08006701
 80066d0:	08006719 	.word	0x08006719
 80066d4:	08006719 	.word	0x08006719
 80066d8:	08006719 	.word	0x08006719
 80066dc:	0800670d 	.word	0x0800670d
 80066e0:	08006719 	.word	0x08006719
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006719 	.word	0x08006719
 80066ec:	08006707 	.word	0x08006707
 80066f0:	08006719 	.word	0x08006719
 80066f4:	08006719 	.word	0x08006719
 80066f8:	08006719 	.word	0x08006719
 80066fc:	08006713 	.word	0x08006713
 8006700:	2300      	movs	r3, #0
 8006702:	76fb      	strb	r3, [r7, #27]
 8006704:	e0ae      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006706:	2302      	movs	r3, #2
 8006708:	76fb      	strb	r3, [r7, #27]
 800670a:	e0ab      	b.n	8006864 <UART_SetConfig+0x2a8>
 800670c:	2304      	movs	r3, #4
 800670e:	76fb      	strb	r3, [r7, #27]
 8006710:	e0a8      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006712:	2308      	movs	r3, #8
 8006714:	76fb      	strb	r3, [r7, #27]
 8006716:	e0a5      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006718:	2310      	movs	r3, #16
 800671a:	76fb      	strb	r3, [r7, #27]
 800671c:	bf00      	nop
 800671e:	e0a1      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a69      	ldr	r2, [pc, #420]	; (80068cc <UART_SetConfig+0x310>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d120      	bne.n	800676c <UART_SetConfig+0x1b0>
 800672a:	4b66      	ldr	r3, [pc, #408]	; (80068c4 <UART_SetConfig+0x308>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006734:	2b10      	cmp	r3, #16
 8006736:	d00f      	beq.n	8006758 <UART_SetConfig+0x19c>
 8006738:	2b10      	cmp	r3, #16
 800673a:	d802      	bhi.n	8006742 <UART_SetConfig+0x186>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <UART_SetConfig+0x190>
 8006740:	e010      	b.n	8006764 <UART_SetConfig+0x1a8>
 8006742:	2b20      	cmp	r3, #32
 8006744:	d005      	beq.n	8006752 <UART_SetConfig+0x196>
 8006746:	2b30      	cmp	r3, #48	; 0x30
 8006748:	d009      	beq.n	800675e <UART_SetConfig+0x1a2>
 800674a:	e00b      	b.n	8006764 <UART_SetConfig+0x1a8>
 800674c:	2300      	movs	r3, #0
 800674e:	76fb      	strb	r3, [r7, #27]
 8006750:	e088      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006752:	2302      	movs	r3, #2
 8006754:	76fb      	strb	r3, [r7, #27]
 8006756:	e085      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006758:	2304      	movs	r3, #4
 800675a:	76fb      	strb	r3, [r7, #27]
 800675c:	e082      	b.n	8006864 <UART_SetConfig+0x2a8>
 800675e:	2308      	movs	r3, #8
 8006760:	76fb      	strb	r3, [r7, #27]
 8006762:	e07f      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006764:	2310      	movs	r3, #16
 8006766:	76fb      	strb	r3, [r7, #27]
 8006768:	bf00      	nop
 800676a:	e07b      	b.n	8006864 <UART_SetConfig+0x2a8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a57      	ldr	r2, [pc, #348]	; (80068d0 <UART_SetConfig+0x314>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d120      	bne.n	80067b8 <UART_SetConfig+0x1fc>
 8006776:	4b53      	ldr	r3, [pc, #332]	; (80068c4 <UART_SetConfig+0x308>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d00f      	beq.n	80067a4 <UART_SetConfig+0x1e8>
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d802      	bhi.n	800678e <UART_SetConfig+0x1d2>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <UART_SetConfig+0x1dc>
 800678c:	e010      	b.n	80067b0 <UART_SetConfig+0x1f4>
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d005      	beq.n	800679e <UART_SetConfig+0x1e2>
 8006792:	2bc0      	cmp	r3, #192	; 0xc0
 8006794:	d009      	beq.n	80067aa <UART_SetConfig+0x1ee>
 8006796:	e00b      	b.n	80067b0 <UART_SetConfig+0x1f4>
 8006798:	2300      	movs	r3, #0
 800679a:	76fb      	strb	r3, [r7, #27]
 800679c:	e062      	b.n	8006864 <UART_SetConfig+0x2a8>
 800679e:	2302      	movs	r3, #2
 80067a0:	76fb      	strb	r3, [r7, #27]
 80067a2:	e05f      	b.n	8006864 <UART_SetConfig+0x2a8>
 80067a4:	2304      	movs	r3, #4
 80067a6:	76fb      	strb	r3, [r7, #27]
 80067a8:	e05c      	b.n	8006864 <UART_SetConfig+0x2a8>
 80067aa:	2308      	movs	r3, #8
 80067ac:	76fb      	strb	r3, [r7, #27]
 80067ae:	e059      	b.n	8006864 <UART_SetConfig+0x2a8>
 80067b0:	2310      	movs	r3, #16
 80067b2:	76fb      	strb	r3, [r7, #27]
 80067b4:	bf00      	nop
 80067b6:	e055      	b.n	8006864 <UART_SetConfig+0x2a8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a45      	ldr	r2, [pc, #276]	; (80068d4 <UART_SetConfig+0x318>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d124      	bne.n	800680c <UART_SetConfig+0x250>
 80067c2:	4b40      	ldr	r3, [pc, #256]	; (80068c4 <UART_SetConfig+0x308>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d0:	d012      	beq.n	80067f8 <UART_SetConfig+0x23c>
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d802      	bhi.n	80067de <UART_SetConfig+0x222>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <UART_SetConfig+0x230>
 80067dc:	e012      	b.n	8006804 <UART_SetConfig+0x248>
 80067de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e2:	d006      	beq.n	80067f2 <UART_SetConfig+0x236>
 80067e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e8:	d009      	beq.n	80067fe <UART_SetConfig+0x242>
 80067ea:	e00b      	b.n	8006804 <UART_SetConfig+0x248>
 80067ec:	2300      	movs	r3, #0
 80067ee:	76fb      	strb	r3, [r7, #27]
 80067f0:	e038      	b.n	8006864 <UART_SetConfig+0x2a8>
 80067f2:	2302      	movs	r3, #2
 80067f4:	76fb      	strb	r3, [r7, #27]
 80067f6:	e035      	b.n	8006864 <UART_SetConfig+0x2a8>
 80067f8:	2304      	movs	r3, #4
 80067fa:	76fb      	strb	r3, [r7, #27]
 80067fc:	e032      	b.n	8006864 <UART_SetConfig+0x2a8>
 80067fe:	2308      	movs	r3, #8
 8006800:	76fb      	strb	r3, [r7, #27]
 8006802:	e02f      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006804:	2310      	movs	r3, #16
 8006806:	76fb      	strb	r3, [r7, #27]
 8006808:	bf00      	nop
 800680a:	e02b      	b.n	8006864 <UART_SetConfig+0x2a8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2a      	ldr	r2, [pc, #168]	; (80068bc <UART_SetConfig+0x300>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d124      	bne.n	8006860 <UART_SetConfig+0x2a4>
 8006816:	4b2b      	ldr	r3, [pc, #172]	; (80068c4 <UART_SetConfig+0x308>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006824:	d012      	beq.n	800684c <UART_SetConfig+0x290>
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682a:	d802      	bhi.n	8006832 <UART_SetConfig+0x276>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <UART_SetConfig+0x284>
 8006830:	e012      	b.n	8006858 <UART_SetConfig+0x29c>
 8006832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006836:	d006      	beq.n	8006846 <UART_SetConfig+0x28a>
 8006838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800683c:	d009      	beq.n	8006852 <UART_SetConfig+0x296>
 800683e:	e00b      	b.n	8006858 <UART_SetConfig+0x29c>
 8006840:	2300      	movs	r3, #0
 8006842:	76fb      	strb	r3, [r7, #27]
 8006844:	e00e      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006846:	2302      	movs	r3, #2
 8006848:	76fb      	strb	r3, [r7, #27]
 800684a:	e00b      	b.n	8006864 <UART_SetConfig+0x2a8>
 800684c:	2304      	movs	r3, #4
 800684e:	76fb      	strb	r3, [r7, #27]
 8006850:	e008      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006852:	2308      	movs	r3, #8
 8006854:	76fb      	strb	r3, [r7, #27]
 8006856:	e005      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006858:	2310      	movs	r3, #16
 800685a:	76fb      	strb	r3, [r7, #27]
 800685c:	bf00      	nop
 800685e:	e001      	b.n	8006864 <UART_SetConfig+0x2a8>
 8006860:	2310      	movs	r3, #16
 8006862:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a14      	ldr	r2, [pc, #80]	; (80068bc <UART_SetConfig+0x300>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f040 80a1 	bne.w	80069b2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006870:	7efb      	ldrb	r3, [r7, #27]
 8006872:	2b08      	cmp	r3, #8
 8006874:	d836      	bhi.n	80068e4 <UART_SetConfig+0x328>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x2c0>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068e5 	.word	0x080068e5
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068e5 	.word	0x080068e5
 800688c:	080068af 	.word	0x080068af
 8006890:	080068e5 	.word	0x080068e5
 8006894:	080068e5 	.word	0x080068e5
 8006898:	080068e5 	.word	0x080068e5
 800689c:	080068dd 	.word	0x080068dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fe ff92 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 80068a4:	6178      	str	r0, [r7, #20]
        break;
 80068a6:	e022      	b.n	80068ee <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <UART_SetConfig+0x31c>)
 80068aa:	617b      	str	r3, [r7, #20]
        break;
 80068ac:	e01f      	b.n	80068ee <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fe fef5 	bl	800569c <HAL_RCC_GetSysClockFreq>
 80068b2:	6178      	str	r0, [r7, #20]
        break;
 80068b4:	e01b      	b.n	80068ee <UART_SetConfig+0x332>
 80068b6:	bf00      	nop
 80068b8:	cfff69f3 	.word	0xcfff69f3
 80068bc:	40008000 	.word	0x40008000
 80068c0:	40013800 	.word	0x40013800
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40004400 	.word	0x40004400
 80068cc:	40004800 	.word	0x40004800
 80068d0:	40004c00 	.word	0x40004c00
 80068d4:	40005000 	.word	0x40005000
 80068d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e0:	617b      	str	r3, [r7, #20]
        break;
 80068e2:	e004      	b.n	80068ee <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	76bb      	strb	r3, [r7, #26]
        break;
 80068ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 811d 	beq.w	8006b30 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	4a97      	ldr	r2, [pc, #604]	; (8006b58 <UART_SetConfig+0x59c>)
 80068fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006900:	461a      	mov	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	fbb3 f3f2 	udiv	r3, r3, r2
 8006908:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	429a      	cmp	r2, r3
 8006918:	d305      	bcc.n	8006926 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d902      	bls.n	800692c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	76bb      	strb	r3, [r7, #26]
 800692a:	e101      	b.n	8006b30 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4618      	mov	r0, r3
 8006930:	f04f 0100 	mov.w	r1, #0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	4a87      	ldr	r2, [pc, #540]	; (8006b58 <UART_SetConfig+0x59c>)
 800693a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f04f 0400 	mov.w	r4, #0
 8006944:	461a      	mov	r2, r3
 8006946:	4623      	mov	r3, r4
 8006948:	f7f9 fc58 	bl	80001fc <__aeabi_uldivmod>
 800694c:	4603      	mov	r3, r0
 800694e:	460c      	mov	r4, r1
 8006950:	4619      	mov	r1, r3
 8006952:	4622      	mov	r2, r4
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	f04f 0400 	mov.w	r4, #0
 800695c:	0214      	lsls	r4, r2, #8
 800695e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006962:	020b      	lsls	r3, r1, #8
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6852      	ldr	r2, [r2, #4]
 8006968:	0852      	lsrs	r2, r2, #1
 800696a:	4611      	mov	r1, r2
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	eb13 0b01 	adds.w	fp, r3, r1
 8006974:	eb44 0c02 	adc.w	ip, r4, r2
 8006978:	4658      	mov	r0, fp
 800697a:	4661      	mov	r1, ip
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f04f 0400 	mov.w	r4, #0
 8006984:	461a      	mov	r2, r3
 8006986:	4623      	mov	r3, r4
 8006988:	f7f9 fc38 	bl	80001fc <__aeabi_uldivmod>
 800698c:	4603      	mov	r3, r0
 800698e:	460c      	mov	r4, r1
 8006990:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006998:	d308      	bcc.n	80069ac <UART_SetConfig+0x3f0>
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a0:	d204      	bcs.n	80069ac <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e0c1      	b.n	8006b30 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	76bb      	strb	r3, [r7, #26]
 80069b0:	e0be      	b.n	8006b30 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ba:	d164      	bne.n	8006a86 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80069bc:	7efb      	ldrb	r3, [r7, #27]
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d827      	bhi.n	8006a12 <UART_SetConfig+0x456>
 80069c2:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <UART_SetConfig+0x40c>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a13 	.word	0x08006a13
 80069d8:	08006a03 	.word	0x08006a03
 80069dc:	08006a13 	.word	0x08006a13
 80069e0:	08006a13 	.word	0x08006a13
 80069e4:	08006a13 	.word	0x08006a13
 80069e8:	08006a0b 	.word	0x08006a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fe feec 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 80069f0:	6178      	str	r0, [r7, #20]
        break;
 80069f2:	e013      	b.n	8006a1c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fe fefe 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 80069f8:	6178      	str	r0, [r7, #20]
        break;
 80069fa:	e00f      	b.n	8006a1c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069fc:	4b57      	ldr	r3, [pc, #348]	; (8006b5c <UART_SetConfig+0x5a0>)
 80069fe:	617b      	str	r3, [r7, #20]
        break;
 8006a00:	e00c      	b.n	8006a1c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a02:	f7fe fe4b 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8006a06:	6178      	str	r0, [r7, #20]
        break;
 8006a08:	e008      	b.n	8006a1c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0e:	617b      	str	r3, [r7, #20]
        break;
 8006a10:	e004      	b.n	8006a1c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	76bb      	strb	r3, [r7, #26]
        break;
 8006a1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8086 	beq.w	8006b30 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	4a4b      	ldr	r2, [pc, #300]	; (8006b58 <UART_SetConfig+0x59c>)
 8006a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a36:	005a      	lsls	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	441a      	add	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b0f      	cmp	r3, #15
 8006a50:	d916      	bls.n	8006a80 <UART_SetConfig+0x4c4>
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a58:	d212      	bcs.n	8006a80 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f023 030f 	bic.w	r3, r3, #15
 8006a62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	89fb      	ldrh	r3, [r7, #14]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	89fa      	ldrh	r2, [r7, #14]
 8006a7c:	60da      	str	r2, [r3, #12]
 8006a7e:	e057      	b.n	8006b30 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	76bb      	strb	r3, [r7, #26]
 8006a84:	e054      	b.n	8006b30 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a86:	7efb      	ldrb	r3, [r7, #27]
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d828      	bhi.n	8006ade <UART_SetConfig+0x522>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <UART_SetConfig+0x4d8>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ac1 	.word	0x08006ac1
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	08006adf 	.word	0x08006adf
 8006aa4:	08006acf 	.word	0x08006acf
 8006aa8:	08006adf 	.word	0x08006adf
 8006aac:	08006adf 	.word	0x08006adf
 8006ab0:	08006adf 	.word	0x08006adf
 8006ab4:	08006ad7 	.word	0x08006ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab8:	f7fe fe86 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 8006abc:	6178      	str	r0, [r7, #20]
        break;
 8006abe:	e013      	b.n	8006ae8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac0:	f7fe fe98 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 8006ac4:	6178      	str	r0, [r7, #20]
        break;
 8006ac6:	e00f      	b.n	8006ae8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac8:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <UART_SetConfig+0x5a0>)
 8006aca:	617b      	str	r3, [r7, #20]
        break;
 8006acc:	e00c      	b.n	8006ae8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ace:	f7fe fde5 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8006ad2:	6178      	str	r0, [r7, #20]
        break;
 8006ad4:	e008      	b.n	8006ae8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ada:	617b      	str	r3, [r7, #20]
        break;
 8006adc:	e004      	b.n	8006ae8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	76bb      	strb	r3, [r7, #26]
        break;
 8006ae6:	bf00      	nop
    }

    if (pclk != 0U)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d020      	beq.n	8006b30 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <UART_SetConfig+0x59c>)
 8006af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af8:	461a      	mov	r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	441a      	add	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	2b0f      	cmp	r3, #15
 8006b18:	d908      	bls.n	8006b2c <UART_SetConfig+0x570>
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b20:	d204      	bcs.n	8006b2c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	e001      	b.n	8006b30 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006b4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006b58:	08007138 	.word	0x08007138
 8006b5c:	00f42400 	.word	0x00f42400

08006b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5e:	d10a      	bne.n	8006c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006cb4:	f7fb f846 	bl	8001d44 <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d10e      	bne.n	8006ce6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f82c 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e022      	b.n	8006d2c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d10e      	bne.n	8006d12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f816 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e00c      	b.n	8006d2c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d44:	e062      	b.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d05e      	beq.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4e:	f7fa fff9 	bl	8001d44 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d302      	bcc.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11d      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d72:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e045      	b.n	8006e2c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d02e      	beq.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbc:	d126      	bne.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dd6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e00f      	b.n	8006e2c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	69da      	ldr	r2, [r3, #28]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4013      	ands	r3, r2
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	bf0c      	ite	eq
 8006e1c:	2301      	moveq	r3, #1
 8006e1e:	2300      	movne	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d08d      	beq.n	8006d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_UARTEx_DisableFifoMode+0x16>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e027      	b.n	8006e9a <HAL_UARTEx_DisableFifoMode+0x66>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2224      	movs	r2, #36	; 0x24
 8006e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0201 	bic.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e02d      	b.n	8006f1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	; 0x24
 8006eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f850 	bl	8006fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d101      	bne.n	8006f3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f36:	2302      	movs	r3, #2
 8006f38:	e02d      	b.n	8006f96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2224      	movs	r2, #36	; 0x24
 8006f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0201 	bic.w	r2, r2, #1
 8006f60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f812 	bl	8006fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b089      	sub	sp, #36	; 0x24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006fa8:	4a2f      	ldr	r2, [pc, #188]	; (8007068 <UARTEx_SetNbDataToProcess+0xc8>)
 8006faa:	f107 0314 	add.w	r3, r7, #20
 8006fae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fb2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006fb6:	4a2d      	ldr	r2, [pc, #180]	; (800706c <UARTEx_SetNbDataToProcess+0xcc>)
 8006fb8:	f107 030c 	add.w	r3, r7, #12
 8006fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fc0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fdc:	e03d      	b.n	800705a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fde:	2308      	movs	r3, #8
 8006fe0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	0e5b      	lsrs	r3, r3, #25
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	0f5b      	lsrs	r3, r3, #29
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007006:	7fbb      	ldrb	r3, [r7, #30]
 8007008:	7f3a      	ldrb	r2, [r7, #28]
 800700a:	f107 0120 	add.w	r1, r7, #32
 800700e:	440a      	add	r2, r1
 8007010:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007014:	fb02 f303 	mul.w	r3, r2, r3
 8007018:	7f3a      	ldrb	r2, [r7, #28]
 800701a:	f107 0120 	add.w	r1, r7, #32
 800701e:	440a      	add	r2, r1
 8007020:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007024:	fb93 f3f2 	sdiv	r3, r3, r2
 8007028:	b29a      	uxth	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007030:	7ffb      	ldrb	r3, [r7, #31]
 8007032:	7f7a      	ldrb	r2, [r7, #29]
 8007034:	f107 0120 	add.w	r1, r7, #32
 8007038:	440a      	add	r2, r1
 800703a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	7f7a      	ldrb	r2, [r7, #29]
 8007044:	f107 0120 	add.w	r1, r7, #32
 8007048:	440a      	add	r2, r1
 800704a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800704e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007052:	b29a      	uxth	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800705a:	bf00      	nop
 800705c:	3724      	adds	r7, #36	; 0x24
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	080070e0 	.word	0x080070e0
 800706c:	080070e8 	.word	0x080070e8

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4e0d      	ldr	r6, [pc, #52]	; (80070a8 <__libc_init_array+0x38>)
 8007074:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <__libc_init_array+0x3c>)
 8007076:	1ba4      	subs	r4, r4, r6
 8007078:	10a4      	asrs	r4, r4, #2
 800707a:	2500      	movs	r5, #0
 800707c:	42a5      	cmp	r5, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	4e0b      	ldr	r6, [pc, #44]	; (80070b0 <__libc_init_array+0x40>)
 8007082:	4c0c      	ldr	r4, [pc, #48]	; (80070b4 <__libc_init_array+0x44>)
 8007084:	f000 f820 	bl	80070c8 <_init>
 8007088:	1ba4      	subs	r4, r4, r6
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	2500      	movs	r5, #0
 800708e:	42a5      	cmp	r5, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007098:	4798      	blx	r3
 800709a:	3501      	adds	r5, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070a2:	4798      	blx	r3
 80070a4:	3501      	adds	r5, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	08007158 	.word	0x08007158
 80070ac:	08007158 	.word	0x08007158
 80070b0:	08007158 	.word	0x08007158
 80070b4:	0800715c 	.word	0x0800715c

080070b8 <memset>:
 80070b8:	4402      	add	r2, r0
 80070ba:	4603      	mov	r3, r0
 80070bc:	4293      	cmp	r3, r2
 80070be:	d100      	bne.n	80070c2 <memset+0xa>
 80070c0:	4770      	bx	lr
 80070c2:	f803 1b01 	strb.w	r1, [r3], #1
 80070c6:	e7f9      	b.n	80070bc <memset+0x4>

080070c8 <_init>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr

080070d4 <_fini>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr
