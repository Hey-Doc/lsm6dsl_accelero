
lsm6dsl_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bdc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08009da0  08009da0  00019da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee0  08009ee0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee0  08009ee0  00019ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee8  08009ee8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee8  08009ee8  00019ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  200000a8  08009f98  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08009f98  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c222  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030bb  00000000  00000000  0003c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  0003f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00040bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f3f3  00000000  00000000  00042240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000121b0  00000000  00000000  00071633  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00120c1a  00000000  00000000  000837e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a43fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa4  00000000  00000000  001a4478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009d84 	.word	0x08009d84

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	08009d84 	.word	0x08009d84

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b972 	b.w	8000e74 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4688      	mov	r8, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14b      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4615      	mov	r5, r2
 8000bba:	d967      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0720 	rsb	r7, r2, #32
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	fa20 f707 	lsr.w	r7, r0, r7
 8000bce:	4095      	lsls	r5, r2
 8000bd0:	ea47 0803 	orr.w	r8, r7, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bda:	0c23      	lsrs	r3, r4, #16
 8000bdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be0:	fa1f fc85 	uxth.w	ip, r5
 8000be4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bec:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x60>
 8000bf4:	18eb      	adds	r3, r5, r3
 8000bf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfa:	f080 811b 	bcs.w	8000e34 <__udivmoddi4+0x28c>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 8118 	bls.w	8000e34 <__udivmoddi4+0x28c>
 8000c04:	3f02      	subs	r7, #2
 8000c06:	442b      	add	r3, r5
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x8c>
 8000c20:	192c      	adds	r4, r5, r4
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c26:	f080 8107 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c2a:	45a4      	cmp	ip, r4
 8000c2c:	f240 8104 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c30:	3802      	subs	r0, #2
 8000c32:	442c      	add	r4, r5
 8000c34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c38:	eba4 040c 	sub.w	r4, r4, ip
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	b11e      	cbz	r6, 8000c48 <__udivmoddi4+0xa0>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c6 4300 	strd	r4, r3, [r6]
 8000c48:	4639      	mov	r1, r7
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xbe>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80eb 	beq.w	8000e2e <__udivmoddi4+0x286>
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f783 	clz	r7, r3
 8000c6a:	2f00      	cmp	r7, #0
 8000c6c:	d147      	bne.n	8000cfe <__udivmoddi4+0x156>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd0>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fa 	bhi.w	8000e6c <__udivmoddi4+0x2c4>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa0>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xe8>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 808f 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c9a:	1b49      	subs	r1, r1, r5
 8000c9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca0:	fa1f f885 	uxth.w	r8, r5
 8000ca4:	2701      	movs	r7, #1
 8000ca6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2bc>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x14c>
 8000ce4:	192c      	adds	r4, r5, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x14a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80b6 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e79f      	b.n	8000c3e <__udivmoddi4+0x96>
 8000cfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000d02:	40bb      	lsls	r3, r7
 8000d04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d1c:	4325      	orrs	r5, r4
 8000d1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d22:	0c2c      	lsrs	r4, r5, #16
 8000d24:	fb08 3319 	mls	r3, r8, r9, r3
 8000d28:	fa1f fa8e 	uxth.w	sl, lr
 8000d2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d30:	fb09 f40a 	mul.w	r4, r9, sl
 8000d34:	429c      	cmp	r4, r3
 8000d36:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1e 0303 	adds.w	r3, lr, r3
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	f080 8087 	bcs.w	8000e5a <__udivmoddi4+0x2b2>
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	f240 8084 	bls.w	8000e5a <__udivmoddi4+0x2b2>
 8000d52:	f1a9 0902 	sub.w	r9, r9, #2
 8000d56:	4473      	add	r3, lr
 8000d58:	1b1b      	subs	r3, r3, r4
 8000d5a:	b2ad      	uxth	r5, r5
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1e 0404 	adds.w	r4, lr, r4
 8000d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d78:	d26b      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7a:	45a2      	cmp	sl, r4
 8000d7c:	d969      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4474      	add	r4, lr
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	eba4 040a 	sub.w	r4, r4, sl
 8000d8e:	454c      	cmp	r4, r9
 8000d90:	46c2      	mov	sl, r8
 8000d92:	464b      	mov	r3, r9
 8000d94:	d354      	bcc.n	8000e40 <__udivmoddi4+0x298>
 8000d96:	d051      	beq.n	8000e3c <__udivmoddi4+0x294>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d069      	beq.n	8000e70 <__udivmoddi4+0x2c8>
 8000d9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000da0:	eb64 0403 	sbc.w	r4, r4, r3
 8000da4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da8:	40fd      	lsrs	r5, r7
 8000daa:	40fc      	lsrs	r4, r7
 8000dac:	ea4c 0505 	orr.w	r5, ip, r5
 8000db0:	e9c6 5400 	strd	r5, r4, [r6]
 8000db4:	2700      	movs	r7, #0
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000db8:	f1c2 0320 	rsb	r3, r2, #32
 8000dbc:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc0:	4095      	lsls	r5, r2
 8000dc2:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	4338      	orrs	r0, r7
 8000dd0:	0c01      	lsrs	r1, r0, #16
 8000dd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd6:	fa1f f885 	uxth.w	r8, r5
 8000dda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb07 f308 	mul.w	r3, r7, r8
 8000de6:	428b      	cmp	r3, r1
 8000de8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x256>
 8000dee:	1869      	adds	r1, r5, r1
 8000df0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df4:	d22f      	bcs.n	8000e56 <__udivmoddi4+0x2ae>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d92d      	bls.n	8000e56 <__udivmoddi4+0x2ae>
 8000dfa:	3f02      	subs	r7, #2
 8000dfc:	4429      	add	r1, r5
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	b281      	uxth	r1, r0
 8000e02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb00 f308 	mul.w	r3, r0, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x27e>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1c:	d217      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d915      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e2c:	e73b      	b.n	8000ca6 <__udivmoddi4+0xfe>
 8000e2e:	4637      	mov	r7, r6
 8000e30:	4630      	mov	r0, r6
 8000e32:	e709      	b.n	8000c48 <__udivmoddi4+0xa0>
 8000e34:	4607      	mov	r7, r0
 8000e36:	e6e7      	b.n	8000c08 <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fb      	b.n	8000c34 <__udivmoddi4+0x8c>
 8000e3c:	4541      	cmp	r1, r8
 8000e3e:	d2ab      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e44:	eb69 020e 	sbc.w	r2, r9, lr
 8000e48:	3801      	subs	r0, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	e7a4      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e4e:	4660      	mov	r0, ip
 8000e50:	e7e9      	b.n	8000e26 <__udivmoddi4+0x27e>
 8000e52:	4618      	mov	r0, r3
 8000e54:	e795      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e56:	4667      	mov	r7, ip
 8000e58:	e7d1      	b.n	8000dfe <__udivmoddi4+0x256>
 8000e5a:	4681      	mov	r9, r0
 8000e5c:	e77c      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	442c      	add	r4, r5
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0x14c>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	442b      	add	r3, r5
 8000e6a:	e72f      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	e708      	b.n	8000c82 <__udivmoddi4+0xda>
 8000e70:	4637      	mov	r7, r6
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0xa0>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000e86:	2110      	movs	r1, #16
 8000e88:	20d4      	movs	r0, #212	; 0xd4
 8000e8a:	f001 fab3 	bl	80023f4 <SENSOR_IO_Read>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000e9e:	7bba      	ldrb	r2, [r7, #14]
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2110      	movs	r1, #16
 8000eac:	20d4      	movs	r0, #212	; 0xd4
 8000eae:	f001 fa87 	bl	80023c0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000eb2:	2112      	movs	r1, #18
 8000eb4:	20d4      	movs	r0, #212	; 0xd4
 8000eb6:	f001 fa9d 	bl	80023f4 <SENSOR_IO_Read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000ecc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000ece:	7bba      	ldrb	r2, [r7, #14]
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	2112      	movs	r1, #18
 8000edc:	20d4      	movs	r0, #212	; 0xd4
 8000ede:	f001 fa6f 	bl	80023c0 <SENSOR_IO_Write>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	20d4      	movs	r0, #212	; 0xd4
 8000ef8:	f001 fa7c 	bl	80023f4 <SENSOR_IO_Read>
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	20d4      	movs	r0, #212	; 0xd4
 8000f10:	f001 fa56 	bl	80023c0 <SENSOR_IO_Write>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000f20:	f001 fa44 	bl	80023ac <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000f24:	210f      	movs	r1, #15
 8000f26:	20d4      	movs	r0, #212	; 0xd4
 8000f28:	f001 fa64 	bl	80023f4 <SENSOR_IO_Read>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000f40:	2115      	movs	r1, #21
 8000f42:	20d4      	movs	r0, #212	; 0xd4
 8000f44:	f001 fa56 	bl	80023f4 <SENSOR_IO_Read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f023 0310 	bic.w	r3, r3, #16
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f043 0310 	orr.w	r3, r3, #16
 8000f60:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	461a      	mov	r2, r3
 8000f66:	2115      	movs	r1, #21
 8000f68:	20d4      	movs	r0, #212	; 0xd4
 8000f6a:	f001 fa29 	bl	80023c0 <SENSOR_IO_Write>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000f8e:	2110      	movs	r1, #16
 8000f90:	20d4      	movs	r0, #212	; 0xd4
 8000f92:	f001 fa2f 	bl	80023f4 <SENSOR_IO_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000f9a:	f107 0208 	add.w	r2, r7, #8
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	2128      	movs	r1, #40	; 0x28
 8000fa2:	20d4      	movs	r0, #212	; 0xd4
 8000fa4:	f001 fa44 	bl	8002430 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	77fb      	strb	r3, [r7, #31]
 8000fac:	e01f      	b.n	8000fee <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f107 0220 	add.w	r2, r7, #32
 8000fb8:	4413      	add	r3, r2
 8000fba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	f107 0120 	add.w	r1, r7, #32
 8000fcc:	440b      	add	r3, r1
 8000fce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	b212      	sxth	r2, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	f107 0120 	add.w	r1, r7, #32
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	3301      	adds	r3, #1
 8000fec:	77fb      	strb	r3, [r7, #31]
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d9dc      	bls.n	8000fae <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d828      	bhi.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <LSM6DSL_AccReadXYZ+0x8c>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001039 	.word	0x08001039
 8001008:	08001051 	.word	0x08001051
 800100c:	08001051 	.word	0x08001051
 8001010:	08001051 	.word	0x08001051
 8001014:	0800104b 	.word	0x0800104b
 8001018:	08001051 	.word	0x08001051
 800101c:	08001051 	.word	0x08001051
 8001020:	08001051 	.word	0x08001051
 8001024:	0800103f 	.word	0x0800103f
 8001028:	08001051 	.word	0x08001051
 800102c:	08001051 	.word	0x08001051
 8001030:	08001051 	.word	0x08001051
 8001034:	08001045 	.word	0x08001045
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <LSM6DSL_AccReadXYZ+0x124>)
 800103a:	61bb      	str	r3, [r7, #24]
    break;
 800103c:	e008      	b.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <LSM6DSL_AccReadXYZ+0x128>)
 8001040:	61bb      	str	r3, [r7, #24]
    break;
 8001042:	e005      	b.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <LSM6DSL_AccReadXYZ+0x12c>)
 8001046:	61bb      	str	r3, [r7, #24]
    break;
 8001048:	e002      	b.n	8001050 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <LSM6DSL_AccReadXYZ+0x130>)
 800104c:	61bb      	str	r3, [r7, #24]
    break;    
 800104e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
 8001054:	e01b      	b.n	800108e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001056:	7ffb      	ldrb	r3, [r7, #31]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	f107 0220 	add.w	r2, r7, #32
 800105e:	4413      	add	r3, r2
 8001060:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001080:	ee17 2a90 	vmov	r2, s15
 8001084:	b212      	sxth	r2, r2
 8001086:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	3301      	adds	r3, #1
 800108c:	77fb      	strb	r3, [r7, #31]
 800108e:	7ffb      	ldrb	r3, [r7, #31]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d9e0      	bls.n	8001056 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	3d79db23 	.word	0x3d79db23
 80010a0:	3df9db23 	.word	0x3df9db23
 80010a4:	3e79db23 	.word	0x3e79db23
 80010a8:	3ef9db23 	.word	0x3ef9db23

080010ac <__io_putchar>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2301      	movs	r3, #1
 80010b8:	2201      	movs	r2, #1
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <__io_putchar+0x20>)
 80010bc:	f006 fb25 	bl	800770a <HAL_UART_Transmit>
 return ch;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000033c 	.word	0x2000033c

080010d0 <magnitude>:

float magnitude(float *vec)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return sqrt(pow(vec[0],2) + pow(vec[1],2) + pow(vec[2],2));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9f3 	bl	80004c8 <__aeabi_f2d>
 80010e2:	4603      	mov	r3, r0
 80010e4:	460c      	mov	r4, r1
 80010e6:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001180 <magnitude+0xb0>
 80010ea:	ec44 3b10 	vmov	d0, r3, r4
 80010ee:	f007 fd97 	bl	8008c20 <pow>
 80010f2:	ec55 4b10 	vmov	r4, r5, d0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f9e3 	bl	80004c8 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001180 <magnitude+0xb0>
 800110a:	ec43 2b10 	vmov	d0, r2, r3
 800110e:	f007 fd87 	bl	8008c20 <pow>
 8001112:	ec53 2b10 	vmov	r2, r3, d0
 8001116:	4620      	mov	r0, r4
 8001118:	4629      	mov	r1, r5
 800111a:	f7ff f877 	bl	800020c <__adddf3>
 800111e:	4603      	mov	r3, r0
 8001120:	460c      	mov	r4, r1
 8001122:	4625      	mov	r5, r4
 8001124:	461c      	mov	r4, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3308      	adds	r3, #8
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f9cb 	bl	80004c8 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001180 <magnitude+0xb0>
 800113a:	ec43 2b10 	vmov	d0, r2, r3
 800113e:	f007 fd6f 	bl	8008c20 <pow>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff f85f 	bl	800020c <__adddf3>
 800114e:	4603      	mov	r3, r0
 8001150:	460c      	mov	r4, r1
 8001152:	ec44 3b17 	vmov	d7, r3, r4
 8001156:	eeb0 0a47 	vmov.f32	s0, s14
 800115a:	eef0 0a67 	vmov.f32	s1, s15
 800115e:	f007 fecf 	bl	8008f00 <sqrt>
 8001162:	ec54 3b10 	vmov	r3, r4, d0
 8001166:	4618      	mov	r0, r3
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fcb5 	bl	8000ad8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	ee07 3a90 	vmov	s15, r3
}
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bdb0      	pop	{r4, r5, r7, pc}
 800117e:	bf00      	nop
 8001180:	00000000 	.word	0x00000000
 8001184:	40000000 	.word	0x40000000

08001188 <mean>:
float mean(float *vec)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  float sum=0.0;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  for (int i=0;i<10;i++){sum+=vec[i];}
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	e00e      	b.n	80011ba <mean+0x32>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b0:	edc7 7a03 	vstr	s15, [r7, #12]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	dded      	ble.n	800119c <mean+0x14>
  return sum/10;
 80011c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011cc:	eef0 7a66 	vmov.f32	s15, s13
}
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <stnd>:
float stnd(float *vec)
{
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  float s=0;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  float m=mean(vec);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffca 	bl	8001188 <mean>
 80011f4:	ed87 0a03 	vstr	s0, [r7, #12]
  for (int i=0;i<10;i++){s+=pow((vec[i]-m),2);}
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	e02d      	b.n	800125a <stnd+0x7a>
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	ed93 7a00 	vldr	s14, [r3]
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f957 	bl	80004c8 <__aeabi_f2d>
 800121a:	4603      	mov	r3, r0
 800121c:	460c      	mov	r4, r1
 800121e:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80012a0 <stnd+0xc0>
 8001222:	ec44 3b10 	vmov	d0, r3, r4
 8001226:	f007 fcfb 	bl	8008c20 <pow>
 800122a:	ec56 5b10 	vmov	r5, r6, d0
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff f94a 	bl	80004c8 <__aeabi_f2d>
 8001234:	4603      	mov	r3, r0
 8001236:	460c      	mov	r4, r1
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	4628      	mov	r0, r5
 800123e:	4631      	mov	r1, r6
 8001240:	f7fe ffe4 	bl	800020c <__adddf3>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fc44 	bl	8000ad8 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	3301      	adds	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	2b09      	cmp	r3, #9
 800125e:	ddce      	ble.n	80011fe <stnd+0x1e>
  return sqrt(s/10);
 8001260:	edd7 7a05 	vldr	s15, [r7, #20]
 8001264:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001268:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800126c:	ee16 0a90 	vmov	r0, s13
 8001270:	f7ff f92a 	bl	80004c8 <__aeabi_f2d>
 8001274:	4603      	mov	r3, r0
 8001276:	460c      	mov	r4, r1
 8001278:	ec44 3b10 	vmov	d0, r3, r4
 800127c:	f007 fe40 	bl	8008f00 <sqrt>
 8001280:	ec54 3b10 	vmov	r3, r4, d0
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fc26 	bl	8000ad8 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	ee07 3a90 	vmov	s15, r3
}
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	f3af 8000 	nop.w
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40000000 	.word	0x40000000

080012a8 <detect>:
void detect(float stdv, float meanv, float stdm, float meanm)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80012b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80012b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80012ba:	edc7 1a00 	vstr	s3, [r7]
	if(meanv<=-0.131){
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff f902 	bl	80004c8 <__aeabi_f2d>
 80012c4:	a31e      	add	r3, pc, #120	; (adr r3, 8001340 <detect+0x98>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff fbd1 	bl	8000a70 <__aeabi_dcmple>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d012      	beq.n	80012fa <detect+0x52>
		if(stdm<=0.055){
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff f8f7 	bl	80004c8 <__aeabi_f2d>
 80012da:	a31b      	add	r3, pc, #108	; (adr r3, 8001348 <detect+0xa0>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff fbc6 	bl	8000a70 <__aeabi_dcmple>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <detect+0x4a>
			printf("case1\n");
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <detect+0x88>)
 80012ec:	f007 f88c 	bl	8008408 <puts>
		}
		else{
			printf("case4\n");
		}
	}
}
 80012f0:	e015      	b.n	800131e <detect+0x76>
			printf("case2\n");
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <detect+0x8c>)
 80012f4:	f007 f888 	bl	8008408 <puts>
}
 80012f8:	e011      	b.n	800131e <detect+0x76>
		if(meanm<=1.11){
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f7ff f8e4 	bl	80004c8 <__aeabi_f2d>
 8001300:	a309      	add	r3, pc, #36	; (adr r3, 8001328 <detect+0x80>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff fbb3 	bl	8000a70 <__aeabi_dcmple>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <detect+0x70>
			printf("case3\n");
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <detect+0x90>)
 8001312:	f007 f879 	bl	8008408 <puts>
}
 8001316:	e002      	b.n	800131e <detect+0x76>
			printf("case4\n");
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <detect+0x94>)
 800131a:	f007 f875 	bl	8008408 <puts>
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	5c28f5c3 	.word	0x5c28f5c3
 800132c:	3ff1c28f 	.word	0x3ff1c28f
 8001330:	08009da0 	.word	0x08009da0
 8001334:	08009da8 	.word	0x08009da8
 8001338:	08009db0 	.word	0x08009db0
 800133c:	08009db8 	.word	0x08009db8
 8001340:	a5e353f8 	.word	0xa5e353f8
 8001344:	bfc0c49b 	.word	0xbfc0c49b
 8001348:	c28f5c29 	.word	0xc28f5c29
 800134c:	3fac28f5 	.word	0x3fac28f5

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	f2ad 5d54 	subw	sp, sp, #1364	; 0x554
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int16_t axyz[3]={};
 8001358:	f207 5324 	addw	r3, r7, #1316	; 0x524
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	809a      	strh	r2, [r3, #4]
  float Axyz[3]={};
 8001362:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
  float buffer_a[buflen][3]={};
 800136e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001372:	4618      	mov	r0, r3
 8001374:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001378:	461a      	mov	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	f006 ffe0 	bl	8008340 <memset>
  float V[3]={0,0,0};
 8001380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  float pastAxyz[3]={0,0,0};
 800139e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  float magV[10]={};
 80013bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c0:	4618      	mov	r0, r3
 80013c2:	2328      	movs	r3, #40	; 0x28
 80013c4:	461a      	mov	r2, r3
 80013c6:	2100      	movs	r1, #0
 80013c8:	f006 ffba 	bl	8008340 <memset>
  float magM[10]={};
 80013cc:	463b      	mov	r3, r7
 80013ce:	4618      	mov	r0, r3
 80013d0:	2328      	movs	r3, #40	; 0x28
 80013d2:	461a      	mov	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	f006 ffb3 	bl	8008340 <memset>
  float meanV=0.0;
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 80013e2:	6013      	str	r3, [r2, #0]
  float stdV=0.0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80013ec:	6013      	str	r3, [r2, #0]
  float meanM=0.0;
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f207 5234 	addw	r2, r7, #1332	; 0x534
 80013f6:	6013      	str	r3, [r2, #0]
  float stdM=0.0;
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 8001400:	6013      	str	r3, [r2, #0]
  float sizV=0.0;
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 800140a:	6013      	str	r3, [r2, #0]
  int cyc = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
  int CycTrue = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001418:	f001 fcd3 	bl	8002dc2 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 800141c:	f001 f826 	bl	800246c <BSP_ACCELERO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f9b8 	bl	8001794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001424:	f000 fd8e 	bl	8001f44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001428:	f000 fa64 	bl	80018f4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800142c:	f000 fac6 	bl	80019bc <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8001430:	f000 fafc 	bl	8001a2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001434:	f000 fb3a 	bl	8001aac <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001438:	f000 fb78 	bl	8001b2c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800143c:	f000 fbcc 	bl	8001bd8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001440:	f000 fc08 	bl	8001c54 <MX_SPI3_Init>
  MX_UART4_Init();
 8001444:	f000 fc44 	bl	8001cd0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001448:	f000 fc8e 	bl	8001d68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800144c:	f000 fcd8 	bl	8001e00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001450:	f000 fd24 	bl	8001e9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001454:	f000 fd6e 	bl	8001f34 <MX_USB_OTG_FS_USB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_ACCELERO_AccGetXYZ(axyz);
 8001458:	f207 5324 	addw	r3, r7, #1316	; 0x524
 800145c:	4618      	mov	r0, r3
 800145e:	f001 f843 	bl	80024e8 <BSP_ACCELERO_AccGetXYZ>
	  Axyz[0]=(float)19.62*axyz[0]/16384;
 8001462:	f9b7 3524 	ldrsh.w	r3, [r7, #1316]	; 0x524
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001780 <main+0x430>
 8001472:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001476:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8001784 <main+0x434>
 800147a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001482:	edc3 7a00 	vstr	s15, [r3]
	  Axyz[1]=(float)19.62*axyz[1]/16384;
 8001486:	f9b7 3526 	ldrsh.w	r3, [r7, #1318]	; 0x526
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8001780 <main+0x430>
 8001496:	ee27 7a87 	vmul.f32	s14, s15, s14
 800149a:	eddf 6aba 	vldr	s13, [pc, #744]	; 8001784 <main+0x434>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80014a6:	edc3 7a00 	vstr	s15, [r3]
	  Axyz[2]=(float)19.62*axyz[2]/16384;
 80014aa:	f9b7 3528 	ldrsh.w	r3, [r7, #1320]	; 0x528
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001780 <main+0x430>
 80014ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014be:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001784 <main+0x434>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80014ca:	edc3 7a00 	vstr	s15, [r3]
	  pastAxyz[0]=buffer_a[cyc][0];
 80014ce:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80014d2:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014e6:	601a      	str	r2, [r3, #0]
	  pastAxyz[1]=buffer_a[cyc][1];
 80014e8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80014ec:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3304      	adds	r3, #4
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001502:	605a      	str	r2, [r3, #4]
	  pastAxyz[2]=buffer_a[cyc][2];
 8001504:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001508:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3308      	adds	r3, #8
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800151e:	609a      	str	r2, [r3, #8]
      buffer_a[cyc][0]=Axyz[0];
 8001520:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800152a:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4403      	add	r3, r0
 8001538:	6019      	str	r1, [r3, #0]
  	  buffer_a[cyc][1]=Axyz[1];
 800153a:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001544:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	3304      	adds	r3, #4
 8001554:	6019      	str	r1, [r3, #0]
  	  buffer_a[cyc][2]=Axyz[2];
 8001556:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800155a:	6819      	ldr	r1, [r3, #0]
 800155c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001560:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4403      	add	r3, r0
 800156e:	3308      	adds	r3, #8
 8001570:	6019      	str	r1, [r3, #0]
	  magM[cyc%10]=magnitude(Axyz);
 8001572:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8001576:	4b84      	ldr	r3, [pc, #528]	; (8001788 <main+0x438>)
 8001578:	fb83 1302 	smull	r1, r3, r3, r2
 800157c:	1099      	asrs	r1, r3, #2
 800157e:	17d3      	asrs	r3, r2, #31
 8001580:	1acc      	subs	r4, r1, r3
 8001582:	4623      	mov	r3, r4
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4423      	add	r3, r4
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	1ad4      	subs	r4, r2, r3
 800158c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fd9d 	bl	80010d0 <magnitude>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	463a      	mov	r2, r7
 800159c:	00a3      	lsls	r3, r4, #2
 800159e:	4413      	add	r3, r2
 80015a0:	edc3 7a00 	vstr	s15, [r3]
	  for (int i=0;i<3;i++){
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 80015aa:	e02d      	b.n	8001608 <main+0x2b8>
	  	V[i]+=(Axyz[i]-pastAxyz[i])/buflen;
 80015ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015b0:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	ed93 7a00 	vldr	s14, [r3]
 80015bc:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80015c6:	4413      	add	r3, r2
 80015c8:	3b38      	subs	r3, #56	; 0x38
 80015ca:	edd3 6a00 	vldr	s13, [r3]
 80015ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015d2:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015e2:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 800178c <main+0x43c>
 80015e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015f2:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	edc3 7a00 	vstr	s15, [r3]
	  for (int i=0;i<3;i++){
 80015fe:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8001608:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800160c:	2b02      	cmp	r3, #2
 800160e:	ddcd      	ble.n	80015ac <main+0x25c>
	  }
	  sizV=magnitude(V);
 8001610:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fd5b 	bl	80010d0 <magnitude>
 800161a:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 800161e:	ed83 0a00 	vstr	s0, [r3]
	  magV[cyc%10]=0;
 8001622:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8001626:	4b58      	ldr	r3, [pc, #352]	; (8001788 <main+0x438>)
 8001628:	fb83 2301 	smull	r2, r3, r3, r1
 800162c:	109a      	asrs	r2, r3, #2
 800162e:	17cb      	asrs	r3, r1, #31
 8001630:	1ad2      	subs	r2, r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	1aca      	subs	r2, r1, r3
 800163c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001640:	0093      	lsls	r3, r2, #2
 8001642:	440b      	add	r3, r1
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	  for (int i=0;i<3;i++){
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 8001650:	e038      	b.n	80016c4 <main+0x374>
	  	magV[cyc%10]+=Axyz[i]*V[i]/sizV;
 8001652:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8001656:	4b4c      	ldr	r3, [pc, #304]	; (8001788 <main+0x438>)
 8001658:	fb83 2301 	smull	r2, r3, r3, r1
 800165c:	109a      	asrs	r2, r3, #2
 800165e:	17cb      	asrs	r3, r1, #31
 8001660:	1ad2      	subs	r2, r2, r3
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	1aca      	subs	r2, r1, r3
 800166c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001670:	0093      	lsls	r3, r2, #2
 8001672:	440b      	add	r3, r1
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8001682:	440b      	add	r3, r1
 8001684:	3b38      	subs	r3, #56	; 0x38
 8001686:	edd3 6a00 	vldr	s13, [r3]
 800168a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800168e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800169e:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 80016a2:	edd3 6a00 	vldr	s13, [r3]
 80016a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016b2:	0093      	lsls	r3, r2, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	edc3 7a00 	vstr	s15, [r3]
	  for (int i=0;i<3;i++){
 80016ba:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80016be:	3301      	adds	r3, #1
 80016c0:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 80016c4:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	ddc2      	ble.n	8001652 <main+0x302>
	  }
	  meanM=mean(magM);
 80016cc:	463b      	mov	r3, r7
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd5a 	bl	8001188 <mean>
 80016d4:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80016d8:	ed83 0a00 	vstr	s0, [r3]
	  stdM=stnd(magM);
 80016dc:	463b      	mov	r3, r7
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fd7e 	bl	80011e0 <stnd>
 80016e4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80016e8:	ed83 0a00 	vstr	s0, [r3]
	  meanV=mean(magV);
 80016ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fd49 	bl	8001188 <mean>
 80016f6:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 80016fa:	ed83 0a00 	vstr	s0, [r3]
	  stdV=stnd(magV);
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fd6c 	bl	80011e0 <stnd>
 8001708:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800170c:	ed83 0a00 	vstr	s0, [r3]

	  cyc++;
 8001710:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8001714:	3301      	adds	r3, #1
 8001716:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
	  if(cyc==buflen && !CycTrue){CycTrue=1;}
 800171a:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d106      	bne.n	8001730 <main+0x3e0>
 8001722:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <main+0x3e0>
 800172a:	2301      	movs	r3, #1
 800172c:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
	  cyc=cyc%buflen;
 8001730:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8001734:	4a16      	ldr	r2, [pc, #88]	; (8001790 <main+0x440>)
 8001736:	fb82 1203 	smull	r1, r2, r2, r3
 800173a:	1151      	asrs	r1, r2, #5
 800173c:	17da      	asrs	r2, r3, #31
 800173e:	1a8a      	subs	r2, r1, r2
 8001740:	2164      	movs	r1, #100	; 0x64
 8001742:	fb01 f202 	mul.w	r2, r1, r2
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
	  if(CycTrue){
 800174c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8001750:	2b00      	cmp	r3, #0
 8001752:	d011      	beq.n	8001778 <main+0x428>
	  	detect(stdV, meanV, stdM, meanM);
 8001754:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001758:	edd3 1a00 	vldr	s3, [r3]
 800175c:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8001760:	ed93 1a00 	vldr	s2, [r3]
 8001764:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8001768:	edd3 0a00 	vldr	s1, [r3]
 800176c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001770:	ed93 0a00 	vldr	s0, [r3]
 8001774:	f7ff fd98 	bl	80012a8 <detect>
	  }
	  HAL_Delay(100);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f001 fb97 	bl	8002eac <HAL_Delay>
	  BSP_ACCELERO_AccGetXYZ(axyz);
 800177e:	e66b      	b.n	8001458 <main+0x108>
 8001780:	419cf5c3 	.word	0x419cf5c3
 8001784:	46800000 	.word	0x46800000
 8001788:	66666667 	.word	0x66666667
 800178c:	42c80000 	.word	0x42c80000
 8001790:	51eb851f 	.word	0x51eb851f

08001794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b0bc      	sub	sp, #240	; 0xf0
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800179e:	2244      	movs	r2, #68	; 0x44
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f006 fdcc 	bl	8008340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2294      	movs	r2, #148	; 0x94
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fdbe 	bl	8008340 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80017c4:	2000      	movs	r0, #0
 80017c6:	f004 fa1b 	bl	8005c00 <HAL_PWREx_ControlVoltageScaling>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80017d0:	f000 fcf8 	bl	80021c4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017d4:	f004 f9e4 	bl	8005ba0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017d8:	4b44      	ldr	r3, [pc, #272]	; (80018ec <SystemClock_Config+0x158>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a43      	ldr	r2, [pc, #268]	; (80018ec <SystemClock_Config+0x158>)
 80017e0:	f023 0318 	bic.w	r3, r3, #24
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017e8:	2314      	movs	r3, #20
 80017ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001800:	2360      	movs	r3, #96	; 0x60
 8001802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800180c:	2301      	movs	r3, #1
 800180e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001812:	2301      	movs	r3, #1
 8001814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001818:	233c      	movs	r3, #60	; 0x3c
 800181a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fa87 	bl	8005d48 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001840:	f000 fcc0 	bl	80021c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2303      	movs	r3, #3
 800184c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001862:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001866:	2105      	movs	r1, #5
 8001868:	4618      	mov	r0, r3
 800186a:	f004 fe93 	bl	8006594 <HAL_RCC_ClockConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001874:	f000 fca6 	bl	80021c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <SystemClock_Config+0x15c>)
 800187a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800187c:	2300      	movs	r3, #0
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001880:	2300      	movs	r3, #0
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001888:	2300      	movs	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001890:	2300      	movs	r3, #0
 8001892:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001894:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80018a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018ac:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80018b6:	2318      	movs	r3, #24
 80018b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80018c6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80018ca:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4618      	mov	r0, r3
 80018d0:	f005 f910 	bl	8006af4 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80018da:	f000 fc73 	bl	80021c4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018de:	f005 fc31 	bl	8007144 <HAL_RCCEx_EnableMSIPLLMode>
}
 80018e2:	bf00      	nop
 80018e4:	37f0      	adds	r7, #240	; 0xf0
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	010160cf 	.word	0x010160cf

080018f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <MX_ADC1_Init+0xbc>)
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <MX_ADC1_Init+0xc0>)
 800190e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_ADC1_Init+0xbc>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_ADC1_Init+0xbc>)
 800192a:	2204      	movs	r2, #4
 800192c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001930:	2200      	movs	r2, #0
 8001932:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001936:	2200      	movs	r2, #0
 8001938:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_ADC1_Init+0xbc>)
 800193c:	2201      	movs	r2, #1
 800193e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_ADC1_Init+0xbc>)
 800194a:	2200      	movs	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001950:	2200      	movs	r2, #0
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_ADC1_Init+0xbc>)
 800195e:	2200      	movs	r2, #0
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800196a:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_ADC1_Init+0xbc>)
 800196c:	f001 fc60 	bl	8003230 <HAL_ADC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001976:	f000 fc25 	bl	80021c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_ADC1_Init+0xc4>)
 800197c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800197e:	2306      	movs	r3, #6
 8001980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001986:	237f      	movs	r3, #127	; 0x7f
 8001988:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800198a:	2304      	movs	r3, #4
 800198c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <MX_ADC1_Init+0xbc>)
 8001998:	f001 fd94 	bl	80034c4 <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80019a2:	f000 fc0f 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002d4 	.word	0x200002d4
 80019b4:	50040000 	.word	0x50040000
 80019b8:	04300002 	.word	0x04300002

080019bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <MX_DFSDM1_Init+0x6c>)
 80019c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019f2:	2204      	movs	r2, #4
 80019f4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_DFSDM1_Init+0x68>)
 8001a10:	f002 fa64 	bl	8003edc <HAL_DFSDM_ChannelInit>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001a1a:	f000 fbd3 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000544 	.word	0x20000544
 8001a28:	40016040 	.word	0x40016040

08001a2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <MX_I2C1_Init+0x78>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <MX_I2C1_Init+0x7c>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a66:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a68:	f002 fe03 	bl	8004672 <HAL_I2C_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a72:	f000 fba7 	bl	80021c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a7a:	f003 fb03 	bl	8005084 <HAL_I2CEx_ConfigAnalogFilter>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a84:	f000 fb9e 	bl	80021c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a8c:	f003 fb45 	bl	800511a <HAL_I2CEx_ConfigDigitalFilter>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a96:	f000 fb95 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000188 	.word	0x20000188
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	307075b1 	.word	0x307075b1

08001aac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <MX_I2C2_Init+0x78>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <MX_I2C2_Init+0x7c>)
 8001aba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ae6:	480e      	ldr	r0, [pc, #56]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001ae8:	f002 fdc3 	bl	8004672 <HAL_I2C_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001af2:	f000 fb67 	bl	80021c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4809      	ldr	r0, [pc, #36]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001afa:	f003 fac3 	bl	8005084 <HAL_I2CEx_ConfigAnalogFilter>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b04:	f000 fb5e 	bl	80021c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_I2C2_Init+0x74>)
 8001b0c:	f003 fb05 	bl	800511a <HAL_I2CEx_ConfigDigitalFilter>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b16:	f000 fb55 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000224 	.word	0x20000224
 8001b24:	40005800 	.word	0x40005800
 8001b28:	307075b1 	.word	0x307075b1

08001b2c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <MX_OCTOSPI1_Init+0xa8>)
 8001b44:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b58:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001b92:	f003 fb0f 	bl	80051b4 <HAL_OSPI_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001b9c:	f000 fb12 	bl	80021c4 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001ba8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001bac:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_OCTOSPI1_Init+0xa4>)
 8001bb8:	f003 fbb6 	bl	8005328 <HAL_OSPIM_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001bc2:	f000 faff 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001d4 	.word	0x200001d4
 8001bd4:	a0001000 	.word	0xa0001000

08001bd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <MX_SPI1_Init+0x78>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bf2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c0e:	2208      	movs	r2, #8
 8001c10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c26:	2207      	movs	r2, #7
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c32:	2208      	movs	r2, #8
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c38:	f005 fc74 	bl	8007524 <HAL_SPI_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c42:	f000 fabf 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000454 	.word	0x20000454
 8001c50:	40013000 	.word	0x40013000

08001c54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <MX_SPI3_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001cae:	2208      	movs	r2, #8
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_SPI3_Init+0x74>)
 8001cb4:	f005 fc36 	bl	8007524 <HAL_SPI_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 fa81 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000270 	.word	0x20000270
 8001ccc:	40003c00 	.word	0x40003c00

08001cd0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_UART4_Init+0x90>)
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <MX_UART4_Init+0x94>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_UART4_Init+0x90>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_UART4_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_UART4_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_UART4_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_UART4_Init+0x90>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <MX_UART4_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d18:	4811      	ldr	r0, [pc, #68]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d1a:	f005 fca6 	bl	800766a <HAL_UART_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001d24:	f000 fa4e 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d2c:	f006 f9f9 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001d36:	f000 fa45 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d3e:	f006 fa2e 	bl	800819e <HAL_UARTEx_SetRxFifoThreshold>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f000 fa3c 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_UART4_Init+0x90>)
 8001d4e:	f006 f9af 	bl	80080b0 <HAL_UARTEx_DisableFifoMode>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001d58:	f000 fa34 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200003c8 	.word	0x200003c8
 8001d64:	40004c00 	.word	0x40004c00

08001d68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d6e:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <MX_USART1_UART_Init+0x94>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001db2:	f005 fc5a 	bl	800766a <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001dbc:	f000 fa02 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001dc4:	f006 f9ad 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001dce:	f000 f9f9 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4808      	ldr	r0, [pc, #32]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001dd6:	f006 f9e2 	bl	800819e <HAL_UARTEx_SetRxFifoThreshold>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f000 f9f0 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_USART1_UART_Init+0x90>)
 8001de6:	f006 f963 	bl	80080b0 <HAL_UARTEx_DisableFifoMode>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001df0:	f000 f9e8 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000033c 	.word	0x2000033c
 8001dfc:	40013800 	.word	0x40013800

08001e00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e06:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <MX_USART2_UART_Init+0x98>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e2c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e30:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	4812      	ldr	r0, [pc, #72]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e4c:	f005 fc0d 	bl	800766a <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001e56:	f000 f9b5 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	480d      	ldr	r0, [pc, #52]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e5e:	f006 f960 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001e68:	f000 f9ac 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4809      	ldr	r0, [pc, #36]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e70:	f006 f995 	bl	800819e <HAL_UARTEx_SetRxFifoThreshold>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001e7a:	f000 f9a3 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_USART2_UART_Init+0x94>)
 8001e80:	f006 f916 	bl	80080b0 <HAL_UARTEx_DisableFifoMode>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001e8a:	f000 f99b 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200004b8 	.word	0x200004b8
 8001e98:	40004400 	.word	0x40004400

08001e9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ea2:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <MX_USART3_UART_Init+0x94>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ee4:	4811      	ldr	r0, [pc, #68]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ee6:	f005 fbc0 	bl	800766a <HAL_UART_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ef0:	f000 f968 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001ef8:	f006 f913 	bl	8008122 <HAL_UARTEx_SetTxFifoThreshold>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f02:	f000 f95f 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f06:	2100      	movs	r1, #0
 8001f08:	4808      	ldr	r0, [pc, #32]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001f0a:	f006 f948 	bl	800819e <HAL_UARTEx_SetRxFifoThreshold>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f14:	f000 f956 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <MX_USART3_UART_Init+0x90>)
 8001f1a:	f006 f8c9 	bl	80080b0 <HAL_UARTEx_DisableFifoMode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f24:	f000 f94e 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200000fc 	.word	0x200000fc
 8001f30:	40004800 	.word	0x40004800

08001f34 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5a:	4b94      	ldr	r3, [pc, #592]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a93      	ldr	r2, [pc, #588]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4b91      	ldr	r3, [pc, #580]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b8e      	ldr	r3, [pc, #568]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a8d      	ldr	r2, [pc, #564]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b8b      	ldr	r3, [pc, #556]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8a:	4b88      	ldr	r3, [pc, #544]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a87      	ldr	r2, [pc, #540]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b85      	ldr	r3, [pc, #532]	; (80021ac <MX_GPIO_Init+0x268>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b82      	ldr	r3, [pc, #520]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a81      	ldr	r2, [pc, #516]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a7b      	ldr	r2, [pc, #492]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b79      	ldr	r3, [pc, #484]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd2:	4b76      	ldr	r3, [pc, #472]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a75      	ldr	r2, [pc, #468]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b73      	ldr	r3, [pc, #460]	; (80021ac <MX_GPIO_Init+0x268>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f240 1105 	movw	r1, #261	; 0x105
 8001ff0:	486f      	ldr	r0, [pc, #444]	; (80021b0 <MX_GPIO_Init+0x26c>)
 8001ff2:	f002 fb03 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f248 111c 	movw	r1, #33052	; 0x811c
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002000:	f002 fafc 	bl	80045fc <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002004:	2200      	movs	r2, #0
 8002006:	f24f 0134 	movw	r1, #61492	; 0xf034
 800200a:	486a      	ldr	r0, [pc, #424]	; (80021b4 <MX_GPIO_Init+0x270>)
 800200c:	f002 faf6 	bl	80045fc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f242 0183 	movw	r1, #8323	; 0x2083
 8002016:	4868      	ldr	r0, [pc, #416]	; (80021b8 <MX_GPIO_Init+0x274>)
 8002018:	f002 faf0 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002022:	4866      	ldr	r0, [pc, #408]	; (80021bc <MX_GPIO_Init+0x278>)
 8002024:	f002 faea 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002028:	f240 1305 	movw	r3, #261	; 0x105
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	4619      	mov	r1, r3
 8002040:	485b      	ldr	r0, [pc, #364]	; (80021b0 <MX_GPIO_Init+0x26c>)
 8002042:	f002 f857 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002046:	237a      	movs	r3, #122	; 0x7a
 8002048:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <MX_GPIO_Init+0x27c>)
 800204c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4855      	ldr	r0, [pc, #340]	; (80021b0 <MX_GPIO_Init+0x26c>)
 800205a:	f002 f84b 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800205e:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002064:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <MX_GPIO_Init+0x27c>)
 8002066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	4852      	ldr	r0, [pc, #328]	; (80021bc <MX_GPIO_Init+0x278>)
 8002074:	f002 f83e 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002078:	f248 131c 	movw	r3, #33052	; 0x811c
 800207c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f002 f82e 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002098:	2301      	movs	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800209c:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <MX_GPIO_Init+0x27c>)
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4842      	ldr	r0, [pc, #264]	; (80021b4 <MX_GPIO_Init+0x270>)
 80020ac:	f002 f822 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c0:	2302      	movs	r3, #2
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	483a      	ldr	r0, [pc, #232]	; (80021b4 <MX_GPIO_Init+0x270>)
 80020cc:	f002 f812 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80020d0:	f24f 0334 	movw	r3, #61492	; 0xf034
 80020d4:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	4832      	ldr	r0, [pc, #200]	; (80021b4 <MX_GPIO_Init+0x270>)
 80020ea:	f002 f803 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80020ee:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80020f2:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <MX_GPIO_Init+0x27c>)
 80020f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	482d      	ldr	r0, [pc, #180]	; (80021b8 <MX_GPIO_Init+0x274>)
 8002104:	f001 fff6 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002108:	f242 0383 	movw	r3, #8323	; 0x2083
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	4825      	ldr	r0, [pc, #148]	; (80021b8 <MX_GPIO_Init+0x274>)
 8002122:	f001 ffe7 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002126:	f44f 7310 	mov.w	r3, #576	; 0x240
 800212a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	481f      	ldr	r0, [pc, #124]	; (80021bc <MX_GPIO_Init+0x278>)
 8002140:	f001 ffd8 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f001 ffca 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002160:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002172:	230a      	movs	r3, #10
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002180:	f001 ffb8 	bl	80040f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2017      	movs	r0, #23
 800218a:	f001 fe70 	bl	8003e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800218e:	2017      	movs	r0, #23
 8002190:	f001 fe89 	bl	8003ea6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2028      	movs	r0, #40	; 0x28
 800219a:	f001 fe68 	bl	8003e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800219e:	2028      	movs	r0, #40	; 0x28
 80021a0:	f001 fe81 	bl	8003ea6 <HAL_NVIC_EnableIRQ>

}
 80021a4:	bf00      	nop
 80021a6:	3730      	adds	r7, #48	; 0x30
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	48001000 	.word	0x48001000
 80021b4:	48000400 	.word	0x48000400
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48000800 	.word	0x48000800
 80021c0:	10110000 	.word	0x10110000

080021c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ca:	e7fe      	b.n	80021ca <Error_Handler+0x6>

080021cc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <I2Cx_MspInit+0xa8>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <I2Cx_MspInit+0xa8>)
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <I2Cx_MspInit+0xa8>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80021ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021f0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021f2:	2312      	movs	r3, #18
 80021f4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80021fe:	2304      	movs	r3, #4
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	481b      	ldr	r0, [pc, #108]	; (8002278 <I2Cx_MspInit+0xac>)
 800220a:	f001 ff73 	bl	80040f4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4818      	ldr	r0, [pc, #96]	; (8002278 <I2Cx_MspInit+0xac>)
 8002216:	f001 ff6d 	bl	80040f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <I2Cx_MspInit+0xa8>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a15      	ldr	r2, [pc, #84]	; (8002274 <I2Cx_MspInit+0xa8>)
 8002220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <I2Cx_MspInit+0xa8>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <I2Cx_MspInit+0xa8>)
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <I2Cx_MspInit+0xa8>)
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <I2Cx_MspInit+0xa8>)
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <I2Cx_MspInit+0xa8>)
 8002244:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002248:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	210f      	movs	r1, #15
 800224e:	2021      	movs	r0, #33	; 0x21
 8002250:	f001 fe0d 	bl	8003e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002254:	2021      	movs	r0, #33	; 0x21
 8002256:	f001 fe26 	bl	8003ea6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	210f      	movs	r1, #15
 800225e:	2022      	movs	r0, #34	; 0x22
 8002260:	f001 fe05 	bl	8003e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002264:	2022      	movs	r0, #34	; 0x22
 8002266:	f001 fe1e 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	48000400 	.word	0x48000400

0800227c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <I2Cx_Init+0x54>)
 8002288:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <I2Cx_Init+0x58>)
 800228e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff89 	bl	80021cc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f002 f9d9 	bl	8004672 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80022c0:	2100      	movs	r1, #0
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f002 fede 	bl	8005084 <HAL_I2CEx_ConfigAnalogFilter>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40005800 	.word	0x40005800
 80022d4:	00702681 	.word	0x00702681

080022d8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af04      	add	r7, sp, #16
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	72fb      	strb	r3, [r7, #11]
 80022ea:	460b      	mov	r3, r1
 80022ec:	813b      	strh	r3, [r7, #8]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022f6:	7afb      	ldrb	r3, [r7, #11]
 80022f8:	b299      	uxth	r1, r3
 80022fa:	88f8      	ldrh	r0, [r7, #6]
 80022fc:	893a      	ldrh	r2, [r7, #8]
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	4603      	mov	r3, r0
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f002 fb82 	bl	8004a18 <HAL_I2C_Mem_Read>
 8002314:	4603      	mov	r3, r0
 8002316:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	4619      	mov	r1, r3
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f832 	bl	800238c <I2Cx_Error>
  }
  return status;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08a      	sub	sp, #40	; 0x28
 8002336:	af04      	add	r7, sp, #16
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	4608      	mov	r0, r1
 800233c:	4611      	mov	r1, r2
 800233e:	461a      	mov	r2, r3
 8002340:	4603      	mov	r3, r0
 8002342:	72fb      	strb	r3, [r7, #11]
 8002344:	460b      	mov	r3, r1
 8002346:	813b      	strh	r3, [r7, #8]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	b299      	uxth	r1, r3
 8002354:	88f8      	ldrh	r0, [r7, #6]
 8002356:	893a      	ldrh	r2, [r7, #8]
 8002358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235c:	9302      	str	r3, [sp, #8]
 800235e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f002 fa41 	bl	80047f0 <HAL_I2C_Mem_Write>
 800236e:	4603      	mov	r3, r0
 8002370:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002378:	7afb      	ldrb	r3, [r7, #11]
 800237a:	4619      	mov	r1, r3
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f805 	bl	800238c <I2Cx_Error>
  }
  return status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f002 f9f9 	bl	8004790 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff6c 	bl	800227c <I2Cx_Init>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <SENSOR_IO_Init+0x10>)
 80023b2:	f7ff ff63 	bl	800227c <I2Cx_Init>
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000608 	.word	0x20000608

080023c0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	460b      	mov	r3, r1
 80023cc:	71bb      	strb	r3, [r7, #6]
 80023ce:	4613      	mov	r3, r2
 80023d0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80023d2:	79bb      	ldrb	r3, [r7, #6]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	79f9      	ldrb	r1, [r7, #7]
 80023d8:	2301      	movs	r3, #1
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	1d7b      	adds	r3, r7, #5
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2301      	movs	r3, #1
 80023e2:	4803      	ldr	r0, [pc, #12]	; (80023f0 <SENSOR_IO_Write+0x30>)
 80023e4:	f7ff ffa5 	bl	8002332 <I2Cx_WriteMultiple>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000608 	.word	0x20000608

080023f4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	4603      	mov	r3, r0
 80023fc:	460a      	mov	r2, r1
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	4613      	mov	r3, r2
 8002402:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002408:	79bb      	ldrb	r3, [r7, #6]
 800240a:	b29a      	uxth	r2, r3
 800240c:	79f9      	ldrb	r1, [r7, #7]
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f107 030f 	add.w	r3, r7, #15
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	4804      	ldr	r0, [pc, #16]	; (800242c <SENSOR_IO_Read+0x38>)
 800241c:	f7ff ff5c 	bl	80022d8 <I2Cx_ReadMultiple>

  return read_value;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000608 	.word	0x20000608

08002430 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af02      	add	r7, sp, #8
 8002436:	603a      	str	r2, [r7, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	460b      	mov	r3, r1
 8002440:	71bb      	strb	r3, [r7, #6]
 8002442:	4613      	mov	r3, r2
 8002444:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	b29a      	uxth	r2, r3
 800244a:	79f9      	ldrb	r1, [r7, #7]
 800244c:	88bb      	ldrh	r3, [r7, #4]
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2301      	movs	r3, #1
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <SENSOR_IO_ReadMultiple+0x38>)
 8002458:	f7ff ff3e 	bl	80022d8 <I2Cx_ReadMultiple>
 800245c:	4603      	mov	r3, r0
 800245e:	b29b      	uxth	r3, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000608 	.word	0x20000608

0800246c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002476:	2300      	movs	r3, #0
 8002478:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800247a:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <BSP_ACCELERO_Init+0x74>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4798      	blx	r3
 8002480:	4603      	mov	r3, r0
 8002482:	2b6a      	cmp	r3, #106	; 0x6a
 8002484:	d002      	beq.n	800248c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e024      	b.n	80024d6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800248c:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <BSP_ACCELERO_Init+0x78>)
 800248e:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <BSP_ACCELERO_Init+0x74>)
 8002490:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002492:	2330      	movs	r3, #48	; 0x30
 8002494:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800249a:	2300      	movs	r3, #0
 800249c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80024aa:	797a      	ldrb	r2, [r7, #5]
 80024ac:	7abb      	ldrb	r3, [r7, #10]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80024b4:	7a3b      	ldrb	r3, [r7, #8]
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b21a      	sxth	r2, r3
 80024c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <BSP_ACCELERO_Init+0x78>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	89ba      	ldrh	r2, [r7, #12]
 80024d2:	4610      	mov	r0, r2
 80024d4:	4798      	blx	r3
  }  

  return ret;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000000 	.word	0x20000000
 80024e4:	200000c4 	.word	0x200000c4

080024e8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
    }
  }
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200000c4 	.word	0x200000c4

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_MspInit+0x44>)
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_MspInit+0x44>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6613      	str	r3, [r2, #96]	; 0x60
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_MspInit+0x44>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_MspInit+0x44>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_MspInit+0x44>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_MspInit+0x44>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_ADC_MspInit+0x74>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d123      	bne.n	80025ca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_ADC_MspInit+0x78>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_ADC_MspInit+0x78>)
 8002588:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800258c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_ADC_MspInit+0x78>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_ADC_MspInit+0x78>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_ADC_MspInit+0x78>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_ADC_MspInit+0x78>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80025b2:	233f      	movs	r3, #63	; 0x3f
 80025b4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025b6:	230b      	movs	r3, #11
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <HAL_ADC_MspInit+0x7c>)
 80025c6:	f001 fd95 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	50040000 	.word	0x50040000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	48000800 	.word	0x48000800

080025e0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_DFSDM_ChannelMspInit+0x84>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d12d      	bne.n	800265c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	6613      	str	r3, [r2, #96]	; 0x60
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_DFSDM_ChannelMspInit+0x88>)
 800260e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_DFSDM_ChannelMspInit+0x88>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_DFSDM_ChannelMspInit+0x88>)
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002630:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002642:	2306      	movs	r3, #6
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	4807      	ldr	r0, [pc, #28]	; (800266c <HAL_DFSDM_ChannelMspInit+0x8c>)
 800264e:	f001 fd51 	bl	80040f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_DFSDM_ChannelMspInit+0x84>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a02      	ldr	r2, [pc, #8]	; (8002664 <HAL_DFSDM_ChannelMspInit+0x84>)
 800265a:	6013      	str	r3, [r2, #0]
  }

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	200000c8 	.word	0x200000c8
 8002668:	40021000 	.word	0x40021000
 800266c:	48001000 	.word	0x48001000

08002670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 031c 	add.w	r3, r7, #28
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2f      	ldr	r2, [pc, #188]	; (800274c <HAL_I2C_MspInit+0xdc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d129      	bne.n	80026e6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80026aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b0:	2312      	movs	r3, #18
 80026b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026bc:	2304      	movs	r3, #4
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4823      	ldr	r0, [pc, #140]	; (8002754 <HAL_I2C_MspInit+0xe4>)
 80026c8:	f001 fd14 	bl	80040f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026cc:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 80026d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026d6:	6593      	str	r3, [r2, #88]	; 0x58
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026e4:	e02d      	b.n	8002742 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_I2C_MspInit+0xe8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d128      	bne.n	8002742 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002708:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270e:	2312      	movs	r3, #18
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002712:	2301      	movs	r3, #1
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800271a:	2304      	movs	r3, #4
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <HAL_I2C_MspInit+0xe4>)
 8002726:	f001 fce5 	bl	80040f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 8002730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_I2C_MspInit+0xe0>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
}
 8002742:	bf00      	nop
 8002744:	3730      	adds	r7, #48	; 0x30
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40005400 	.word	0x40005400
 8002750:	40021000 	.word	0x40021000
 8002754:	48000400 	.word	0x48000400
 8002758:	40005800 	.word	0x40005800

0800275c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <HAL_I2C_MspDeInit+0x68>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d110      	bne.n	8002790 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_I2C_MspDeInit+0x6c>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_I2C_MspDeInit+0x6c>)
 8002774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002778:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 800277a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277e:	4813      	ldr	r0, [pc, #76]	; (80027cc <HAL_I2C_MspDeInit+0x70>)
 8002780:	f001 fe4a 	bl	8004418 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8002784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002788:	4810      	ldr	r0, [pc, #64]	; (80027cc <HAL_I2C_MspDeInit+0x70>)
 800278a:	f001 fe45 	bl	8004418 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800278e:	e014      	b.n	80027ba <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_I2C_MspDeInit+0x74>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10f      	bne.n	80027ba <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_I2C_MspDeInit+0x6c>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_I2C_MspDeInit+0x6c>)
 80027a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80027a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027aa:	4808      	ldr	r0, [pc, #32]	; (80027cc <HAL_I2C_MspDeInit+0x70>)
 80027ac:	f001 fe34 	bl	8004418 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80027b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b4:	4805      	ldr	r0, [pc, #20]	; (80027cc <HAL_I2C_MspDeInit+0x70>)
 80027b6:	f001 fe2f 	bl	8004418 <HAL_GPIO_DeInit>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40005400 	.word	0x40005400
 80027c8:	40021000 	.word	0x40021000
 80027cc:	48000400 	.word	0x48000400
 80027d0:	40005800 	.word	0x40005800

080027d4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_OSPI_MspInit+0x94>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d134      	bne.n	8002860 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_OSPI_MspInit+0x98>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_OSPI_MspInit+0x98>)
 80027fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_OSPI_MspInit+0x98>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <HAL_OSPI_MspInit+0x98>)
 8002810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <HAL_OSPI_MspInit+0x98>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6513      	str	r3, [r2, #80]	; 0x50
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_OSPI_MspInit+0x98>)
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_OSPI_MspInit+0x98>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_OSPI_MspInit+0x98>)
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_OSPI_MspInit+0x98>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800283e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002842:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002850:	230a      	movs	r3, #10
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	4619      	mov	r1, r3
 800285a:	4805      	ldr	r0, [pc, #20]	; (8002870 <HAL_OSPI_MspInit+0x9c>)
 800285c:	f001 fc4a 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002860:	bf00      	nop
 8002862:	3728      	adds	r7, #40	; 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	a0001000 	.word	0xa0001000
 800286c:	40021000 	.word	0x40021000
 8002870:	48001000 	.word	0x48001000

08002874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_SPI_MspInit+0xdc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d129      	bne.n	80028ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 8002898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289a:	4a2e      	ldr	r2, [pc, #184]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 800289c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a0:	6613      	str	r3, [r2, #96]	; 0x60
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	4b29      	ldr	r3, [pc, #164]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	4a28      	ldr	r2, [pc, #160]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80028c6:	23e0      	movs	r3, #224	; 0xe0
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028d6:	2305      	movs	r3, #5
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e4:	f001 fc06 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028e8:	e02d      	b.n	8002946 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1a      	ldr	r2, [pc, #104]	; (8002958 <HAL_SPI_MspInit+0xe4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d128      	bne.n	8002946 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_SPI_MspInit+0xe0>)
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002924:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002936:	2306      	movs	r3, #6
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293a:	f107 031c 	add.w	r3, r7, #28
 800293e:	4619      	mov	r1, r3
 8002940:	4806      	ldr	r0, [pc, #24]	; (800295c <HAL_SPI_MspInit+0xe8>)
 8002942:	f001 fbd7 	bl	80040f4 <HAL_GPIO_Init>
}
 8002946:	bf00      	nop
 8002948:	3730      	adds	r7, #48	; 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40013000 	.word	0x40013000
 8002954:	40021000 	.word	0x40021000
 8002958:	40003c00 	.word	0x40003c00
 800295c:	48000800 	.word	0x48000800

08002960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b090      	sub	sp, #64	; 0x40
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5d      	ldr	r2, [pc, #372]	; (8002af4 <HAL_UART_MspInit+0x194>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d129      	bne.n	80029d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002982:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	4a5c      	ldr	r2, [pc, #368]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800298c:	6593      	str	r3, [r2, #88]	; 0x58
 800298e:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_UART_MspInit+0x198>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_UART_MspInit+0x198>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_UART_MspInit+0x198>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80029b2:	2303      	movs	r3, #3
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029c2:	2308      	movs	r3, #8
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ca:	4619      	mov	r1, r3
 80029cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d0:	f001 fb90 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d4:	e089      	b.n	8002aea <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_UART_MspInit+0x19c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d128      	bne.n	8002a32 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80029e0:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <HAL_UART_MspInit+0x198>)
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <HAL_UART_MspInit+0x198>)
 80029e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ea:	6613      	str	r3, [r2, #96]	; 0x60
 80029ec:	4b42      	ldr	r3, [pc, #264]	; (8002af8 <HAL_UART_MspInit+0x198>)
 80029ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_UART_MspInit+0x198>)
 80029fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fc:	4a3e      	ldr	r2, [pc, #248]	; (8002af8 <HAL_UART_MspInit+0x198>)
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a04:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002a10:	23c0      	movs	r3, #192	; 0xc0
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a20:	2307      	movs	r3, #7
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4835      	ldr	r0, [pc, #212]	; (8002b00 <HAL_UART_MspInit+0x1a0>)
 8002a2c:	f001 fb62 	bl	80040f4 <HAL_GPIO_Init>
}
 8002a30:	e05b      	b.n	8002aea <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a33      	ldr	r2, [pc, #204]	; (8002b04 <HAL_UART_MspInit+0x1a4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d128      	bne.n	8002a8e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a46:	6593      	str	r3, [r2, #88]	; 0x58
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002a6c:	2378      	movs	r3, #120	; 0x78
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a7c:	2307      	movs	r3, #7
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a84:	4619      	mov	r1, r3
 8002a86:	4820      	ldr	r0, [pc, #128]	; (8002b08 <HAL_UART_MspInit+0x1a8>)
 8002a88:	f001 fb34 	bl	80040f4 <HAL_GPIO_Init>
}
 8002a8c:	e02d      	b.n	8002aea <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1e      	ldr	r2, [pc, #120]	; (8002b0c <HAL_UART_MspInit+0x1ac>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d128      	bne.n	8002aea <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab4:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_UART_MspInit+0x198>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ada:	2307      	movs	r3, #7
 8002adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4808      	ldr	r0, [pc, #32]	; (8002b08 <HAL_UART_MspInit+0x1a8>)
 8002ae6:	f001 fb05 	bl	80040f4 <HAL_GPIO_Init>
}
 8002aea:	bf00      	nop
 8002aec:	3740      	adds	r7, #64	; 0x40
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40004c00 	.word	0x40004c00
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40013800 	.word	0x40013800
 8002b00:	48000400 	.word	0x48000400
 8002b04:	40004400 	.word	0x40004400
 8002b08:	48000c00 	.word	0x48000c00
 8002b0c:	40004800 	.word	0x40004800

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <NMI_Handler+0x4>

08002b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <HardFault_Handler+0x4>

08002b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <MemManage_Handler+0x4>

08002b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b26:	e7fe      	b.n	8002b26 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5c:	f000 f986 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b68:	2020      	movs	r0, #32
 8002b6a:	f001 fd5f 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002b6e:	2040      	movs	r0, #64	; 0x40
 8002b70:	f001 fd5c 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002b74:	2080      	movs	r0, #128	; 0x80
 8002b76:	f001 fd59 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002b7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b7e:	f001 fd55 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002b8a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b8e:	f001 fd4d 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002b92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b96:	f001 fd49 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b9e:	f001 fd45 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002ba2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ba6:	f001 fd41 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002baa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bae:	f001 fd3d 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002bb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bb6:	f001 fd39 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e00a      	b.n	8002be6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bd0:	f3af 8000 	nop.w
 8002bd4:	4601      	mov	r1, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	60ba      	str	r2, [r7, #8]
 8002bdc:	b2ca      	uxtb	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3301      	adds	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	dbf0      	blt.n	8002bd0 <_read+0x12>
	}

return len;
 8002bee:	687b      	ldr	r3, [r7, #4]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e009      	b.n	8002c1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	60ba      	str	r2, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fa4a 	bl	80010ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dbf1      	blt.n	8002c0a <_write+0x12>
	}
	return len;
 8002c26:	687b      	ldr	r3, [r7, #4]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_close>:

int _close(int file)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c58:	605a      	str	r2, [r3, #4]
	return 0;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_isatty>:

int _isatty(int file)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c70:	2301      	movs	r3, #1
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
	return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <_sbrk+0x5c>)
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <_sbrk+0x60>)
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <_sbrk+0x64>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <_sbrk+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc8:	f005 fb10 	bl	80082ec <__errno>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	230c      	movs	r3, #12
 8002cd0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e009      	b.n	8002cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <_sbrk+0x64>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <_sbrk+0x64>)
 8002ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200a0000 	.word	0x200a0000
 8002cf8:	00000400 	.word	0x00000400
 8002cfc:	200000cc 	.word	0x200000cc
 8002d00:	20000660 	.word	0x20000660

08002d04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <SystemInit+0x64>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <SystemInit+0x64>)
 8002d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <SystemInit+0x68>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <SystemInit+0x68>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <SystemInit+0x68>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <SystemInit+0x68>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a0f      	ldr	r2, [pc, #60]	; (8002d6c <SystemInit+0x68>)
 8002d30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <SystemInit+0x68>)
 8002d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <SystemInit+0x68>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <SystemInit+0x68>)
 8002d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <SystemInit+0x68>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <SystemInit+0x64>)
 8002d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000ed00 	.word	0xe000ed00
 8002d6c:	40021000 	.word	0x40021000

08002d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d74:	f7ff ffc6 	bl	8002d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d7a:	e003      	b.n	8002d84 <LoopCopyDataInit>

08002d7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d82:	3104      	adds	r1, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d84:	480a      	ldr	r0, [pc, #40]	; (8002db0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d8c:	d3f6      	bcc.n	8002d7c <CopyDataInit>
	ldr	r2, =_sbss
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d90:	e002      	b.n	8002d98 <LoopFillZerobss>

08002d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d94:	f842 3b04 	str.w	r3, [r2], #4

08002d98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <LoopForever+0x16>)
	cmp	r2, r3
 8002d9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d9c:	d3f9      	bcc.n	8002d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f005 faab 	bl	80082f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002da2:	f7fe fad5 	bl	8001350 <main>

08002da6 <LoopForever>:

LoopForever:
    b LoopForever
 8002da6:	e7fe      	b.n	8002da6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002da8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002dac:	08009ef0 	.word	0x08009ef0
	ldr	r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002db4:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8002db8:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8002dbc:	2000065c 	.word	0x2000065c

08002dc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC1_IRQHandler>

08002dc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dcc:	2003      	movs	r0, #3
 8002dce:	f001 f843 	bl	8003e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f000 f80e 	bl	8002df4 <HAL_InitTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	e001      	b.n	8002de8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002de4:	f7ff fb98 	bl	8002518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002de8:	79fb      	ldrb	r3, [r7, #7]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_InitTick+0x6c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d023      	beq.n	8002e50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_InitTick+0x70>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_InitTick+0x6c>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4619      	mov	r1, r3
 8002e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 f84f 	bl	8003ec2 <HAL_SYSTICK_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b0f      	cmp	r3, #15
 8002e2e:	d809      	bhi.n	8002e44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e30:	2200      	movs	r2, #0
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f001 f819 	bl	8003e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_InitTick+0x74>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e007      	b.n	8002e54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e004      	b.n	8002e54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	e001      	b.n	8002e54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000003c 	.word	0x2000003c
 8002e64:	20000034 	.word	0x20000034
 8002e68:	20000038 	.word	0x20000038

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	2000003c 	.word	0x2000003c
 8002e90:	20000654 	.word	0x20000654

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000654 	.word	0x20000654

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff ffee 	bl	8002e94 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_Delay+0x40>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	2000003c 	.word	0x2000003c

08002ef0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3360      	adds	r3, #96	; 0x60
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <LL_ADC_SetOffset+0x44>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	03fff000 	.word	0x03fff000

08002fa0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3360      	adds	r3, #96	; 0x60
 8002fae:	461a      	mov	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3360      	adds	r3, #96	; 0x60
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	615a      	str	r2, [r3, #20]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3330      	adds	r3, #48	; 0x30
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	4413      	add	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	211f      	movs	r1, #31
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 011f 	and.w	r1, r3, #31
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	431a      	orrs	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003074:	bf00      	nop
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3314      	adds	r3, #20
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	0e5b      	lsrs	r3, r3, #25
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	0d1b      	lsrs	r3, r3, #20
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2107      	movs	r1, #7
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	401a      	ands	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	0d1b      	lsrs	r3, r3, #20
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	431a      	orrs	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0318 	and.w	r3, r3, #24
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <LL_ADC_SetChannelSingleDiff+0x44>)
 80030fc:	40d9      	lsrs	r1, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	400b      	ands	r3, r1
 8003102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003106:	431a      	orrs	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	0007ffff 	.word	0x0007ffff

08003120 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6093      	str	r3, [r2, #8]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003158:	d101      	bne.n	800315e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800317c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003180:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031a8:	d101      	bne.n	80031ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <LL_ADC_IsEnabled+0x18>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <LL_ADC_IsEnabled+0x1a>
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d101      	bne.n	80031fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d101      	bne.n	8003220 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e12d      	b.n	80034a6 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff f981 	bl	8002560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff67 	bl	8003144 <LL_ADC_IsDeepPowerDownEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff4d 	bl	8003120 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff82 	bl	8003194 <LL_ADC_IsInternalRegulatorEnabled>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d113      	bne.n	80032be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff66 	bl	800316c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032a0:	4b83      	ldr	r3, [pc, #524]	; (80034b0 <HAL_ADC_Init+0x280>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	4a83      	ldr	r2, [pc, #524]	; (80034b4 <HAL_ADC_Init+0x284>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032b0:	e002      	b.n	80032b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f9      	bne.n	80032b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff66 	bl	8003194 <LL_ADC_IsInternalRegulatorEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff77 	bl	80031e2 <LL_ADC_REG_IsConversionOngoing>
 80032f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 80c8 	bne.w	8003494 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 80c4 	bne.w	8003494 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003314:	f043 0202 	orr.w	r2, r3, #2
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff4b 	bl	80031bc <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800332c:	4862      	ldr	r0, [pc, #392]	; (80034b8 <HAL_ADC_Init+0x288>)
 800332e:	f7ff ff45 	bl	80031bc <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4619      	mov	r1, r3
 800333e:	485f      	ldr	r0, [pc, #380]	; (80034bc <HAL_ADC_Init+0x28c>)
 8003340:	f7ff fdd6 	bl	8002ef0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7e5b      	ldrb	r3, [r3, #25]
 8003348:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800334e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003354:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800335a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003362:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d106      	bne.n	8003380 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	3b01      	subs	r3, #1
 8003378:	045b      	lsls	r3, r3, #17
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_ADC_Init+0x290>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	69b9      	ldr	r1, [r7, #24]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff14 	bl	80031e2 <LL_ADC_REG_IsConversionOngoing>
 80033ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff21 	bl	8003208 <LL_ADC_INJ_IsConversionOngoing>
 80033c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d140      	bne.n	8003450 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d13d      	bne.n	8003450 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7e1b      	ldrb	r3, [r3, #24]
 80033dc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033de:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f6:	f023 0306 	bic.w	r3, r3, #6
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	69b9      	ldr	r1, [r7, #24]
 8003400:	430b      	orrs	r3, r1
 8003402:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340a:	2b01      	cmp	r3, #1
 800340c:	d118      	bne.n	8003440 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003430:	430a      	orrs	r2, r1
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	e007      	b.n	8003450 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10c      	bne.n	8003472 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f023 010f 	bic.w	r1, r3, #15
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	1e5a      	subs	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
 8003470:	e007      	b.n	8003482 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 020f 	bic.w	r2, r2, #15
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	659a      	str	r2, [r3, #88]	; 0x58
 8003492:	e007      	b.n	80034a4 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	f043 0210 	orr.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000034 	.word	0x20000034
 80034b4:	053e2d63 	.word	0x053e2d63
 80034b8:	50040000 	.word	0x50040000
 80034bc:	50040300 	.word	0x50040300
 80034c0:	fff0c007 	.word	0xfff0c007

080034c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b0b6      	sub	sp, #216	; 0xd8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x22>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e3d4      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x7cc>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fe75 	bl	80031e2 <LL_ADC_REG_IsConversionOngoing>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 83b9 	bne.w	8003c72 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d824      	bhi.n	8003552 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	3b02      	subs	r3, #2
 800350e:	2b03      	cmp	r3, #3
 8003510:	d81b      	bhi.n	800354a <HAL_ADC_ConfigChannel+0x86>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <HAL_ADC_ConfigChannel+0x54>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	08003529 	.word	0x08003529
 800351c:	08003531 	.word	0x08003531
 8003520:	08003539 	.word	0x08003539
 8003524:	08003541 	.word	0x08003541
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	220c      	movs	r2, #12
 800352c:	605a      	str	r2, [r3, #4]
          break;
 800352e:	e011      	b.n	8003554 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2212      	movs	r2, #18
 8003534:	605a      	str	r2, [r3, #4]
          break;
 8003536:	e00d      	b.n	8003554 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2218      	movs	r2, #24
 800353c:	605a      	str	r2, [r3, #4]
          break;
 800353e:	e009      	b.n	8003554 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003546:	605a      	str	r2, [r3, #4]
          break;
 8003548:	e004      	b.n	8003554 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2206      	movs	r2, #6
 800354e:	605a      	str	r2, [r3, #4]
          break;
 8003550:	e000      	b.n	8003554 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003552:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	f7ff fd61 	bl	8003028 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fe39 	bl	80031e2 <LL_ADC_REG_IsConversionOngoing>
 8003570:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fe45 	bl	8003208 <LL_ADC_INJ_IsConversionOngoing>
 800357e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003582:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 81c1 	bne.w	800390e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800358c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 81bc 	bne.w	800390e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800359e:	d10f      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	4619      	mov	r1, r3
 80035ac:	f7ff fd68 	bl	8003080 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fd22 	bl	8003002 <LL_ADC_SetSamplingTimeCommonConfig>
 80035be:	e00e      	b.n	80035de <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f7ff fd57 	bl	8003080 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fd12 	bl	8003002 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d00a      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6919      	ldr	r1, [r3, #16]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003610:	f7ff fca2 	bl	8002f58 <LL_ADC_SetOffset>
 8003614:	e17b      	b.n	800390e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fcbf 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 8003622:	4603      	mov	r3, r0
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x17e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fcb4 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 8003638:	4603      	mov	r3, r0
 800363a:	0e9b      	lsrs	r3, r3, #26
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	e01e      	b.n	8003680 <HAL_ADC_ConfigChannel+0x1bc>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fca9 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	e004      	b.n	800367e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1d4>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	e018      	b.n	80036ca <HAL_ADC_ConfigChannel+0x206>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80036bc:	2320      	movs	r3, #32
 80036be:	e004      	b.n	80036ca <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80036c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d106      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fc78 	bl	8002fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fc5c 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x244>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fc51 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	0e9b      	lsrs	r3, r3, #26
 8003702:	f003 021f 	and.w	r2, r3, #31
 8003706:	e01e      	b.n	8003746 <HAL_ADC_ConfigChannel+0x282>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fc46 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800372a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800372e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003736:	2320      	movs	r3, #32
 8003738:	e004      	b.n	8003744 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800373a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <HAL_ADC_ConfigChannel+0x29a>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0e9b      	lsrs	r3, r3, #26
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	e018      	b.n	8003790 <HAL_ADC_ConfigChannel+0x2cc>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800377a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003782:	2320      	movs	r3, #32
 8003784:	e004      	b.n	8003790 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003790:	429a      	cmp	r2, r3
 8003792:	d106      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fc15 	bl	8002fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fbf9 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x30a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fbee 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	0e9b      	lsrs	r3, r3, #26
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	e01e      	b.n	800380c <HAL_ADC_ConfigChannel+0x348>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fbe3 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80037ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80037f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e004      	b.n	800380a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003804:	fab3 f383 	clz	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x360>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	e016      	b.n	8003852 <HAL_ADC_ConfigChannel+0x38e>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800383c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	e004      	b.n	8003852 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003852:	429a      	cmp	r2, r3
 8003854:	d106      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fbb4 	bl	8002fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2103      	movs	r1, #3
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fb98 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 8003870:	4603      	mov	r3, r0
 8003872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x3cc>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2103      	movs	r1, #3
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fb8d 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 8003886:	4603      	mov	r3, r0
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	f003 021f 	and.w	r2, r3, #31
 800388e:	e017      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x3fc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2103      	movs	r1, #3
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fb82 	bl	8002fa0 <LL_ADC_GetOffsetChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038aa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e003      	b.n	80038be <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80038b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x414>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	0e9b      	lsrs	r3, r3, #26
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	e011      	b.n	80038fc <HAL_ADC_ConfigChannel+0x438>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80038f0:	2320      	movs	r3, #32
 80038f2:	e003      	b.n	80038fc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d106      	bne.n	800390e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	2103      	movs	r1, #3
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fb5f 	bl	8002fcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fc52 	bl	80031bc <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 8140 	bne.w	8003ba0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	461a      	mov	r2, r3
 800392e:	f7ff fbd3 	bl	80030d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4a8f      	ldr	r2, [pc, #572]	; (8003b74 <HAL_ADC_ConfigChannel+0x6b0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	f040 8131 	bne.w	8003ba0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x4a2>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0e9b      	lsrs	r3, r3, #26
 8003954:	3301      	adds	r3, #1
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2b09      	cmp	r3, #9
 800395c:	bf94      	ite	ls
 800395e:	2301      	movls	r3, #1
 8003960:	2300      	movhi	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	e019      	b.n	800399a <HAL_ADC_ConfigChannel+0x4d6>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003976:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e003      	b.n	800398a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3301      	adds	r3, #1
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2b09      	cmp	r3, #9
 8003992:	bf94      	ite	ls
 8003994:	2301      	movls	r3, #1
 8003996:	2300      	movhi	r3, #0
 8003998:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800399a:	2b00      	cmp	r3, #0
 800399c:	d079      	beq.n	8003a92 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x4f6>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	3301      	adds	r3, #1
 80039b2:	069b      	lsls	r3, r3, #26
 80039b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039b8:	e015      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x522>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e003      	b.n	80039de <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	069b      	lsls	r3, r3, #26
 80039e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x542>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	e017      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x572>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e003      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	ea42 0103 	orr.w	r1, r2, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x598>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	0e9b      	lsrs	r3, r3, #26
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f003 021f 	and.w	r2, r3, #31
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	051b      	lsls	r3, r3, #20
 8003a5a:	e018      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x5ca>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003a74:	2320      	movs	r3, #32
 8003a76:	e003      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	3301      	adds	r3, #1
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	4613      	mov	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	e081      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x5ea>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0e9b      	lsrs	r3, r3, #26
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	069b      	lsls	r3, r3, #26
 8003aa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aac:	e015      	b.n	8003ada <HAL_ADC_ConfigChannel+0x616>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	e003      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	069b      	lsls	r3, r3, #26
 8003ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x636>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	0e9b      	lsrs	r3, r3, #26
 8003aec:	3301      	adds	r3, #1
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	e017      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x666>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	61fb      	str	r3, [r7, #28]
  return result;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e003      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2101      	movs	r1, #1
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	ea42 0103 	orr.w	r1, r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x692>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	3301      	adds	r3, #1
 8003b42:	f003 021f 	and.w	r2, r3, #31
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3b1e      	subs	r3, #30
 8003b4e:	051b      	lsls	r3, r3, #20
 8003b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b54:	e01e      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x6d0>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	613b      	str	r3, [r7, #16]
  return result;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	e006      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x6bc>
 8003b72:	bf00      	nop
 8003b74:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f003 021f 	and.w	r2, r3, #31
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b1e      	subs	r3, #30
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b94:	430b      	orrs	r3, r1
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	6892      	ldr	r2, [r2, #8]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7ff fa70 	bl	8003080 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d06b      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bac:	483b      	ldr	r0, [pc, #236]	; (8003c9c <HAL_ADC_ConfigChannel+0x7d8>)
 8003bae:	f7ff f9c5 	bl	8002f3c <LL_ADC_GetCommonPathInternalCh>
 8003bb2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a39      	ldr	r2, [pc, #228]	; (8003ca0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d126      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d120      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d156      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bde:	4619      	mov	r1, r3
 8003be0:	482e      	ldr	r0, [pc, #184]	; (8003c9c <HAL_ADC_ConfigChannel+0x7d8>)
 8003be2:	f7ff f998 	bl	8002f16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003be6:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <HAL_ADC_ConfigChannel+0x7e8>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	099a      	lsrs	r2, r3, #6
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bfe:	e002      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f9      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c0c:	e03a      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a27      	ldr	r2, [pc, #156]	; (8003cb0 <HAL_ADC_ConfigChannel+0x7ec>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d113      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x77c>
 8003c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d12a      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c36:	4619      	mov	r1, r3
 8003c38:	4818      	ldr	r0, [pc, #96]	; (8003c9c <HAL_ADC_ConfigChannel+0x7d8>)
 8003c3a:	f7ff f96c 	bl	8002f16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c3e:	e021      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d11c      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d111      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480c      	ldr	r0, [pc, #48]	; (8003c9c <HAL_ADC_ConfigChannel+0x7d8>)
 8003c6c:	f7ff f953 	bl	8002f16 <LL_ADC_SetCommonPathInternalCh>
 8003c70:	e008      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003c8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	37d8      	adds	r7, #216	; 0xd8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	80080000 	.word	0x80080000
 8003c9c:	50040300 	.word	0x50040300
 8003ca0:	c7520000 	.word	0xc7520000
 8003ca4:	50040000 	.word	0x50040000
 8003ca8:	20000034 	.word	0x20000034
 8003cac:	053e2d63 	.word	0x053e2d63
 8003cb0:	cb840000 	.word	0xcb840000
 8003cb4:	80000001 	.word	0x80000001

08003cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <__NVIC_SetPriorityGrouping+0x44>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cea:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <__NVIC_SetPriorityGrouping+0x44>)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	60d3      	str	r3, [r2, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <__NVIC_GetPriorityGrouping+0x18>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	f003 0307 	and.w	r3, r3, #7
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	db0b      	blt.n	8003d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	f003 021f 	and.w	r2, r3, #31
 8003d34:	4907      	ldr	r1, [pc, #28]	; (8003d54 <__NVIC_EnableIRQ+0x38>)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e000e100 	.word	0xe000e100

08003d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db0a      	blt.n	8003d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	490c      	ldr	r1, [pc, #48]	; (8003da4 <__NVIC_SetPriority+0x4c>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	0112      	lsls	r2, r2, #4
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d80:	e00a      	b.n	8003d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4908      	ldr	r1, [pc, #32]	; (8003da8 <__NVIC_SetPriority+0x50>)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	440b      	add	r3, r1
 8003d96:	761a      	strb	r2, [r3, #24]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000e100 	.word	0xe000e100
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f1c3 0307 	rsb	r3, r3, #7
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	bf28      	it	cs
 8003dca:	2304      	movcs	r3, #4
 8003dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d902      	bls.n	8003ddc <NVIC_EncodePriority+0x30>
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3b03      	subs	r3, #3
 8003dda:	e000      	b.n	8003dde <NVIC_EncodePriority+0x32>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	401a      	ands	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	43d9      	mvns	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	4313      	orrs	r3, r2
         );
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e24:	d301      	bcc.n	8003e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e26:	2301      	movs	r3, #1
 8003e28:	e00f      	b.n	8003e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <SysTick_Config+0x40>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e32:	210f      	movs	r1, #15
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	f7ff ff8e 	bl	8003d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <SysTick_Config+0x40>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <SysTick_Config+0x40>)
 8003e44:	2207      	movs	r2, #7
 8003e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	e000e010 	.word	0xe000e010

08003e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff29 	bl	8003cb8 <__NVIC_SetPriorityGrouping>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4603      	mov	r3, r0
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e80:	f7ff ff3e 	bl	8003d00 <__NVIC_GetPriorityGrouping>
 8003e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	6978      	ldr	r0, [r7, #20]
 8003e8c:	f7ff ff8e 	bl	8003dac <NVIC_EncodePriority>
 8003e90:	4602      	mov	r2, r0
 8003e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff5d 	bl	8003d58 <__NVIC_SetPriority>
}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4603      	mov	r3, r0
 8003eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff31 	bl	8003d1c <__NVIC_EnableIRQ>
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ffa2 	bl	8003e14 <SysTick_Config>
 8003ed0:	4603      	mov	r3, r0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0ac      	b.n	8004048 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f8b2 	bl	800405c <DFSDM_GetChannelFromInstance>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b55      	ldr	r3, [pc, #340]	; (8004050 <HAL_DFSDM_ChannelInit+0x174>)
 8003efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e09f      	b.n	8004048 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fe fb69 	bl	80025e0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <HAL_DFSDM_ChannelInit+0x178>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a4f      	ldr	r2, [pc, #316]	; (8004054 <HAL_DFSDM_ChannelInit+0x178>)
 8003f16:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003f18:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <HAL_DFSDM_ChannelInit+0x178>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d125      	bne.n	8003f6c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003f20:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4c      	ldr	r2, [pc, #304]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f2a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4948      	ldr	r1, [pc, #288]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a46      	ldr	r2, [pc, #280]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f40:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003f44:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	791b      	ldrb	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003f4e:	4b42      	ldr	r3, [pc, #264]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	493f      	ldr	r1, [pc, #252]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003f60:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f6a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003f7a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f8a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003f90:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 020f 	bic.w	r2, r2, #15
 8003fa8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003fd0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6899      	ldr	r1, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f002 0207 	and.w	r2, r2, #7
 8003ffc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004028:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f810 	bl	800405c <DFSDM_GetChannelFromInstance>
 800403c:	4601      	mov	r1, r0
 800403e:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_DFSDM_ChannelInit+0x174>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200000d4 	.word	0x200000d4
 8004054:	200000d0 	.word	0x200000d0
 8004058:	40016000 	.word	0x40016000

0800405c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d102      	bne.n	8004072 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e02b      	b.n	80040ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <DFSDM_GetChannelFromInstance+0x80>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d102      	bne.n	8004080 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e024      	b.n	80040ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <DFSDM_GetChannelFromInstance+0x84>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d102      	bne.n	800408e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004088:	2302      	movs	r3, #2
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e01d      	b.n	80040ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <DFSDM_GetChannelFromInstance+0x88>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d102      	bne.n	800409c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004096:	2304      	movs	r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e016      	b.n	80040ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <DFSDM_GetChannelFromInstance+0x8c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d102      	bne.n	80040aa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80040a4:	2305      	movs	r3, #5
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e00f      	b.n	80040ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <DFSDM_GetChannelFromInstance+0x90>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d102      	bne.n	80040b8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80040b2:	2306      	movs	r3, #6
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e008      	b.n	80040ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <DFSDM_GetChannelFromInstance+0x94>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d102      	bne.n	80040c6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80040c0:	2307      	movs	r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	e001      	b.n	80040ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80040c6:	2303      	movs	r3, #3
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40016000 	.word	0x40016000
 80040dc:	40016020 	.word	0x40016020
 80040e0:	40016040 	.word	0x40016040
 80040e4:	40016080 	.word	0x40016080
 80040e8:	400160a0 	.word	0x400160a0
 80040ec:	400160c0 	.word	0x400160c0
 80040f0:	400160e0 	.word	0x400160e0

080040f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004102:	e166      	b.n	80043d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8158 	beq.w	80043cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d00b      	beq.n	800413c <HAL_GPIO_Init+0x48>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d007      	beq.n	800413c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004130:	2b11      	cmp	r3, #17
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b12      	cmp	r3, #18
 800413a:	d130      	bne.n	800419e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4013      	ands	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004172:	2201      	movs	r2, #1
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0201 	and.w	r2, r3, #1
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0xea>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b12      	cmp	r3, #18
 80041dc:	d123      	bne.n	8004226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	08da      	lsrs	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3208      	adds	r2, #8
 80041e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	220f      	movs	r2, #15
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	08da      	lsrs	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3208      	adds	r2, #8
 8004220:	6939      	ldr	r1, [r7, #16]
 8004222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0203 	and.w	r2, r3, #3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80b2 	beq.w	80043cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004268:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <HAL_GPIO_Init+0x2fc>)
 800426a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426c:	4a60      	ldr	r2, [pc, #384]	; (80043f0 <HAL_GPIO_Init+0x2fc>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6613      	str	r3, [r2, #96]	; 0x60
 8004274:	4b5e      	ldr	r3, [pc, #376]	; (80043f0 <HAL_GPIO_Init+0x2fc>)
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004280:	4a5c      	ldr	r2, [pc, #368]	; (80043f4 <HAL_GPIO_Init+0x300>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3302      	adds	r3, #2
 8004288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042aa:	d02b      	beq.n	8004304 <HAL_GPIO_Init+0x210>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <HAL_GPIO_Init+0x304>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d025      	beq.n	8004300 <HAL_GPIO_Init+0x20c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a51      	ldr	r2, [pc, #324]	; (80043fc <HAL_GPIO_Init+0x308>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01f      	beq.n	80042fc <HAL_GPIO_Init+0x208>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a50      	ldr	r2, [pc, #320]	; (8004400 <HAL_GPIO_Init+0x30c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d019      	beq.n	80042f8 <HAL_GPIO_Init+0x204>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a4f      	ldr	r2, [pc, #316]	; (8004404 <HAL_GPIO_Init+0x310>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_GPIO_Init+0x200>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a4e      	ldr	r2, [pc, #312]	; (8004408 <HAL_GPIO_Init+0x314>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00d      	beq.n	80042f0 <HAL_GPIO_Init+0x1fc>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a4d      	ldr	r2, [pc, #308]	; (800440c <HAL_GPIO_Init+0x318>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <HAL_GPIO_Init+0x1f8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a4c      	ldr	r2, [pc, #304]	; (8004410 <HAL_GPIO_Init+0x31c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_GPIO_Init+0x1f4>
 80042e4:	2307      	movs	r3, #7
 80042e6:	e00e      	b.n	8004306 <HAL_GPIO_Init+0x212>
 80042e8:	2308      	movs	r3, #8
 80042ea:	e00c      	b.n	8004306 <HAL_GPIO_Init+0x212>
 80042ec:	2306      	movs	r3, #6
 80042ee:	e00a      	b.n	8004306 <HAL_GPIO_Init+0x212>
 80042f0:	2305      	movs	r3, #5
 80042f2:	e008      	b.n	8004306 <HAL_GPIO_Init+0x212>
 80042f4:	2304      	movs	r3, #4
 80042f6:	e006      	b.n	8004306 <HAL_GPIO_Init+0x212>
 80042f8:	2303      	movs	r3, #3
 80042fa:	e004      	b.n	8004306 <HAL_GPIO_Init+0x212>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e002      	b.n	8004306 <HAL_GPIO_Init+0x212>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_GPIO_Init+0x212>
 8004304:	2300      	movs	r3, #0
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	f002 0203 	and.w	r2, r2, #3
 800430c:	0092      	lsls	r2, r2, #2
 800430e:	4093      	lsls	r3, r2
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004316:	4937      	ldr	r1, [pc, #220]	; (80043f4 <HAL_GPIO_Init+0x300>)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	089b      	lsrs	r3, r3, #2
 800431c:	3302      	adds	r3, #2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004324:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_GPIO_Init+0x320>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43db      	mvns	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004348:	4a32      	ldr	r2, [pc, #200]	; (8004414 <HAL_GPIO_Init+0x320>)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_GPIO_Init+0x320>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004372:	4a28      	ldr	r2, [pc, #160]	; (8004414 <HAL_GPIO_Init+0x320>)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004378:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_GPIO_Init+0x320>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	43db      	mvns	r3, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800439c:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <HAL_GPIO_Init+0x320>)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043a2:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <HAL_GPIO_Init+0x320>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_GPIO_Init+0x320>)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3301      	adds	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f ae91 	bne.w	8004104 <HAL_GPIO_Init+0x10>
  }
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40010000 	.word	0x40010000
 80043f8:	48000400 	.word	0x48000400
 80043fc:	48000800 	.word	0x48000800
 8004400:	48000c00 	.word	0x48000c00
 8004404:	48001000 	.word	0x48001000
 8004408:	48001400 	.word	0x48001400
 800440c:	48001800 	.word	0x48001800
 8004410:	48001c00 	.word	0x48001c00
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004426:	e0c9      	b.n	80045bc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004428:	2201      	movs	r2, #1
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80bc 	beq.w	80045b6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800443e:	4a66      	ldr	r2, [pc, #408]	; (80045d8 <HAL_GPIO_DeInit+0x1c0>)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	3302      	adds	r3, #2
 8004446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	220f      	movs	r2, #15
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004466:	d02b      	beq.n	80044c0 <HAL_GPIO_DeInit+0xa8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a5c      	ldr	r2, [pc, #368]	; (80045dc <HAL_GPIO_DeInit+0x1c4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d025      	beq.n	80044bc <HAL_GPIO_DeInit+0xa4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a5b      	ldr	r2, [pc, #364]	; (80045e0 <HAL_GPIO_DeInit+0x1c8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d01f      	beq.n	80044b8 <HAL_GPIO_DeInit+0xa0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a5a      	ldr	r2, [pc, #360]	; (80045e4 <HAL_GPIO_DeInit+0x1cc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d019      	beq.n	80044b4 <HAL_GPIO_DeInit+0x9c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a59      	ldr	r2, [pc, #356]	; (80045e8 <HAL_GPIO_DeInit+0x1d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_GPIO_DeInit+0x98>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_GPIO_DeInit+0x1d4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00d      	beq.n	80044ac <HAL_GPIO_DeInit+0x94>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a57      	ldr	r2, [pc, #348]	; (80045f0 <HAL_GPIO_DeInit+0x1d8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <HAL_GPIO_DeInit+0x90>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a56      	ldr	r2, [pc, #344]	; (80045f4 <HAL_GPIO_DeInit+0x1dc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_GPIO_DeInit+0x8c>
 80044a0:	2307      	movs	r3, #7
 80044a2:	e00e      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044a4:	2308      	movs	r3, #8
 80044a6:	e00c      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044a8:	2306      	movs	r3, #6
 80044aa:	e00a      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044ac:	2305      	movs	r3, #5
 80044ae:	e008      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044b0:	2304      	movs	r3, #4
 80044b2:	e006      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044b4:	2303      	movs	r3, #3
 80044b6:	e004      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e002      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_GPIO_DeInit+0xaa>
 80044c0:	2300      	movs	r3, #0
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	f002 0203 	and.w	r2, r2, #3
 80044c8:	0092      	lsls	r2, r2, #2
 80044ca:	4093      	lsls	r3, r2
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d132      	bne.n	8004538 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80044d2:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	43db      	mvns	r3, r3
 80044da:	4947      	ldr	r1, [pc, #284]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 80044dc:	4013      	ands	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80044e0:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	4943      	ldr	r1, [pc, #268]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80044ee:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	4940      	ldr	r1, [pc, #256]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80044fc:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	43db      	mvns	r3, r3
 8004504:	493c      	ldr	r1, [pc, #240]	; (80045f8 <HAL_GPIO_DeInit+0x1e0>)
 8004506:	4013      	ands	r3, r2
 8004508:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	220f      	movs	r2, #15
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800451a:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <HAL_GPIO_DeInit+0x1c0>)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	3302      	adds	r3, #2
 8004522:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	43da      	mvns	r2, r3
 800452a:	482b      	ldr	r0, [pc, #172]	; (80045d8 <HAL_GPIO_DeInit+0x1c0>)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	400a      	ands	r2, r1
 8004532:	3302      	adds	r3, #2
 8004534:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2103      	movs	r1, #3
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	08da      	lsrs	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3208      	adds	r2, #8
 8004554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	08d2      	lsrs	r2, r2, #3
 800456c:	4019      	ands	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3208      	adds	r2, #8
 8004572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2103      	movs	r1, #3
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	2101      	movs	r1, #1
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2103      	movs	r1, #3
 80045aa:	fa01 f303 	lsl.w	r3, r1, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	401a      	ands	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	3301      	adds	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f af2f 	bne.w	8004428 <HAL_GPIO_DeInit+0x10>
  }
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	48000400 	.word	0x48000400
 80045e0:	48000800 	.word	0x48000800
 80045e4:	48000c00 	.word	0x48000c00
 80045e8:	48001000 	.word	0x48001000
 80045ec:	48001400 	.word	0x48001400
 80045f0:	48001800 	.word	0x48001800
 80045f4:	48001c00 	.word	0x48001c00
 80045f8:	40010400 	.word	0x40010400

080045fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
 8004608:	4613      	mov	r3, r2
 800460a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800460c:	787b      	ldrb	r3, [r7, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004618:	e002      	b.n	8004620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004642:	4a05      	ldr	r2, [pc, #20]	; (8004658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f806 	bl	800465c <HAL_GPIO_EXTI_Callback>
  }
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40010400 	.word	0x40010400

0800465c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e081      	b.n	8004788 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fd ffe9 	bl	8002670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2224      	movs	r2, #36	; 0x24
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	e006      	b.n	80046fa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d104      	bne.n	800470c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800470a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800471a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800472e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	021a      	lsls	r2, r3, #8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69d9      	ldr	r1, [r3, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e021      	b.n	80047e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2224      	movs	r2, #36	; 0x24
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd ffce 	bl	800275c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b20      	cmp	r3, #32
 8004814:	f040 80f9 	bne.w	8004a0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_I2C_Mem_Write+0x34>
 800481e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0ed      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_I2C_Mem_Write+0x4e>
 800483a:	2302      	movs	r3, #2
 800483c:	e0e6      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004846:	f7fe fb25 	bl	8002e94 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2319      	movs	r3, #25
 8004852:	2201      	movs	r2, #1
 8004854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fac3 	bl	8004de4 <I2C_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0d1      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2221      	movs	r2, #33	; 0x21
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2240      	movs	r2, #64	; 0x40
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a3a      	ldr	r2, [r7, #32]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004890:	88f8      	ldrh	r0, [r7, #6]
 8004892:	893a      	ldrh	r2, [r7, #8]
 8004894:	8979      	ldrh	r1, [r7, #10]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	4603      	mov	r3, r0
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f9d3 	bl	8004c4c <I2C_RequestMemoryWrite>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0a9      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2bff      	cmp	r3, #255	; 0xff
 80048c0:	d90e      	bls.n	80048e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	22ff      	movs	r2, #255	; 0xff
 80048c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	8979      	ldrh	r1, [r7, #10]
 80048d0:	2300      	movs	r3, #0
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fba5 	bl	8005028 <I2C_TransferConfig>
 80048de:	e00f      	b.n	8004900 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	8979      	ldrh	r1, [r7, #10]
 80048f2:	2300      	movs	r3, #0
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fb94 	bl	8005028 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 faad 	bl	8004e64 <I2C_WaitOnTXISFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e07b      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d034      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x1c8>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d130      	bne.n	80049b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fa3f 	bl	8004de4 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04d      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2bff      	cmp	r3, #255	; 0xff
 8004978:	d90e      	bls.n	8004998 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	b2da      	uxtb	r2, r3
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	2300      	movs	r3, #0
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fb49 	bl	8005028 <I2C_TransferConfig>
 8004996:	e00f      	b.n	80049b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	8979      	ldrh	r1, [r7, #10]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fb38 	bl	8005028 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d19e      	bne.n	8004900 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fa8c 	bl	8004ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01a      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2220      	movs	r2, #32
 80049dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_I2C_Mem_Write+0x224>)
 80049ea:	400b      	ands	r3, r1
 80049ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	fe00e800 	.word	0xfe00e800

08004a18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	813b      	strh	r3, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	f040 80fd 	bne.w	8004c3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_I2C_Mem_Read+0x34>
 8004a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0f1      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_I2C_Mem_Read+0x4e>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0ea      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a6e:	f7fe fa11 	bl	8002e94 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2319      	movs	r3, #25
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f9af 	bl	8004de4 <I2C_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0d5      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2222      	movs	r2, #34	; 0x22
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ab8:	88f8      	ldrh	r0, [r7, #6]
 8004aba:	893a      	ldrh	r2, [r7, #8]
 8004abc:	8979      	ldrh	r1, [r7, #10]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f913 	bl	8004cf4 <I2C_RequestMemoryRead>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0ad      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2bff      	cmp	r3, #255	; 0xff
 8004ae8:	d90e      	bls.n	8004b08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	22ff      	movs	r2, #255	; 0xff
 8004aee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	8979      	ldrh	r1, [r7, #10]
 8004af8:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <HAL_I2C_Mem_Read+0x22c>)
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fa91 	bl	8005028 <I2C_TransferConfig>
 8004b06:	e00f      	b.n	8004b28 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	8979      	ldrh	r1, [r7, #10]
 8004b1a:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_I2C_Mem_Read+0x22c>)
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fa80 	bl	8005028 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2104      	movs	r1, #4
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f956 	bl	8004de4 <I2C_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e07c      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d034      	beq.n	8004be8 <HAL_I2C_Mem_Read+0x1d0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d130      	bne.n	8004be8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2180      	movs	r1, #128	; 0x80
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f927 	bl	8004de4 <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e04d      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2bff      	cmp	r3, #255	; 0xff
 8004ba8:	d90e      	bls.n	8004bc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	22ff      	movs	r2, #255	; 0xff
 8004bae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	8979      	ldrh	r1, [r7, #10]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fa31 	bl	8005028 <I2C_TransferConfig>
 8004bc6:	e00f      	b.n	8004be8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	8979      	ldrh	r1, [r7, #10]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa20 	bl	8005028 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d19a      	bne.n	8004b28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f974 	bl	8004ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e01a      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_I2C_Mem_Read+0x230>)
 8004c1a:	400b      	ands	r3, r1
 8004c1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	80002400 	.word	0x80002400
 8004c48:	fe00e800 	.word	0xfe00e800

08004c4c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	817b      	strh	r3, [r7, #10]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	813b      	strh	r3, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	8979      	ldrh	r1, [r7, #10]
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <I2C_RequestMemoryWrite+0xa4>)
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f9d7 	bl	8005028 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	69b9      	ldr	r1, [r7, #24]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f8f0 	bl	8004e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e02c      	b.n	8004ce8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c94:	893b      	ldrh	r3, [r7, #8]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c9e:	e015      	b.n	8004ccc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ca0:	893b      	ldrh	r3, [r7, #8]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	69b9      	ldr	r1, [r7, #24]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f8d6 	bl	8004e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e012      	b.n	8004ce8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc2:	893b      	ldrh	r3, [r7, #8]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2180      	movs	r1, #128	; 0x80
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f884 	bl	8004de4 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	80002000 	.word	0x80002000

08004cf4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	817b      	strh	r3, [r7, #10]
 8004d06:	460b      	mov	r3, r1
 8004d08:	813b      	strh	r3, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	8979      	ldrh	r1, [r7, #10]
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <I2C_RequestMemoryRead+0xa4>)
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f984 	bl	8005028 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f89d 	bl	8004e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e02c      	b.n	8004d8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3a:	893b      	ldrh	r3, [r7, #8]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28
 8004d44:	e015      	b.n	8004d72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d46:	893b      	ldrh	r3, [r7, #8]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f883 	bl	8004e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e012      	b.n	8004d8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d68:	893b      	ldrh	r3, [r7, #8]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2140      	movs	r1, #64	; 0x40
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f831 	bl	8004de4 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	80002000 	.word	0x80002000

08004d9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d103      	bne.n	8004dba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d007      	beq.n	8004dd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	619a      	str	r2, [r3, #24]
  }
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df4:	e022      	b.n	8004e3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d01e      	beq.n	8004e3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fe f849 	bl	8002e94 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d113      	bne.n	8004e3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e00f      	b.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4013      	ands	r3, r2
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d0cd      	beq.n	8004df6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e70:	e02c      	b.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f870 	bl	8004f5c <I2C_IsAcknowledgeFailed>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e02a      	b.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d01e      	beq.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8e:	f7fe f801 	bl	8002e94 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d302      	bcc.n	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d113      	bne.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e007      	b.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d1cb      	bne.n	8004e72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef0:	e028      	b.n	8004f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f830 	bl	8004f5c <I2C_IsAcknowledgeFailed>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e026      	b.n	8004f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f06:	f7fd ffc5 	bl	8002e94 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d302      	bcc.n	8004f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d113      	bne.n	8004f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e007      	b.n	8004f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d1cf      	bne.n	8004ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d151      	bne.n	800501a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f76:	e022      	b.n	8004fbe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d01e      	beq.n	8004fbe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fd ff88 	bl	8002e94 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_IsAcknowledgeFailed+0x3a>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d113      	bne.n	8004fbe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e02e      	b.n	800501c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d1d5      	bne.n	8004f78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff fedd 	bl	8004d9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <I2C_IsAcknowledgeFailed+0xc8>)
 8004fee:	400b      	ands	r3, r1
 8004ff0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	f043 0204 	orr.w	r2, r3, #4
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	fe00e800 	.word	0xfe00e800

08005028 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	817b      	strh	r3, [r7, #10]
 8005036:	4613      	mov	r3, r2
 8005038:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	0d5b      	lsrs	r3, r3, #21
 8005044:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005048:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <I2C_TransferConfig+0x58>)
 800504a:	430b      	orrs	r3, r1
 800504c:	43db      	mvns	r3, r3
 800504e:	ea02 0103 	and.w	r1, r2, r3
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005058:	7a7b      	ldrb	r3, [r7, #9]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	431a      	orrs	r2, r3
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	03ff63ff 	.word	0x03ff63ff

08005084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b20      	cmp	r3, #32
 8005098:	d138      	bne.n	800510c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e032      	b.n	800510e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	; 0x24
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6819      	ldr	r1, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b20      	cmp	r3, #32
 800512e:	d139      	bne.n	80051a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800513a:	2302      	movs	r3, #2
 800513c:	e033      	b.n	80051a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2224      	movs	r2, #36	; 0x24
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800516c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80051c0:	f7fd fe68 	bl	8002e94 <HAL_GetTick>
 80051c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e092      	b.n	80052f8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f040 808b 	bne.w	80052f8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fd faf6 	bl	80027d4 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80051e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f88b 	bl	8005308 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	4b42      	ldr	r3, [pc, #264]	; (8005304 <HAL_OSPI_Init+0x150>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	68d1      	ldr	r1, [r2, #12]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6912      	ldr	r2, [r2, #16]
 8005204:	3a01      	subs	r2, #1
 8005206:	0412      	lsls	r2, r2, #16
 8005208:	4311      	orrs	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6952      	ldr	r2, [r2, #20]
 800520e:	3a01      	subs	r2, #1
 8005210:	0212      	lsls	r2, r2, #8
 8005212:	4311      	orrs	r1, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005218:	4311      	orrs	r1, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	69d2      	ldr	r2, [r2, #28]
 800521e:	4311      	orrs	r1, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	430b      	orrs	r3, r1
 8005226:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	0412      	lsls	r2, r2, #16
 8005232:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	3b01      	subs	r3, #1
 8005244:	021a      	lsls	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	2120      	movs	r1, #32
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fbb8 	bl	80059d0 <OSPI_WaitFlagStateUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d146      	bne.n	80052f8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052a0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d107      	bne.n	80052e0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0202 	orr.w	r2, r2, #2
 80052de:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e8:	d103      	bne.n	80052f2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44
 80052f0:	e002      	b.n	80052f8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	f8e0f8f4 	.word	0xf8e0f8f4

08005308 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b092      	sub	sp, #72	; 0x48
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <HAL_OSPIM_Config+0x40>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d105      	bne.n	8005356 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005354:	e004      	b.n	8005360 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005356:	2301      	movs	r3, #1
 8005358:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005360:	2300      	movs	r3, #0
 8005362:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005366:	e01f      	b.n	80053a8 <HAL_OSPIM_Config+0x80>
 8005368:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800536c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005370:	3301      	adds	r3, #1
 8005372:	b2d8      	uxtb	r0, r3
 8005374:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005378:	f107 0114 	add.w	r1, r7, #20
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	4619      	mov	r1, r3
 8005388:	f000 fb5a 	bl	8005a40 <OSPIM_GetConfig>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2208      	movs	r2, #8
 800539c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800539e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053a2:	3301      	adds	r3, #1
 80053a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80053a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d9dd      	bls.n	800536c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80053b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f040 82fe 	bne.w	80059b6 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80053ba:	4bcd      	ldr	r3, [pc, #820]	; (80056f0 <HAL_OSPIM_Config+0x3c8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80053c6:	4bca      	ldr	r3, [pc, #808]	; (80056f0 <HAL_OSPIM_Config+0x3c8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4ac9      	ldr	r2, [pc, #804]	; (80056f0 <HAL_OSPIM_Config+0x3c8>)
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80053d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80053de:	4bc5      	ldr	r3, [pc, #788]	; (80056f4 <HAL_OSPIM_Config+0x3cc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80053ea:	4bc2      	ldr	r3, [pc, #776]	; (80056f4 <HAL_OSPIM_Config+0x3cc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4ac1      	ldr	r2, [pc, #772]	; (80056f4 <HAL_OSPIM_Config+0x3cc>)
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80053f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80053fa:	f043 0302 	orr.w	r3, r3, #2
 80053fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005402:	49bd      	ldr	r1, [pc, #756]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 8005404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005412:	4413      	add	r3, r2
 8005414:	3b2c      	subs	r3, #44	; 0x2c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	6859      	ldr	r1, [r3, #4]
 8005420:	48b5      	ldr	r0, [pc, #724]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 8005422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005430:	4413      	add	r3, r2
 8005432:	3b2c      	subs	r3, #44	; 0x2c
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4403      	add	r3, r0
 8005440:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005450:	4413      	add	r3, r2
 8005452:	3b34      	subs	r3, #52	; 0x34
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80ac 	beq.w	80055b4 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800545c:	49a6      	ldr	r1, [pc, #664]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 800545e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800546c:	4413      	add	r3, r2
 800546e:	3b34      	subs	r3, #52	; 0x34
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3b01      	subs	r3, #1
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	6859      	ldr	r1, [r3, #4]
 800547a:	489f      	ldr	r0, [pc, #636]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 800547c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800548a:	4413      	add	r3, r2
 800548c:	3b34      	subs	r3, #52	; 0x34
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3b01      	subs	r3, #1
 8005492:	f021 0201 	bic.w	r2, r1, #1
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4403      	add	r3, r0
 800549a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800549c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80054aa:	4413      	add	r3, r2
 80054ac:	3b30      	subs	r3, #48	; 0x30
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01f      	beq.n	80054f4 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80054b4:	4990      	ldr	r1, [pc, #576]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 80054b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80054c4:	4413      	add	r3, r2
 80054c6:	3b30      	subs	r3, #48	; 0x30
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	4889      	ldr	r0, [pc, #548]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 80054d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80054e2:	4413      	add	r3, r2
 80054e4:	3b30      	subs	r3, #48	; 0x30
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	f021 0210 	bic.w	r2, r1, #16
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4403      	add	r3, r0
 80054f2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80054f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005502:	4413      	add	r3, r2
 8005504:	3b28      	subs	r3, #40	; 0x28
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d023      	beq.n	8005554 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800550c:	497a      	ldr	r1, [pc, #488]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 800550e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800551c:	4413      	add	r3, r2
 800551e:	3b28      	subs	r3, #40	; 0x28
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3b01      	subs	r3, #1
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	6859      	ldr	r1, [r3, #4]
 800552e:	4872      	ldr	r0, [pc, #456]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 8005530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800553e:	4413      	add	r3, r2
 8005540:	3b28      	subs	r3, #40	; 0x28
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3b01      	subs	r3, #1
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4403      	add	r3, r0
 8005552:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005562:	4413      	add	r3, r2
 8005564:	3b24      	subs	r3, #36	; 0x24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d023      	beq.n	80055b4 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800556c:	4962      	ldr	r1, [pc, #392]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 800556e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800557c:	4413      	add	r3, r2
 800557e:	3b24      	subs	r3, #36	; 0x24
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3b01      	subs	r3, #1
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	6859      	ldr	r1, [r3, #4]
 800558e:	485a      	ldr	r0, [pc, #360]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 8005590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800559e:	4413      	add	r3, r2
 80055a0:	3b24      	subs	r3, #36	; 0x24
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4403      	add	r3, r0
 80055b2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6819      	ldr	r1, [r3, #0]
 80055b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055c8:	4413      	add	r3, r2
 80055ca:	3b34      	subs	r3, #52	; 0x34
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4299      	cmp	r1, r3
 80055d0:	d03c      	beq.n	800564c <HAL_OSPIM_Config+0x324>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055e6:	4413      	add	r3, r2
 80055e8:	3b30      	subs	r3, #48	; 0x30
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4299      	cmp	r1, r3
 80055ee:	d02d      	beq.n	800564c <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6899      	ldr	r1, [r3, #8]
 80055f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005604:	4413      	add	r3, r2
 8005606:	3b2c      	subs	r3, #44	; 0x2c
 8005608:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800560a:	4299      	cmp	r1, r3
 800560c:	d01e      	beq.n	800564c <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68d9      	ldr	r1, [r3, #12]
 8005612:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005622:	4413      	add	r3, r2
 8005624:	3b28      	subs	r3, #40	; 0x28
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4299      	cmp	r1, r3
 800562a:	d00f      	beq.n	800564c <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6919      	ldr	r1, [r3, #16]
 8005630:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005640:	4413      	add	r3, r2
 8005642:	3b24      	subs	r3, #36	; 0x24
 8005644:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005646:	4299      	cmp	r1, r3
 8005648:	f040 80e0 	bne.w	800580c <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800564c:	492a      	ldr	r1, [pc, #168]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 800564e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800565e:	4413      	add	r3, r2
 8005660:	3b34      	subs	r3, #52	; 0x34
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3b01      	subs	r3, #1
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	6859      	ldr	r1, [r3, #4]
 800566c:	4822      	ldr	r0, [pc, #136]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 800566e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800567e:	4413      	add	r3, r2
 8005680:	3b34      	subs	r3, #52	; 0x34
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3b01      	subs	r3, #1
 8005686:	f021 0201 	bic.w	r2, r1, #1
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4403      	add	r3, r0
 800568e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005690:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056a0:	4413      	add	r3, r2
 80056a2:	3b30      	subs	r3, #48	; 0x30
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d028      	beq.n	80056fc <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80056aa:	4913      	ldr	r1, [pc, #76]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 80056ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056bc:	4413      	add	r3, r2
 80056be:	3b30      	subs	r3, #48	; 0x30
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	480b      	ldr	r0, [pc, #44]	; (80056f8 <HAL_OSPIM_Config+0x3d0>)
 80056cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056dc:	4413      	add	r3, r2
 80056de:	3b30      	subs	r3, #48	; 0x30
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f021 0210 	bic.w	r2, r1, #16
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4403      	add	r3, r0
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e005      	b.n	80056fc <HAL_OSPIM_Config+0x3d4>
 80056f0:	a0001000 	.word	0xa0001000
 80056f4:	a0001400 	.word	0xa0001400
 80056f8:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80056fc:	49b1      	ldr	r1, [pc, #708]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 80056fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800570e:	4413      	add	r3, r2
 8005710:	3b2c      	subs	r3, #44	; 0x2c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3b01      	subs	r3, #1
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	6859      	ldr	r1, [r3, #4]
 800571c:	48a9      	ldr	r0, [pc, #676]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 800571e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800572e:	4413      	add	r3, r2
 8005730:	3b2c      	subs	r3, #44	; 0x2c
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3b01      	subs	r3, #1
 8005736:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4403      	add	r3, r0
 800573e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005740:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005750:	4413      	add	r3, r2
 8005752:	3b28      	subs	r3, #40	; 0x28
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d025      	beq.n	80057a6 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800575a:	499a      	ldr	r1, [pc, #616]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 800575c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800576c:	4413      	add	r3, r2
 800576e:	3b28      	subs	r3, #40	; 0x28
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3b01      	subs	r3, #1
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	6859      	ldr	r1, [r3, #4]
 800577e:	4891      	ldr	r0, [pc, #580]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005780:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005790:	4413      	add	r3, r2
 8005792:	3b28      	subs	r3, #40	; 0x28
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4403      	add	r3, r0
 80057a4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80057a6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80057b6:	4413      	add	r3, r2
 80057b8:	3b24      	subs	r3, #36	; 0x24
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d025      	beq.n	800580c <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80057c0:	4980      	ldr	r1, [pc, #512]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 80057c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80057d2:	4413      	add	r3, r2
 80057d4:	3b24      	subs	r3, #36	; 0x24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	4877      	ldr	r0, [pc, #476]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 80057e6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80057f6:	4413      	add	r3, r2
 80057f8:	3b24      	subs	r3, #36	; 0x24
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4403      	add	r3, r0
 800580a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 800580c:	4a6d      	ldr	r2, [pc, #436]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	3b01      	subs	r3, #1
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800581e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005820:	025b      	lsls	r3, r3, #9
 8005822:	431a      	orrs	r2, r3
 8005824:	4967      	ldr	r1, [pc, #412]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	3b01      	subs	r3, #1
 800582c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8005836:	4a63      	ldr	r2, [pc, #396]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3b01      	subs	r3, #1
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f023 0203 	bic.w	r2, r3, #3
 8005848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	431a      	orrs	r2, r3
 800584e:	495d      	ldr	r1, [pc, #372]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3b01      	subs	r3, #1
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d014      	beq.n	8005892 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8005868:	4a56      	ldr	r2, [pc, #344]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800587a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587c:	015b      	lsls	r3, r3, #5
 800587e:	431a      	orrs	r2, r3
 8005880:	4950      	ldr	r1, [pc, #320]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	3b01      	subs	r3, #1
 8005888:	f042 0210 	orr.w	r2, r2, #16
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d019      	beq.n	80058d2 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800589e:	4a49      	ldr	r2, [pc, #292]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80058b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b6:	049b      	lsls	r3, r3, #18
 80058b8:	431a      	orrs	r2, r3
 80058ba:	4942      	ldr	r1, [pc, #264]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	605a      	str	r2, [r3, #4]
 80058d0:	e01c      	b.n	800590c <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80058f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f2:	069b      	lsls	r3, r3, #26
 80058f4:	431a      	orrs	r2, r3
 80058f6:	4933      	ldr	r1, [pc, #204]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d019      	beq.n	800594c <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8005918:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	3b01      	subs	r3, #1
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800592e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005930:	049b      	lsls	r3, r3, #18
 8005932:	431a      	orrs	r2, r3
 8005934:	4923      	ldr	r1, [pc, #140]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	3b01      	subs	r3, #1
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	e01c      	b.n	8005986 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d018      	beq.n	8005986 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8005954:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	3b01      	subs	r3, #1
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800596a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596c:	069b      	lsls	r3, r3, #26
 800596e:	431a      	orrs	r2, r3
 8005970:	4914      	ldr	r1, [pc, #80]	; (80059c4 <HAL_OSPIM_Config+0x69c>)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	3b01      	subs	r3, #1
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005986:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <HAL_OSPIM_Config+0x6a0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <HAL_OSPIM_Config+0x6a0>)
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800599e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_OSPIM_Config+0x6a4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a07      	ldr	r2, [pc, #28]	; (80059cc <HAL_OSPIM_Config+0x6a4>)
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80059b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3748      	adds	r7, #72	; 0x48
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	50061c00 	.word	0x50061c00
 80059c8:	a0001000 	.word	0xa0001000
 80059cc:	a0001400 	.word	0xa0001400

080059d0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80059e0:	e01a      	b.n	8005a18 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d016      	beq.n	8005a18 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ea:	f7fd fa53 	bl	8002e94 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a06:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0c:	f043 0201 	orr.w	r2, r3, #1
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e00e      	b.n	8005a36 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6a1a      	ldr	r2, [r3, #32]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bf14      	ite	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	2300      	moveq	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d1d6      	bne.n	80059e2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <OSPIM_GetConfig+0x26>
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d802      	bhi.n	8005a66 <OSPIM_GetConfig+0x26>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
 8005a6a:	e08e      	b.n	8005b8a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2200      	movs	r2, #0
 8005a82:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d101      	bne.n	8005a94 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8005a90:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <OSPIM_GetConfig+0x158>)
 8005a92:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e074      	b.n	8005b84 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005a9a:	4a40      	ldr	r2, [pc, #256]	; (8005b9c <OSPIM_GetConfig+0x15c>)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4053      	eors	r3, r2
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4053      	eors	r3, r2
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4053      	eors	r3, r2
 8005af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d018      	beq.n	8005b42 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4053      	eors	r3, r2
 8005b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d111      	bne.n	8005b42 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	60da      	str	r2, [r3, #12]
 8005b34:	e005      	b.n	8005b42 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d018      	beq.n	8005b7e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4053      	eors	r3, r2
 8005b52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d111      	bne.n	8005b7e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	611a      	str	r2, [r3, #16]
 8005b70:	e005      	b.n	8005b7e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d987      	bls.n	8005a9a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	04040222 	.word	0x04040222
 8005b9c:	50061c00 	.word	0x50061c00

08005ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bae:	6013      	str	r3, [r2, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40007000 	.word	0x40007000

08005bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd0:	d102      	bne.n	8005bd8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd6:	e00b      	b.n	8005bf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	d102      	bne.n	8005bee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bec:	e000      	b.n	8005bf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005bee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40007000 	.word	0x40007000

08005c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d141      	bne.n	8005c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c0e:	4b4b      	ldr	r3, [pc, #300]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1a:	d131      	bne.n	8005c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c1c:	4b47      	ldr	r3, [pc, #284]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c22:	4a46      	ldr	r2, [pc, #280]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c2c:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c34:	4a41      	ldr	r2, [pc, #260]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005c3c:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2232      	movs	r2, #50	; 0x32
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	4a3f      	ldr	r2, [pc, #252]	; (8005d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	0c9b      	lsrs	r3, r3, #18
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c52:	e002      	b.n	8005c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c5a:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c66:	d102      	bne.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f2      	bne.n	8005c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c6e:	4b33      	ldr	r3, [pc, #204]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7a:	d158      	bne.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e057      	b.n	8005d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c80:	4b2e      	ldr	r3, [pc, #184]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c86:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c90:	e04d      	b.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c98:	d141      	bne.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c9a:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca6:	d131      	bne.n	8005d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ca8:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cae:	4a23      	ldr	r2, [pc, #140]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cb8:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2232      	movs	r2, #50	; 0x32
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	0c9b      	lsrs	r3, r3, #18
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cde:	e002      	b.n	8005ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ce6:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf2:	d102      	bne.n	8005cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f2      	bne.n	8005ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d06:	d112      	bne.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e011      	b.n	8005d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d12:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d1c:	e007      	b.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d1e:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d26:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	20000034 	.word	0x20000034
 8005d44:	431bde83 	.word	0x431bde83

08005d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f000 bc16 	b.w	8006588 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d5c:	4ba0      	ldr	r3, [pc, #640]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 030c 	and.w	r3, r3, #12
 8005d64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d66:	4b9e      	ldr	r3, [pc, #632]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80e4 	beq.w	8005f46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <HAL_RCC_OscConfig+0x4c>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	f040 808b 	bne.w	8005ea2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	f040 8087 	bne.w	8005ea2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d94:	4b92      	ldr	r3, [pc, #584]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_RCC_OscConfig+0x64>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e3ed      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1a      	ldr	r2, [r3, #32]
 8005db0:	4b8b      	ldr	r3, [pc, #556]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x7e>
 8005dbc:	4b88      	ldr	r3, [pc, #544]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc4:	e005      	b.n	8005dd2 <HAL_RCC_OscConfig+0x8a>
 8005dc6:	4b86      	ldr	r3, [pc, #536]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d223      	bcs.n	8005e1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fdc8 	bl	8006970 <RCC_SetFlashLatencyFromMSIRange>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e3ce      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dea:	4b7d      	ldr	r3, [pc, #500]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a7c      	ldr	r2, [pc, #496]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005df0:	f043 0308 	orr.w	r3, r3, #8
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b7a      	ldr	r3, [pc, #488]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	4977      	ldr	r1, [pc, #476]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e08:	4b75      	ldr	r3, [pc, #468]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	4972      	ldr	r1, [pc, #456]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]
 8005e1c:	e025      	b.n	8005e6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e1e:	4b70      	ldr	r3, [pc, #448]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a6f      	ldr	r2, [pc, #444]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e24:	f043 0308 	orr.w	r3, r3, #8
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b6d      	ldr	r3, [pc, #436]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	496a      	ldr	r1, [pc, #424]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e3c:	4b68      	ldr	r3, [pc, #416]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	4965      	ldr	r1, [pc, #404]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fd88 	bl	8006970 <RCC_SetFlashLatencyFromMSIRange>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e38e      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e6a:	f000 fcbf 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8005e6e:	4601      	mov	r1, r0
 8005e70:	4b5b      	ldr	r3, [pc, #364]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	4a5a      	ldr	r2, [pc, #360]	; (8005fe4 <HAL_RCC_OscConfig+0x29c>)
 8005e7c:	5cd3      	ldrb	r3, [r2, r3]
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	fa21 f303 	lsr.w	r3, r1, r3
 8005e86:	4a58      	ldr	r2, [pc, #352]	; (8005fe8 <HAL_RCC_OscConfig+0x2a0>)
 8005e88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e8a:	4b58      	ldr	r3, [pc, #352]	; (8005fec <HAL_RCC_OscConfig+0x2a4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fc ffb0 	bl	8002df4 <HAL_InitTick>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d052      	beq.n	8005f44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	e372      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d032      	beq.n	8005f10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005eaa:	4b4d      	ldr	r3, [pc, #308]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a4c      	ldr	r2, [pc, #304]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005eb6:	f7fc ffed 	bl	8002e94 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ebe:	f7fc ffe9 	bl	8002e94 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e35b      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ed0:	4b43      	ldr	r3, [pc, #268]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005edc:	4b40      	ldr	r3, [pc, #256]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a3f      	ldr	r2, [pc, #252]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005ee2:	f043 0308 	orr.w	r3, r3, #8
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4b3d      	ldr	r3, [pc, #244]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	493a      	ldr	r1, [pc, #232]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005efa:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	4935      	ldr	r1, [pc, #212]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	604b      	str	r3, [r1, #4]
 8005f0e:	e01a      	b.n	8005f46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f10:	4b33      	ldr	r3, [pc, #204]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a32      	ldr	r2, [pc, #200]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005f16:	f023 0301 	bic.w	r3, r3, #1
 8005f1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f1c:	f7fc ffba 	bl	8002e94 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f24:	f7fc ffb6 	bl	8002e94 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e328      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f36:	4b2a      	ldr	r3, [pc, #168]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x1dc>
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d073      	beq.n	800603a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d005      	beq.n	8005f64 <HAL_RCC_OscConfig+0x21c>
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b0c      	cmp	r3, #12
 8005f5c:	d10e      	bne.n	8005f7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d10b      	bne.n	8005f7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d063      	beq.n	8006038 <HAL_RCC_OscConfig+0x2f0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d15f      	bne.n	8006038 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e305      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d106      	bne.n	8005f94 <HAL_RCC_OscConfig+0x24c>
 8005f86:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e01d      	b.n	8005fd0 <HAL_RCC_OscConfig+0x288>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x270>
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a0f      	ldr	r2, [pc, #60]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a0c      	ldr	r2, [pc, #48]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e00b      	b.n	8005fd0 <HAL_RCC_OscConfig+0x288>
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a05      	ldr	r2, [pc, #20]	; (8005fe0 <HAL_RCC_OscConfig+0x298>)
 8005fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd8:	f7fc ff5c 	bl	8002e94 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fde:	e010      	b.n	8006002 <HAL_RCC_OscConfig+0x2ba>
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	08009dd0 	.word	0x08009dd0
 8005fe8:	20000034 	.word	0x20000034
 8005fec:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ff0:	f7fc ff50 	bl	8002e94 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e2c2      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006002:	4baf      	ldr	r3, [pc, #700]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x2a8>
 800600e:	e014      	b.n	800603a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fc ff40 	bl	8002e94 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006018:	f7fc ff3c 	bl	8002e94 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b64      	cmp	r3, #100	; 0x64
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e2ae      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800602a:	4ba5      	ldr	r3, [pc, #660]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x2d0>
 8006036:	e000      	b.n	800603a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d060      	beq.n	8006108 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b04      	cmp	r3, #4
 800604a:	d005      	beq.n	8006058 <HAL_RCC_OscConfig+0x310>
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b0c      	cmp	r3, #12
 8006050:	d119      	bne.n	8006086 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d116      	bne.n	8006086 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006058:	4b99      	ldr	r3, [pc, #612]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCC_OscConfig+0x328>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e28b      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006070:	4b93      	ldr	r3, [pc, #588]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	061b      	lsls	r3, r3, #24
 800607e:	4990      	ldr	r1, [pc, #576]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006080:	4313      	orrs	r3, r2
 8006082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006084:	e040      	b.n	8006108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d023      	beq.n	80060d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800608e:	4b8c      	ldr	r3, [pc, #560]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a8b      	ldr	r2, [pc, #556]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fc fefb 	bl	8002e94 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a2:	f7fc fef7 	bl	8002e94 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e269      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060b4:	4b82      	ldr	r3, [pc, #520]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c0:	4b7f      	ldr	r3, [pc, #508]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	061b      	lsls	r3, r3, #24
 80060ce:	497c      	ldr	r1, [pc, #496]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
 80060d4:	e018      	b.n	8006108 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060d6:	4b7a      	ldr	r3, [pc, #488]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a79      	ldr	r2, [pc, #484]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80060dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fc fed7 	bl	8002e94 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ea:	f7fc fed3 	bl	8002e94 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e245      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060fc:	4b70      	ldr	r3, [pc, #448]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1f0      	bne.n	80060ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d03c      	beq.n	800618e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01c      	beq.n	8006156 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800611c:	4b68      	ldr	r3, [pc, #416]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800611e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006122:	4a67      	ldr	r2, [pc, #412]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612c:	f7fc feb2 	bl	8002e94 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006134:	f7fc feae 	bl	8002e94 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e220      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006146:	4b5e      	ldr	r3, [pc, #376]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0ef      	beq.n	8006134 <HAL_RCC_OscConfig+0x3ec>
 8006154:	e01b      	b.n	800618e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006156:	4b5a      	ldr	r3, [pc, #360]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800615c:	4a58      	ldr	r2, [pc, #352]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006166:	f7fc fe95 	bl	8002e94 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616e:	f7fc fe91 	bl	8002e94 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e203      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006180:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1ef      	bne.n	800616e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80a6 	beq.w	80062e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800619c:	2300      	movs	r3, #0
 800619e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061a0:	4b47      	ldr	r3, [pc, #284]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80061a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10d      	bne.n	80061c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ac:	4b44      	ldr	r3, [pc, #272]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b0:	4a43      	ldr	r2, [pc, #268]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80061b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b6:	6593      	str	r3, [r2, #88]	; 0x58
 80061b8:	4b41      	ldr	r3, [pc, #260]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 80061ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061c4:	2301      	movs	r3, #1
 80061c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061c8:	4b3e      	ldr	r3, [pc, #248]	; (80062c4 <HAL_RCC_OscConfig+0x57c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d118      	bne.n	8006206 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061d4:	4b3b      	ldr	r3, [pc, #236]	; (80062c4 <HAL_RCC_OscConfig+0x57c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <HAL_RCC_OscConfig+0x57c>)
 80061da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061e0:	f7fc fe58 	bl	8002e94 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e8:	f7fc fe54 	bl	8002e94 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e1c6      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061fa:	4b32      	ldr	r3, [pc, #200]	; (80062c4 <HAL_RCC_OscConfig+0x57c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0f0      	beq.n	80061e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d108      	bne.n	8006220 <HAL_RCC_OscConfig+0x4d8>
 800620e:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800621e:	e024      	b.n	800626a <HAL_RCC_OscConfig+0x522>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b05      	cmp	r3, #5
 8006226:	d110      	bne.n	800624a <HAL_RCC_OscConfig+0x502>
 8006228:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006230:	f043 0304 	orr.w	r3, r3, #4
 8006234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006238:	4b21      	ldr	r3, [pc, #132]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006248:	e00f      	b.n	800626a <HAL_RCC_OscConfig+0x522>
 800624a:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800625a:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006262:	f023 0304 	bic.w	r3, r3, #4
 8006266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006272:	f7fc fe0f 	bl	8002e94 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006278:	e00a      	b.n	8006290 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627a:	f7fc fe0b 	bl	8002e94 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	f241 3288 	movw	r2, #5000	; 0x1388
 8006288:	4293      	cmp	r3, r2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e17b      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <HAL_RCC_OscConfig+0x578>)
 8006292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0ed      	beq.n	800627a <HAL_RCC_OscConfig+0x532>
 800629e:	e01a      	b.n	80062d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fc fdf8 	bl	8002e94 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062a6:	e00f      	b.n	80062c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fc fdf4 	bl	8002e94 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d906      	bls.n	80062c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e164      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
 80062be:	bf00      	nop
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062c8:	4ba8      	ldr	r3, [pc, #672]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e8      	bne.n	80062a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d105      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062dc:	4ba3      	ldr	r3, [pc, #652]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e0:	4aa2      	ldr	r2, [pc, #648]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80062e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d03c      	beq.n	800636e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01c      	beq.n	8006336 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062fc:	4b9b      	ldr	r3, [pc, #620]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80062fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006302:	4a9a      	ldr	r2, [pc, #616]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630c:	f7fc fdc2 	bl	8002e94 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006314:	f7fc fdbe 	bl	8002e94 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e130      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006326:	4b91      	ldr	r3, [pc, #580]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0ef      	beq.n	8006314 <HAL_RCC_OscConfig+0x5cc>
 8006334:	e01b      	b.n	800636e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006336:	4b8d      	ldr	r3, [pc, #564]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800633c:	4a8b      	ldr	r2, [pc, #556]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006346:	f7fc fda5 	bl	8002e94 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800634e:	f7fc fda1 	bl	8002e94 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e113      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006360:	4b82      	ldr	r3, [pc, #520]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1ef      	bne.n	800634e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8107 	beq.w	8006586 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	2b02      	cmp	r3, #2
 800637e:	f040 80cb 	bne.w	8006518 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006382:	4b7a      	ldr	r3, [pc, #488]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f003 0203 	and.w	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	429a      	cmp	r2, r3
 8006394:	d12c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	3b01      	subs	r3, #1
 80063a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d123      	bne.n	80063f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d11b      	bne.n	80063f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d113      	bne.n	80063f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	3b01      	subs	r3, #1
 80063d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d109      	bne.n	80063f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	3b01      	subs	r3, #1
 80063ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d06d      	beq.n	80064cc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b0c      	cmp	r3, #12
 80063f4:	d068      	beq.n	80064c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063f6:	4b5d      	ldr	r3, [pc, #372]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006402:	4b5a      	ldr	r3, [pc, #360]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e0ba      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006412:	4b56      	ldr	r3, [pc, #344]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a55      	ldr	r2, [pc, #340]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800641c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800641e:	f7fc fd39 	bl	8002e94 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fc fd35 	bl	8002e94 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e0a7      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006438:	4b4c      	ldr	r3, [pc, #304]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f0      	bne.n	8006426 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006444:	4b49      	ldr	r3, [pc, #292]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	4b49      	ldr	r3, [pc, #292]	; (8006570 <HAL_RCC_OscConfig+0x828>)
 800644a:	4013      	ands	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006454:	3a01      	subs	r2, #1
 8006456:	0112      	lsls	r2, r2, #4
 8006458:	4311      	orrs	r1, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800645e:	0212      	lsls	r2, r2, #8
 8006460:	4311      	orrs	r1, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006466:	0852      	lsrs	r2, r2, #1
 8006468:	3a01      	subs	r2, #1
 800646a:	0552      	lsls	r2, r2, #21
 800646c:	4311      	orrs	r1, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006472:	0852      	lsrs	r2, r2, #1
 8006474:	3a01      	subs	r2, #1
 8006476:	0652      	lsls	r2, r2, #25
 8006478:	4311      	orrs	r1, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800647e:	06d2      	lsls	r2, r2, #27
 8006480:	430a      	orrs	r2, r1
 8006482:	493a      	ldr	r1, [pc, #232]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006484:	4313      	orrs	r3, r2
 8006486:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006488:	4b38      	ldr	r3, [pc, #224]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a37      	ldr	r2, [pc, #220]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800648e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006492:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006494:	4b35      	ldr	r3, [pc, #212]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a34      	ldr	r2, [pc, #208]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800649a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800649e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064a0:	f7fc fcf8 	bl	8002e94 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fc fcf4 	bl	8002e94 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e066      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ba:	4b2c      	ldr	r3, [pc, #176]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064c6:	e05e      	b.n	8006586 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e05d      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064cc:	4b27      	ldr	r3, [pc, #156]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d156      	bne.n	8006586 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a23      	ldr	r2, [pc, #140]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80064de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064e4:	4b21      	ldr	r3, [pc, #132]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4a20      	ldr	r2, [pc, #128]	; (800656c <HAL_RCC_OscConfig+0x824>)
 80064ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064f0:	f7fc fcd0 	bl	8002e94 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f8:	f7fc fccc 	bl	8002e94 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e03e      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800650a:	4b18      	ldr	r3, [pc, #96]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x7b0>
 8006516:	e036      	b.n	8006586 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b0c      	cmp	r3, #12
 800651c:	d031      	beq.n	8006582 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a12      	ldr	r2, [pc, #72]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006528:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800652a:	4b10      	ldr	r3, [pc, #64]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d105      	bne.n	8006542 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	4a0c      	ldr	r2, [pc, #48]	; (800656c <HAL_RCC_OscConfig+0x824>)
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <HAL_RCC_OscConfig+0x824>)
 8006548:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800654c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006550:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fc fc9f 	bl	8002e94 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006558:	e00c      	b.n	8006574 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655a:	f7fc fc9b 	bl	8002e94 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d905      	bls.n	8006574 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e00d      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
 800656c:	40021000 	.word	0x40021000
 8006570:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_RCC_OscConfig+0x848>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ec      	bne.n	800655a <HAL_RCC_OscConfig+0x812>
 8006580:	e001      	b.n	8006586 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40021000 	.word	0x40021000

08006594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e10f      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065ac:	4b89      	ldr	r3, [pc, #548]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d910      	bls.n	80065dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ba:	4b86      	ldr	r3, [pc, #536]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f023 020f 	bic.w	r2, r3, #15
 80065c2:	4984      	ldr	r1, [pc, #528]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ca:	4b82      	ldr	r3, [pc, #520]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d001      	beq.n	80065dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0f7      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8089 	beq.w	80066fc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d133      	bne.n	800665a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065f2:	4b79      	ldr	r3, [pc, #484]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0e4      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006602:	f000 fa0f 	bl	8006a24 <RCC_GetSysClockFreqFromPLLSource>
 8006606:	4602      	mov	r2, r0
 8006608:	4b74      	ldr	r3, [pc, #464]	; (80067dc <HAL_RCC_ClockConfig+0x248>)
 800660a:	429a      	cmp	r2, r3
 800660c:	d955      	bls.n	80066ba <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800660e:	4b72      	ldr	r3, [pc, #456]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800661a:	4b6f      	ldr	r3, [pc, #444]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006622:	4a6d      	ldr	r2, [pc, #436]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800662a:	2380      	movs	r3, #128	; 0x80
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	e044      	b.n	80066ba <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d03e      	beq.n	80066ba <HAL_RCC_ClockConfig+0x126>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d13a      	bne.n	80066ba <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006644:	4b64      	ldr	r3, [pc, #400]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800664c:	4a62      	ldr	r2, [pc, #392]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e02f      	b.n	80066ba <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d107      	bne.n	8006672 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006662:	4b5d      	ldr	r3, [pc, #372]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d115      	bne.n	800669a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e0ac      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800667a:	4b57      	ldr	r3, [pc, #348]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e0a0      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800668a:	4b53      	ldr	r3, [pc, #332]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e098      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800669a:	f000 f8a7 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 800669e:	4602      	mov	r2, r0
 80066a0:	4b4e      	ldr	r3, [pc, #312]	; (80067dc <HAL_RCC_ClockConfig+0x248>)
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d909      	bls.n	80066ba <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066a6:	4b4c      	ldr	r3, [pc, #304]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ae:	4a4a      	ldr	r2, [pc, #296]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066b6:	2380      	movs	r3, #128	; 0x80
 80066b8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f023 0203 	bic.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4944      	ldr	r1, [pc, #272]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066cc:	f7fc fbe2 	bl	8002e94 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d4:	f7fc fbde 	bl	8002e94 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e070      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ea:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 020c 	and.w	r2, r3, #12
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d1eb      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b33      	ldr	r3, [pc, #204]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4930      	ldr	r1, [pc, #192]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
 800671a:	e008      	b.n	800672e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b80      	cmp	r3, #128	; 0x80
 8006720:	d105      	bne.n	800672e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	4a2c      	ldr	r2, [pc, #176]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800672e:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d210      	bcs.n	800675e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673c:	4b25      	ldr	r3, [pc, #148]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f023 020f 	bic.w	r2, r3, #15
 8006744:	4923      	ldr	r1, [pc, #140]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800674c:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <HAL_RCC_ClockConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d001      	beq.n	800675e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e036      	b.n	80067cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d008      	beq.n	800677c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	4918      	ldr	r1, [pc, #96]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006778:	4313      	orrs	r3, r2
 800677a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4910      	ldr	r1, [pc, #64]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800679c:	f000 f826 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 80067a0:	4601      	mov	r1, r0
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <HAL_RCC_ClockConfig+0x244>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	091b      	lsrs	r3, r3, #4
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <HAL_RCC_ClockConfig+0x24c>)
 80067ae:	5cd3      	ldrb	r3, [r2, r3]
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	fa21 f303 	lsr.w	r3, r1, r3
 80067b8:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <HAL_RCC_ClockConfig+0x250>)
 80067ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <HAL_RCC_ClockConfig+0x254>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fc fb17 	bl	8002df4 <HAL_InitTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40022000 	.word	0x40022000
 80067d8:	40021000 	.word	0x40021000
 80067dc:	04c4b400 	.word	0x04c4b400
 80067e0:	08009dd0 	.word	0x08009dd0
 80067e4:	20000034 	.word	0x20000034
 80067e8:	20000038 	.word	0x20000038

080067ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b089      	sub	sp, #36	; 0x24
 80067f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61fb      	str	r3, [r7, #28]
 80067f6:	2300      	movs	r3, #0
 80067f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067fa:	4b3d      	ldr	r3, [pc, #244]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
 8006802:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006804:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_GetSysClockFreq+0x34>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b0c      	cmp	r3, #12
 8006818:	d121      	bne.n	800685e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d11e      	bne.n	800685e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006820:	4b33      	ldr	r3, [pc, #204]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d107      	bne.n	800683c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800682c:	4b30      	ldr	r3, [pc, #192]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800682e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	e005      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800683c:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006848:	4a2a      	ldr	r2, [pc, #168]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006850:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10d      	bne.n	8006874 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800685c:	e00a      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b04      	cmp	r3, #4
 8006862:	d102      	bne.n	800686a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	e004      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b08      	cmp	r3, #8
 800686e:	d101      	bne.n	8006874 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006870:	4b22      	ldr	r3, [pc, #136]	; (80068fc <HAL_RCC_GetSysClockFreq+0x110>)
 8006872:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b0c      	cmp	r3, #12
 8006878:	d133      	bne.n	80068e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800687a:	4b1d      	ldr	r3, [pc, #116]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d002      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0xa4>
 800688a:	2b03      	cmp	r3, #3
 800688c:	d003      	beq.n	8006896 <HAL_RCC_GetSysClockFreq+0xaa>
 800688e:	e005      	b.n	800689c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006890:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006892:	617b      	str	r3, [r7, #20]
      break;
 8006894:	e005      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006896:	4b19      	ldr	r3, [pc, #100]	; (80068fc <HAL_RCC_GetSysClockFreq+0x110>)
 8006898:	617b      	str	r3, [r7, #20]
      break;
 800689a:	e002      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	617b      	str	r3, [r7, #20]
      break;
 80068a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068a2:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	3301      	adds	r3, #1
 80068ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	0a1b      	lsrs	r3, r3, #8
 80068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	fb02 f203 	mul.w	r2, r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	0e5b      	lsrs	r3, r3, #25
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	3301      	adds	r3, #1
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80068e2:	69bb      	ldr	r3, [r7, #24]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3724      	adds	r7, #36	; 0x24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40021000 	.word	0x40021000
 80068f4:	08009de8 	.word	0x08009de8
 80068f8:	00f42400 	.word	0x00f42400
 80068fc:	007a1200 	.word	0x007a1200

08006900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006904:	4b03      	ldr	r3, [pc, #12]	; (8006914 <HAL_RCC_GetHCLKFreq+0x14>)
 8006906:	681b      	ldr	r3, [r3, #0]
}
 8006908:	4618      	mov	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000034 	.word	0x20000034

08006918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800691c:	f7ff fff0 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 8006920:	4601      	mov	r1, r0
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	4a04      	ldr	r2, [pc, #16]	; (8006940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800692e:	5cd3      	ldrb	r3, [r2, r3]
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40021000 	.word	0x40021000
 8006940:	08009de0 	.word	0x08009de0

08006944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006948:	f7ff ffda 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 800694c:	4601      	mov	r1, r0
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	0adb      	lsrs	r3, r3, #11
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <HAL_RCC_GetPCLK2Freq+0x28>)
 800695a:	5cd3      	ldrb	r3, [r2, r3]
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40021000 	.word	0x40021000
 800696c:	08009de0 	.word	0x08009de0

08006970 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006978:	2300      	movs	r3, #0
 800697a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800697c:	4b27      	ldr	r3, [pc, #156]	; (8006a1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800697e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006988:	f7ff f91a 	bl	8005bc0 <HAL_PWREx_GetVoltageRange>
 800698c:	6178      	str	r0, [r7, #20]
 800698e:	e014      	b.n	80069ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006990:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006994:	4a21      	ldr	r2, [pc, #132]	; (8006a1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800699a:	6593      	str	r3, [r2, #88]	; 0x58
 800699c:	4b1f      	ldr	r3, [pc, #124]	; (8006a1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800699e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80069a8:	f7ff f90a 	bl	8005bc0 <HAL_PWREx_GetVoltageRange>
 80069ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	4a1a      	ldr	r2, [pc, #104]	; (8006a1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c0:	d10b      	bne.n	80069da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b80      	cmp	r3, #128	; 0x80
 80069c6:	d913      	bls.n	80069f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2ba0      	cmp	r3, #160	; 0xa0
 80069cc:	d902      	bls.n	80069d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80069ce:	2302      	movs	r3, #2
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	e00d      	b.n	80069f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069d4:	2301      	movs	r3, #1
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	e00a      	b.n	80069f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b7f      	cmp	r3, #127	; 0x7f
 80069de:	d902      	bls.n	80069e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80069e0:	2302      	movs	r3, #2
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	e004      	b.n	80069f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b70      	cmp	r3, #112	; 0x70
 80069ea:	d101      	bne.n	80069f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069ec:	2301      	movs	r3, #1
 80069ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f023 020f 	bic.w	r2, r3, #15
 80069f8:	4909      	ldr	r1, [pc, #36]	; (8006a20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d001      	beq.n	8006a12 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	40022000 	.word	0x40022000

08006a24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8006a2e:	4b2d      	ldr	r3, [pc, #180]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d118      	bne.n	8006a6c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a3a:	4b2a      	ldr	r3, [pc, #168]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d107      	bne.n	8006a56 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a46:	4b27      	ldr	r3, [pc, #156]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a4c:	0a1b      	lsrs	r3, r3, #8
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e005      	b.n	8006a62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a56:	4b23      	ldr	r3, [pc, #140]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	091b      	lsrs	r3, r3, #4
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d002      	beq.n	8006a82 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d003      	beq.n	8006a88 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8006a80:	e005      	b.n	8006a8e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006a82:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006a84:	613b      	str	r3, [r7, #16]
    break;
 8006a86:	e005      	b.n	8006a94 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006a88:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006a8a:	613b      	str	r3, [r7, #16]
    break;
 8006a8c:	e002      	b.n	8006a94 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	613b      	str	r3, [r7, #16]
    break;
 8006a92:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a94:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	fb02 f203 	mul.w	r2, r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	0e5b      	lsrs	r3, r3, #25
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006ad4:	683b      	ldr	r3, [r7, #0]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	08009de8 	.word	0x08009de8
 8006aec:	00f42400 	.word	0x00f42400
 8006af0:	007a1200 	.word	0x007a1200

08006af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006afc:	2300      	movs	r3, #0
 8006afe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b00:	2300      	movs	r3, #0
 8006b02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d03d      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d00b      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d804      	bhi.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00e      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d015      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006b24:	e01d      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006b26:	2b60      	cmp	r3, #96	; 0x60
 8006b28:	d01e      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d01c      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006b2e:	e018      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b30:	4b86      	ldr	r3, [pc, #536]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4a85      	ldr	r2, [pc, #532]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b3c:	e015      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3304      	adds	r3, #4
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fb0d 	bl	8007164 <RCCEx_PLLSAI1_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b4e:	e00c      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3320      	adds	r3, #32
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fbf4 	bl	8007344 <RCCEx_PLLSAI2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	74fb      	strb	r3, [r7, #19]
      break;
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8006b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b6a:	7cfb      	ldrb	r3, [r7, #19]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10b      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b70:	4b76      	ldr	r3, [pc, #472]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b76:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b7e:	4973      	ldr	r1, [pc, #460]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006b86:	e001      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	7cfb      	ldrb	r3, [r7, #19]
 8006b8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d042      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba0:	d00f      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8006ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba6:	d805      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d011      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8006bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb0:	d017      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006bb2:	e01f      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb8:	d01f      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbe:	d01c      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006bc0:	e018      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bc2:	4b62      	ldr	r3, [pc, #392]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	4a61      	ldr	r2, [pc, #388]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bcc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bce:	e015      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fac4 	bl	8007164 <RCCEx_PLLSAI1_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3320      	adds	r3, #32
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fbab 	bl	8007344 <RCCEx_PLLSAI2_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	74fb      	strb	r3, [r7, #19]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8006bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfc:	7cfb      	ldrb	r3, [r7, #19]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10b      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c02:	4b52      	ldr	r3, [pc, #328]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	494e      	ldr	r1, [pc, #312]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006c18:	e001      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 809f 	beq.w	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c30:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006c40:	2300      	movs	r3, #0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00d      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c46:	4b41      	ldr	r3, [pc, #260]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	4a40      	ldr	r2, [pc, #256]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c50:	6593      	str	r3, [r2, #88]	; 0x58
 8006c52:	4b3e      	ldr	r3, [pc, #248]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5a:	60bb      	str	r3, [r7, #8]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c62:	4b3b      	ldr	r3, [pc, #236]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3a      	ldr	r2, [pc, #232]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c6e:	f7fc f911 	bl	8002e94 <HAL_GetTick>
 8006c72:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c74:	e009      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c76:	f7fc f90d 	bl	8002e94 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d902      	bls.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	74fb      	strb	r3, [r7, #19]
        break;
 8006c88:	e005      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c8a:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0ef      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006c96:	7cfb      	ldrb	r3, [r7, #19]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d15b      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c9c:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01f      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d019      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cba:	4b24      	ldr	r3, [pc, #144]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cc6:	4b21      	ldr	r3, [pc, #132]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ce6:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d016      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fc f8cc 	bl	8002e94 <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cfe:	e00b      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d00:	f7fc f8c8 	bl	8002e94 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d902      	bls.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	74fb      	strb	r3, [r7, #19]
            break;
 8006d16:	e006      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0ec      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10c      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d2c:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	4903      	ldr	r1, [pc, #12]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d44:	e008      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d46:	7cfb      	ldrb	r3, [r7, #19]
 8006d48:	74bb      	strb	r3, [r7, #18]
 8006d4a:	e005      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d58:	7c7b      	ldrb	r3, [r7, #17]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d105      	bne.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d5e:	4ba0      	ldr	r3, [pc, #640]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	4a9f      	ldr	r2, [pc, #636]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d76:	4b9a      	ldr	r3, [pc, #616]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7c:	f023 0203 	bic.w	r2, r3, #3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d84:	4996      	ldr	r1, [pc, #600]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d98:	4b91      	ldr	r3, [pc, #580]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9e:	f023 020c 	bic.w	r2, r3, #12
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	498e      	ldr	r1, [pc, #568]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dba:	4b89      	ldr	r3, [pc, #548]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc8:	4985      	ldr	r1, [pc, #532]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ddc:	4b80      	ldr	r3, [pc, #512]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dea:	497d      	ldr	r1, [pc, #500]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006dfe:	4b78      	ldr	r3, [pc, #480]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0c:	4974      	ldr	r1, [pc, #464]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e20:	4b6f      	ldr	r3, [pc, #444]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2e:	496c      	ldr	r1, [pc, #432]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e42:	4b67      	ldr	r3, [pc, #412]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e50:	4963      	ldr	r1, [pc, #396]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e64:	4b5e      	ldr	r3, [pc, #376]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e72:	495b      	ldr	r1, [pc, #364]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e86:	4b56      	ldr	r3, [pc, #344]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	4952      	ldr	r1, [pc, #328]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ea8:	4b4d      	ldr	r3, [pc, #308]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb6:	494a      	ldr	r1, [pc, #296]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eca:	4b45      	ldr	r3, [pc, #276]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed8:	4941      	ldr	r1, [pc, #260]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eec:	4b3c      	ldr	r3, [pc, #240]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef2:	f023 0203 	bic.w	r2, r3, #3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efa:	4939      	ldr	r1, [pc, #228]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d028      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f0e:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1c:	4930      	ldr	r1, [pc, #192]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2c:	d106      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f2e:	4b2c      	ldr	r3, [pc, #176]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	4a2b      	ldr	r2, [pc, #172]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f38:	60d3      	str	r3, [r2, #12]
 8006f3a:	e011      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f44:	d10c      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f909 	bl	8007164 <RCCEx_PLLSAI1_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f56:	7cfb      	ldrb	r3, [r7, #19]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8006f5c:	7cfb      	ldrb	r3, [r7, #19]
 8006f5e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d04d      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f74:	d108      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f7c:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f86:	e012      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006f88:	4b15      	ldr	r3, [pc, #84]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f8e:	4a14      	ldr	r2, [pc, #80]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006f98:	4b11      	ldr	r3, [pc, #68]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fa6:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb6:	d106      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a08      	ldr	r2, [pc, #32]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc2:	60d3      	str	r3, [r2, #12]
 8006fc4:	e020      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fce:	d109      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fd0:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4a02      	ldr	r2, [pc, #8]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fda:	60d3      	str	r3, [r2, #12]
 8006fdc:	e014      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fec:	d10c      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f8b5 	bl	8007164 <RCCEx_PLLSAI1_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ffe:	7cfb      	ldrb	r3, [r7, #19]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007004:	7cfb      	ldrb	r3, [r7, #19]
 8007006:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d028      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007014:	4b4a      	ldr	r3, [pc, #296]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007022:	4947      	ldr	r1, [pc, #284]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007032:	d106      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007034:	4b42      	ldr	r3, [pc, #264]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4a41      	ldr	r2, [pc, #260]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800703a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800703e:	60d3      	str	r3, [r2, #12]
 8007040:	e011      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800704a:	d10c      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	2101      	movs	r1, #1
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f886 	bl	8007164 <RCCEx_PLLSAI1_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800705c:	7cfb      	ldrb	r3, [r7, #19]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8007062:	7cfb      	ldrb	r3, [r7, #19]
 8007064:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01e      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007072:	4b33      	ldr	r3, [pc, #204]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007082:	492f      	ldr	r1, [pc, #188]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007094:	d10c      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f861 	bl	8007164 <RCCEx_PLLSAI1_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070a6:	7cfb      	ldrb	r3, [r7, #19]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80070ac:	7cfb      	ldrb	r3, [r7, #19]
 80070ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070bc:	4b20      	ldr	r3, [pc, #128]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c2:	f023 0204 	bic.w	r2, r3, #4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070cc:	491c      	ldr	r1, [pc, #112]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80070e0:	4b17      	ldr	r3, [pc, #92]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070e6:	f023 0218 	bic.w	r2, r3, #24
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	4913      	ldr	r1, [pc, #76]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d017      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800710a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007114:	490a      	ldr	r1, [pc, #40]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007126:	d105      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800712e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007132:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007134:	7cbb      	ldrb	r3, [r7, #18]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40021000 	.word	0x40021000

08007144 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a04      	ldr	r2, [pc, #16]	; (8007160 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800714e:	f043 0304 	orr.w	r3, r3, #4
 8007152:	6013      	str	r3, [r2, #0]
}
 8007154:	bf00      	nop
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000

08007164 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007172:	4b70      	ldr	r3, [pc, #448]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00e      	beq.n	800719c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800717e:	4b6d      	ldr	r3, [pc, #436]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0203 	and.w	r2, r3, #3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d103      	bne.n	8007196 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
       ||
 8007192:	2b00      	cmp	r3, #0
 8007194:	d13f      	bne.n	8007216 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	73fb      	strb	r3, [r7, #15]
 800719a:	e03c      	b.n	8007216 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d00c      	beq.n	80071be <RCCEx_PLLSAI1_Config+0x5a>
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d013      	beq.n	80071d0 <RCCEx_PLLSAI1_Config+0x6c>
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d120      	bne.n	80071ee <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071ac:	4b61      	ldr	r3, [pc, #388]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11d      	bne.n	80071f4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071bc:	e01a      	b.n	80071f4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071be:	4b5d      	ldr	r3, [pc, #372]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d116      	bne.n	80071f8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ce:	e013      	b.n	80071f8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071d0:	4b58      	ldr	r3, [pc, #352]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10f      	bne.n	80071fc <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071dc:	4b55      	ldr	r3, [pc, #340]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071ec:	e006      	b.n	80071fc <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]
      break;
 80071f2:	e004      	b.n	80071fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80071fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d108      	bne.n	8007216 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007204:	4b4b      	ldr	r3, [pc, #300]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f023 0203 	bic.w	r2, r3, #3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4948      	ldr	r1, [pc, #288]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007212:	4313      	orrs	r3, r2
 8007214:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 8086 	bne.w	800732a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800721e:	4b45      	ldr	r3, [pc, #276]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a44      	ldr	r2, [pc, #272]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007224:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fb fe33 	bl	8002e94 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007230:	e009      	b.n	8007246 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007232:	f7fb fe2f 	bl	8002e94 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d902      	bls.n	8007246 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
        break;
 8007244:	e005      	b.n	8007252 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007246:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1ef      	bne.n	8007232 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d168      	bne.n	800732a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d113      	bne.n	8007286 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800725e:	4b35      	ldr	r3, [pc, #212]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	4b35      	ldr	r3, [pc, #212]	; (8007338 <RCCEx_PLLSAI1_Config+0x1d4>)
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6892      	ldr	r2, [r2, #8]
 800726a:	0211      	lsls	r1, r2, #8
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68d2      	ldr	r2, [r2, #12]
 8007270:	06d2      	lsls	r2, r2, #27
 8007272:	4311      	orrs	r1, r2
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6852      	ldr	r2, [r2, #4]
 8007278:	3a01      	subs	r2, #1
 800727a:	0112      	lsls	r2, r2, #4
 800727c:	430a      	orrs	r2, r1
 800727e:	492d      	ldr	r1, [pc, #180]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007280:	4313      	orrs	r3, r2
 8007282:	610b      	str	r3, [r1, #16]
 8007284:	e02d      	b.n	80072e2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d115      	bne.n	80072b8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800728c:	4b29      	ldr	r3, [pc, #164]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	4b2a      	ldr	r3, [pc, #168]	; (800733c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007292:	4013      	ands	r3, r2
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6892      	ldr	r2, [r2, #8]
 8007298:	0211      	lsls	r1, r2, #8
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6912      	ldr	r2, [r2, #16]
 800729e:	0852      	lsrs	r2, r2, #1
 80072a0:	3a01      	subs	r2, #1
 80072a2:	0552      	lsls	r2, r2, #21
 80072a4:	4311      	orrs	r1, r2
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6852      	ldr	r2, [r2, #4]
 80072aa:	3a01      	subs	r2, #1
 80072ac:	0112      	lsls	r2, r2, #4
 80072ae:	430a      	orrs	r2, r1
 80072b0:	4920      	ldr	r1, [pc, #128]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	610b      	str	r3, [r1, #16]
 80072b6:	e014      	b.n	80072e2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	4b20      	ldr	r3, [pc, #128]	; (8007340 <RCCEx_PLLSAI1_Config+0x1dc>)
 80072be:	4013      	ands	r3, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6892      	ldr	r2, [r2, #8]
 80072c4:	0211      	lsls	r1, r2, #8
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6952      	ldr	r2, [r2, #20]
 80072ca:	0852      	lsrs	r2, r2, #1
 80072cc:	3a01      	subs	r2, #1
 80072ce:	0652      	lsls	r2, r2, #25
 80072d0:	4311      	orrs	r1, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6852      	ldr	r2, [r2, #4]
 80072d6:	3a01      	subs	r2, #1
 80072d8:	0112      	lsls	r2, r2, #4
 80072da:	430a      	orrs	r2, r1
 80072dc:	4915      	ldr	r1, [pc, #84]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072e2:	4b14      	ldr	r3, [pc, #80]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a13      	ldr	r2, [pc, #76]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ee:	f7fb fdd1 	bl	8002e94 <HAL_GetTick>
 80072f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072f4:	e009      	b.n	800730a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072f6:	f7fb fdcd 	bl	8002e94 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d902      	bls.n	800730a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
          break;
 8007308:	e005      	b.n	8007316 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800730a:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0ef      	beq.n	80072f6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d106      	bne.n	800732a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	4903      	ldr	r1, [pc, #12]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007326:	4313      	orrs	r3, r2
 8007328:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40021000 	.word	0x40021000
 8007338:	07ff800f 	.word	0x07ff800f
 800733c:	ff9f800f 	.word	0xff9f800f
 8007340:	f9ff800f 	.word	0xf9ff800f

08007344 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007352:	4b70      	ldr	r3, [pc, #448]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800735e:	4b6d      	ldr	r3, [pc, #436]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0203 	and.w	r2, r3, #3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d103      	bne.n	8007376 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
       ||
 8007372:	2b00      	cmp	r3, #0
 8007374:	d13f      	bne.n	80073f6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	73fb      	strb	r3, [r7, #15]
 800737a:	e03c      	b.n	80073f6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d00c      	beq.n	800739e <RCCEx_PLLSAI2_Config+0x5a>
 8007384:	2b03      	cmp	r3, #3
 8007386:	d013      	beq.n	80073b0 <RCCEx_PLLSAI2_Config+0x6c>
 8007388:	2b01      	cmp	r3, #1
 800738a:	d120      	bne.n	80073ce <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800738c:	4b61      	ldr	r3, [pc, #388]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d11d      	bne.n	80073d4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800739c:	e01a      	b.n	80073d4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800739e:	4b5d      	ldr	r3, [pc, #372]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d116      	bne.n	80073d8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073ae:	e013      	b.n	80073d8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073b0:	4b58      	ldr	r3, [pc, #352]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10f      	bne.n	80073dc <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073bc:	4b55      	ldr	r3, [pc, #340]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d109      	bne.n	80073dc <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073cc:	e006      	b.n	80073dc <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	73fb      	strb	r3, [r7, #15]
      break;
 80073d2:	e004      	b.n	80073de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80073d4:	bf00      	nop
 80073d6:	e002      	b.n	80073de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80073d8:	bf00      	nop
 80073da:	e000      	b.n	80073de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80073dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d108      	bne.n	80073f6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80073e4:	4b4b      	ldr	r3, [pc, #300]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f023 0203 	bic.w	r2, r3, #3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4948      	ldr	r1, [pc, #288]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 8086 	bne.w	800750a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80073fe:	4b45      	ldr	r3, [pc, #276]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a44      	ldr	r2, [pc, #272]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800740a:	f7fb fd43 	bl	8002e94 <HAL_GetTick>
 800740e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007410:	e009      	b.n	8007426 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007412:	f7fb fd3f 	bl	8002e94 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d902      	bls.n	8007426 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	73fb      	strb	r3, [r7, #15]
        break;
 8007424:	e005      	b.n	8007432 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007426:	4b3b      	ldr	r3, [pc, #236]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1ef      	bne.n	8007412 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d168      	bne.n	800750a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d113      	bne.n	8007466 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800743e:	4b35      	ldr	r3, [pc, #212]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	4b35      	ldr	r3, [pc, #212]	; (8007518 <RCCEx_PLLSAI2_Config+0x1d4>)
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6892      	ldr	r2, [r2, #8]
 800744a:	0211      	lsls	r1, r2, #8
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68d2      	ldr	r2, [r2, #12]
 8007450:	06d2      	lsls	r2, r2, #27
 8007452:	4311      	orrs	r1, r2
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6852      	ldr	r2, [r2, #4]
 8007458:	3a01      	subs	r2, #1
 800745a:	0112      	lsls	r2, r2, #4
 800745c:	430a      	orrs	r2, r1
 800745e:	492d      	ldr	r1, [pc, #180]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007460:	4313      	orrs	r3, r2
 8007462:	614b      	str	r3, [r1, #20]
 8007464:	e02d      	b.n	80074c2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d115      	bne.n	8007498 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800746c:	4b29      	ldr	r3, [pc, #164]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 800746e:	695a      	ldr	r2, [r3, #20]
 8007470:	4b2a      	ldr	r3, [pc, #168]	; (800751c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007472:	4013      	ands	r3, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6892      	ldr	r2, [r2, #8]
 8007478:	0211      	lsls	r1, r2, #8
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6912      	ldr	r2, [r2, #16]
 800747e:	0852      	lsrs	r2, r2, #1
 8007480:	3a01      	subs	r2, #1
 8007482:	0552      	lsls	r2, r2, #21
 8007484:	4311      	orrs	r1, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6852      	ldr	r2, [r2, #4]
 800748a:	3a01      	subs	r2, #1
 800748c:	0112      	lsls	r2, r2, #4
 800748e:	430a      	orrs	r2, r1
 8007490:	4920      	ldr	r1, [pc, #128]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	614b      	str	r3, [r1, #20]
 8007496:	e014      	b.n	80074c2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007498:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 800749a:	695a      	ldr	r2, [r3, #20]
 800749c:	4b20      	ldr	r3, [pc, #128]	; (8007520 <RCCEx_PLLSAI2_Config+0x1dc>)
 800749e:	4013      	ands	r3, r2
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6892      	ldr	r2, [r2, #8]
 80074a4:	0211      	lsls	r1, r2, #8
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6952      	ldr	r2, [r2, #20]
 80074aa:	0852      	lsrs	r2, r2, #1
 80074ac:	3a01      	subs	r2, #1
 80074ae:	0652      	lsls	r2, r2, #25
 80074b0:	4311      	orrs	r1, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6852      	ldr	r2, [r2, #4]
 80074b6:	3a01      	subs	r2, #1
 80074b8:	0112      	lsls	r2, r2, #4
 80074ba:	430a      	orrs	r2, r1
 80074bc:	4915      	ldr	r1, [pc, #84]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a13      	ldr	r2, [pc, #76]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ce:	f7fb fce1 	bl	8002e94 <HAL_GetTick>
 80074d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074d4:	e009      	b.n	80074ea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074d6:	f7fb fcdd 	bl	8002e94 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d902      	bls.n	80074ea <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	73fb      	strb	r3, [r7, #15]
          break;
 80074e8:	e005      	b.n	80074f6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074ea:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0ef      	beq.n	80074d6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074fe:	695a      	ldr	r2, [r3, #20]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	4903      	ldr	r1, [pc, #12]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007506:	4313      	orrs	r3, r2
 8007508:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40021000 	.word	0x40021000
 8007518:	07ff800f 	.word	0x07ff800f
 800751c:	ff9f800f 	.word	0xff9f800f
 8007520:	f9ff800f 	.word	0xf9ff800f

08007524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e095      	b.n	8007662 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d108      	bne.n	8007550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007546:	d009      	beq.n	800755c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	61da      	str	r2, [r3, #28]
 800754e:	e005      	b.n	800755c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fb f97c 	bl	8002874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007592:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800759c:	d902      	bls.n	80075a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e002      	b.n	80075aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80075b2:	d007      	beq.n	80075c4 <HAL_SPI_Init+0xa0>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075bc:	d002      	beq.n	80075c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007606:	ea42 0103 	orr.w	r1, r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	f003 0204 	and.w	r2, r3, #4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007632:	f003 0308 	and.w	r3, r3, #8
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007640:	ea42 0103 	orr.w	r1, r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e042      	b.n	8007702 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fb f966 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2224      	movs	r2, #36	; 0x24
 8007698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0201 	bic.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f8c3 	bl	8007838 <UART_SetConfig>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e022      	b.n	8007702 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb89 	bl	8007ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0201 	orr.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fc10 	bl	8007f20 <UART_CheckIdleState>
 8007700:	4603      	mov	r3, r0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b08a      	sub	sp, #40	; 0x28
 800770e:	af02      	add	r7, sp, #8
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	603b      	str	r3, [r7, #0]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007720:	2b20      	cmp	r3, #32
 8007722:	f040 8084 	bne.w	800782e <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_UART_Transmit+0x28>
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e07c      	b.n	8007830 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_UART_Transmit+0x3a>
 8007740:	2302      	movs	r3, #2
 8007742:	e075      	b.n	8007830 <HAL_UART_Transmit+0x126>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2221      	movs	r2, #33	; 0x21
 8007758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800775c:	f7fb fb9a 	bl	8002e94 <HAL_GetTick>
 8007760:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	88fa      	ldrh	r2, [r7, #6]
 800776e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d108      	bne.n	800778e <HAL_UART_Transmit+0x84>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	e003      	b.n	8007796 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800779e:	e02d      	b.n	80077fc <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2200      	movs	r2, #0
 80077a8:	2180      	movs	r1, #128	; 0x80
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fc00 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e03a      	b.n	8007830 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10b      	bne.n	80077d8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	881a      	ldrh	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077cc:	b292      	uxth	r2, r2
 80077ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	3302      	adds	r3, #2
 80077d4:	61bb      	str	r3, [r7, #24]
 80077d6:	e008      	b.n	80077ea <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	b292      	uxth	r2, r2
 80077e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	3301      	adds	r3, #1
 80077e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1cb      	bne.n	80077a0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2200      	movs	r2, #0
 8007810:	2140      	movs	r1, #64	; 0x40
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fbcc 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e006      	b.n	8007830 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	e000      	b.n	8007830 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800782e:	2302      	movs	r3, #2
  }
}
 8007830:	4618      	mov	r0, r3
 8007832:	3720      	adds	r7, #32
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007838:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800783c:	b088      	sub	sp, #32
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	431a      	orrs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	4313      	orrs	r3, r2
 800785c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	4313      	orrs	r3, r2
 8007866:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4bb1      	ldr	r3, [pc, #708]	; (8007b34 <UART_SetConfig+0x2fc>)
 8007870:	4013      	ands	r3, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6812      	ldr	r2, [r2, #0]
 8007876:	69f9      	ldr	r1, [r7, #28]
 8007878:	430b      	orrs	r3, r1
 800787a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4aa6      	ldr	r2, [pc, #664]	; (8007b38 <UART_SetConfig+0x300>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80078b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	69f9      	ldr	r1, [r7, #28]
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	f023 010f 	bic.w	r1, r3, #15
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a97      	ldr	r2, [pc, #604]	; (8007b3c <UART_SetConfig+0x304>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d121      	bne.n	8007928 <UART_SetConfig+0xf0>
 80078e4:	4b96      	ldr	r3, [pc, #600]	; (8007b40 <UART_SetConfig+0x308>)
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d816      	bhi.n	8007920 <UART_SetConfig+0xe8>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <UART_SetConfig+0xc0>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007909 	.word	0x08007909
 80078fc:	08007915 	.word	0x08007915
 8007900:	0800790f 	.word	0x0800790f
 8007904:	0800791b 	.word	0x0800791b
 8007908:	2301      	movs	r3, #1
 800790a:	76fb      	strb	r3, [r7, #27]
 800790c:	e0e8      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 800790e:	2302      	movs	r3, #2
 8007910:	76fb      	strb	r3, [r7, #27]
 8007912:	e0e5      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007914:	2304      	movs	r3, #4
 8007916:	76fb      	strb	r3, [r7, #27]
 8007918:	e0e2      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 800791a:	2308      	movs	r3, #8
 800791c:	76fb      	strb	r3, [r7, #27]
 800791e:	e0df      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007920:	2310      	movs	r3, #16
 8007922:	76fb      	strb	r3, [r7, #27]
 8007924:	bf00      	nop
 8007926:	e0db      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a85      	ldr	r2, [pc, #532]	; (8007b44 <UART_SetConfig+0x30c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d134      	bne.n	800799c <UART_SetConfig+0x164>
 8007932:	4b83      	ldr	r3, [pc, #524]	; (8007b40 <UART_SetConfig+0x308>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	f003 030c 	and.w	r3, r3, #12
 800793c:	2b0c      	cmp	r3, #12
 800793e:	d829      	bhi.n	8007994 <UART_SetConfig+0x15c>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0x110>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	0800797d 	.word	0x0800797d
 800794c:	08007995 	.word	0x08007995
 8007950:	08007995 	.word	0x08007995
 8007954:	08007995 	.word	0x08007995
 8007958:	08007989 	.word	0x08007989
 800795c:	08007995 	.word	0x08007995
 8007960:	08007995 	.word	0x08007995
 8007964:	08007995 	.word	0x08007995
 8007968:	08007983 	.word	0x08007983
 800796c:	08007995 	.word	0x08007995
 8007970:	08007995 	.word	0x08007995
 8007974:	08007995 	.word	0x08007995
 8007978:	0800798f 	.word	0x0800798f
 800797c:	2300      	movs	r3, #0
 800797e:	76fb      	strb	r3, [r7, #27]
 8007980:	e0ae      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007982:	2302      	movs	r3, #2
 8007984:	76fb      	strb	r3, [r7, #27]
 8007986:	e0ab      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007988:	2304      	movs	r3, #4
 800798a:	76fb      	strb	r3, [r7, #27]
 800798c:	e0a8      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 800798e:	2308      	movs	r3, #8
 8007990:	76fb      	strb	r3, [r7, #27]
 8007992:	e0a5      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007994:	2310      	movs	r3, #16
 8007996:	76fb      	strb	r3, [r7, #27]
 8007998:	bf00      	nop
 800799a:	e0a1      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a69      	ldr	r2, [pc, #420]	; (8007b48 <UART_SetConfig+0x310>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d120      	bne.n	80079e8 <UART_SetConfig+0x1b0>
 80079a6:	4b66      	ldr	r3, [pc, #408]	; (8007b40 <UART_SetConfig+0x308>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079b0:	2b10      	cmp	r3, #16
 80079b2:	d00f      	beq.n	80079d4 <UART_SetConfig+0x19c>
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d802      	bhi.n	80079be <UART_SetConfig+0x186>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <UART_SetConfig+0x190>
 80079bc:	e010      	b.n	80079e0 <UART_SetConfig+0x1a8>
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d005      	beq.n	80079ce <UART_SetConfig+0x196>
 80079c2:	2b30      	cmp	r3, #48	; 0x30
 80079c4:	d009      	beq.n	80079da <UART_SetConfig+0x1a2>
 80079c6:	e00b      	b.n	80079e0 <UART_SetConfig+0x1a8>
 80079c8:	2300      	movs	r3, #0
 80079ca:	76fb      	strb	r3, [r7, #27]
 80079cc:	e088      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 80079ce:	2302      	movs	r3, #2
 80079d0:	76fb      	strb	r3, [r7, #27]
 80079d2:	e085      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 80079d4:	2304      	movs	r3, #4
 80079d6:	76fb      	strb	r3, [r7, #27]
 80079d8:	e082      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 80079da:	2308      	movs	r3, #8
 80079dc:	76fb      	strb	r3, [r7, #27]
 80079de:	e07f      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 80079e0:	2310      	movs	r3, #16
 80079e2:	76fb      	strb	r3, [r7, #27]
 80079e4:	bf00      	nop
 80079e6:	e07b      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a57      	ldr	r2, [pc, #348]	; (8007b4c <UART_SetConfig+0x314>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d120      	bne.n	8007a34 <UART_SetConfig+0x1fc>
 80079f2:	4b53      	ldr	r3, [pc, #332]	; (8007b40 <UART_SetConfig+0x308>)
 80079f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d00f      	beq.n	8007a20 <UART_SetConfig+0x1e8>
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d802      	bhi.n	8007a0a <UART_SetConfig+0x1d2>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <UART_SetConfig+0x1dc>
 8007a08:	e010      	b.n	8007a2c <UART_SetConfig+0x1f4>
 8007a0a:	2b80      	cmp	r3, #128	; 0x80
 8007a0c:	d005      	beq.n	8007a1a <UART_SetConfig+0x1e2>
 8007a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a10:	d009      	beq.n	8007a26 <UART_SetConfig+0x1ee>
 8007a12:	e00b      	b.n	8007a2c <UART_SetConfig+0x1f4>
 8007a14:	2300      	movs	r3, #0
 8007a16:	76fb      	strb	r3, [r7, #27]
 8007a18:	e062      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	76fb      	strb	r3, [r7, #27]
 8007a1e:	e05f      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a20:	2304      	movs	r3, #4
 8007a22:	76fb      	strb	r3, [r7, #27]
 8007a24:	e05c      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a26:	2308      	movs	r3, #8
 8007a28:	76fb      	strb	r3, [r7, #27]
 8007a2a:	e059      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	76fb      	strb	r3, [r7, #27]
 8007a30:	bf00      	nop
 8007a32:	e055      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a45      	ldr	r2, [pc, #276]	; (8007b50 <UART_SetConfig+0x318>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d124      	bne.n	8007a88 <UART_SetConfig+0x250>
 8007a3e:	4b40      	ldr	r3, [pc, #256]	; (8007b40 <UART_SetConfig+0x308>)
 8007a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4c:	d012      	beq.n	8007a74 <UART_SetConfig+0x23c>
 8007a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a52:	d802      	bhi.n	8007a5a <UART_SetConfig+0x222>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d007      	beq.n	8007a68 <UART_SetConfig+0x230>
 8007a58:	e012      	b.n	8007a80 <UART_SetConfig+0x248>
 8007a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5e:	d006      	beq.n	8007a6e <UART_SetConfig+0x236>
 8007a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a64:	d009      	beq.n	8007a7a <UART_SetConfig+0x242>
 8007a66:	e00b      	b.n	8007a80 <UART_SetConfig+0x248>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	76fb      	strb	r3, [r7, #27]
 8007a6c:	e038      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	76fb      	strb	r3, [r7, #27]
 8007a72:	e035      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a74:	2304      	movs	r3, #4
 8007a76:	76fb      	strb	r3, [r7, #27]
 8007a78:	e032      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	76fb      	strb	r3, [r7, #27]
 8007a7e:	e02f      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a80:	2310      	movs	r3, #16
 8007a82:	76fb      	strb	r3, [r7, #27]
 8007a84:	bf00      	nop
 8007a86:	e02b      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a2a      	ldr	r2, [pc, #168]	; (8007b38 <UART_SetConfig+0x300>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d124      	bne.n	8007adc <UART_SetConfig+0x2a4>
 8007a92:	4b2b      	ldr	r3, [pc, #172]	; (8007b40 <UART_SetConfig+0x308>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa0:	d012      	beq.n	8007ac8 <UART_SetConfig+0x290>
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa6:	d802      	bhi.n	8007aae <UART_SetConfig+0x276>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <UART_SetConfig+0x284>
 8007aac:	e012      	b.n	8007ad4 <UART_SetConfig+0x29c>
 8007aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab2:	d006      	beq.n	8007ac2 <UART_SetConfig+0x28a>
 8007ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ab8:	d009      	beq.n	8007ace <UART_SetConfig+0x296>
 8007aba:	e00b      	b.n	8007ad4 <UART_SetConfig+0x29c>
 8007abc:	2300      	movs	r3, #0
 8007abe:	76fb      	strb	r3, [r7, #27]
 8007ac0:	e00e      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	76fb      	strb	r3, [r7, #27]
 8007ac6:	e00b      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	76fb      	strb	r3, [r7, #27]
 8007acc:	e008      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007ace:	2308      	movs	r3, #8
 8007ad0:	76fb      	strb	r3, [r7, #27]
 8007ad2:	e005      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	76fb      	strb	r3, [r7, #27]
 8007ad8:	bf00      	nop
 8007ada:	e001      	b.n	8007ae0 <UART_SetConfig+0x2a8>
 8007adc:	2310      	movs	r3, #16
 8007ade:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a14      	ldr	r2, [pc, #80]	; (8007b38 <UART_SetConfig+0x300>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	f040 80a1 	bne.w	8007c2e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aec:	7efb      	ldrb	r3, [r7, #27]
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d836      	bhi.n	8007b60 <UART_SetConfig+0x328>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <UART_SetConfig+0x2c0>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b61 	.word	0x08007b61
 8007b00:	08007b25 	.word	0x08007b25
 8007b04:	08007b61 	.word	0x08007b61
 8007b08:	08007b2b 	.word	0x08007b2b
 8007b0c:	08007b61 	.word	0x08007b61
 8007b10:	08007b61 	.word	0x08007b61
 8007b14:	08007b61 	.word	0x08007b61
 8007b18:	08007b59 	.word	0x08007b59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b1c:	f7fe fefc 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 8007b20:	6178      	str	r0, [r7, #20]
        break;
 8007b22:	e022      	b.n	8007b6a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <UART_SetConfig+0x31c>)
 8007b26:	617b      	str	r3, [r7, #20]
        break;
 8007b28:	e01f      	b.n	8007b6a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2a:	f7fe fe5f 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8007b2e:	6178      	str	r0, [r7, #20]
        break;
 8007b30:	e01b      	b.n	8007b6a <UART_SetConfig+0x332>
 8007b32:	bf00      	nop
 8007b34:	cfff69f3 	.word	0xcfff69f3
 8007b38:	40008000 	.word	0x40008000
 8007b3c:	40013800 	.word	0x40013800
 8007b40:	40021000 	.word	0x40021000
 8007b44:	40004400 	.word	0x40004400
 8007b48:	40004800 	.word	0x40004800
 8007b4c:	40004c00 	.word	0x40004c00
 8007b50:	40005000 	.word	0x40005000
 8007b54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5c:	617b      	str	r3, [r7, #20]
        break;
 8007b5e:	e004      	b.n	8007b6a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	76bb      	strb	r3, [r7, #26]
        break;
 8007b68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 811d 	beq.w	8007dac <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	4a97      	ldr	r2, [pc, #604]	; (8007dd4 <UART_SetConfig+0x59c>)
 8007b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b84:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	4413      	add	r3, r2
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d305      	bcc.n	8007ba2 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d902      	bls.n	8007ba8 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	76bb      	strb	r3, [r7, #26]
 8007ba6:	e101      	b.n	8007dac <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f04f 0100 	mov.w	r1, #0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	4a87      	ldr	r2, [pc, #540]	; (8007dd4 <UART_SetConfig+0x59c>)
 8007bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f04f 0400 	mov.w	r4, #0
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4623      	mov	r3, r4
 8007bc4:	f7f8 ffd8 	bl	8000b78 <__aeabi_uldivmod>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4622      	mov	r2, r4
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	f04f 0400 	mov.w	r4, #0
 8007bd8:	0214      	lsls	r4, r2, #8
 8007bda:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007bde:	020b      	lsls	r3, r1, #8
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6852      	ldr	r2, [r2, #4]
 8007be4:	0852      	lsrs	r2, r2, #1
 8007be6:	4611      	mov	r1, r2
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	eb13 0b01 	adds.w	fp, r3, r1
 8007bf0:	eb44 0c02 	adc.w	ip, r4, r2
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	4661      	mov	r1, ip
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f04f 0400 	mov.w	r4, #0
 8007c00:	461a      	mov	r2, r3
 8007c02:	4623      	mov	r3, r4
 8007c04:	f7f8 ffb8 	bl	8000b78 <__aeabi_uldivmod>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c14:	d308      	bcc.n	8007c28 <UART_SetConfig+0x3f0>
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1c:	d204      	bcs.n	8007c28 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	60da      	str	r2, [r3, #12]
 8007c26:	e0c1      	b.n	8007dac <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	76bb      	strb	r3, [r7, #26]
 8007c2c:	e0be      	b.n	8007dac <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c36:	d164      	bne.n	8007d02 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8007c38:	7efb      	ldrb	r3, [r7, #27]
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d827      	bhi.n	8007c8e <UART_SetConfig+0x456>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <UART_SetConfig+0x40c>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c71 	.word	0x08007c71
 8007c4c:	08007c79 	.word	0x08007c79
 8007c50:	08007c8f 	.word	0x08007c8f
 8007c54:	08007c7f 	.word	0x08007c7f
 8007c58:	08007c8f 	.word	0x08007c8f
 8007c5c:	08007c8f 	.word	0x08007c8f
 8007c60:	08007c8f 	.word	0x08007c8f
 8007c64:	08007c87 	.word	0x08007c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c68:	f7fe fe56 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 8007c6c:	6178      	str	r0, [r7, #20]
        break;
 8007c6e:	e013      	b.n	8007c98 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c70:	f7fe fe68 	bl	8006944 <HAL_RCC_GetPCLK2Freq>
 8007c74:	6178      	str	r0, [r7, #20]
        break;
 8007c76:	e00f      	b.n	8007c98 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c78:	4b57      	ldr	r3, [pc, #348]	; (8007dd8 <UART_SetConfig+0x5a0>)
 8007c7a:	617b      	str	r3, [r7, #20]
        break;
 8007c7c:	e00c      	b.n	8007c98 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c7e:	f7fe fdb5 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8007c82:	6178      	str	r0, [r7, #20]
        break;
 8007c84:	e008      	b.n	8007c98 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8a:	617b      	str	r3, [r7, #20]
        break;
 8007c8c:	e004      	b.n	8007c98 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	76bb      	strb	r3, [r7, #26]
        break;
 8007c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8086 	beq.w	8007dac <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	4a4b      	ldr	r2, [pc, #300]	; (8007dd4 <UART_SetConfig+0x59c>)
 8007ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007caa:	461a      	mov	r2, r3
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb2:	005a      	lsls	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	441a      	add	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b0f      	cmp	r3, #15
 8007ccc:	d916      	bls.n	8007cfc <UART_SetConfig+0x4c4>
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd4:	d212      	bcs.n	8007cfc <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f023 030f 	bic.w	r3, r3, #15
 8007cde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	89fb      	ldrh	r3, [r7, #14]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	89fa      	ldrh	r2, [r7, #14]
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	e057      	b.n	8007dac <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	76bb      	strb	r3, [r7, #26]
 8007d00:	e054      	b.n	8007dac <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d02:	7efb      	ldrb	r3, [r7, #27]
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d828      	bhi.n	8007d5a <UART_SetConfig+0x522>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <UART_SetConfig+0x4d8>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d35 	.word	0x08007d35
 8007d14:	08007d3d 	.word	0x08007d3d
 8007d18:	08007d45 	.word	0x08007d45
 8007d1c:	08007d5b 	.word	0x08007d5b
 8007d20:	08007d4b 	.word	0x08007d4b
 8007d24:	08007d5b 	.word	0x08007d5b
 8007d28:	08007d5b 	.word	0x08007d5b
 8007d2c:	08007d5b 	.word	0x08007d5b
 8007d30:	08007d53 	.word	0x08007d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d34:	f7fe fdf0 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 8007d38:	6178      	str	r0, [r7, #20]
        break;
 8007d3a:	e013      	b.n	8007d64 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d3c:	f7fe fe02 	bl	8006944 <HAL_RCC_GetPCLK2Freq>
 8007d40:	6178      	str	r0, [r7, #20]
        break;
 8007d42:	e00f      	b.n	8007d64 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <UART_SetConfig+0x5a0>)
 8007d46:	617b      	str	r3, [r7, #20]
        break;
 8007d48:	e00c      	b.n	8007d64 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d4a:	f7fe fd4f 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8007d4e:	6178      	str	r0, [r7, #20]
        break;
 8007d50:	e008      	b.n	8007d64 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d56:	617b      	str	r3, [r7, #20]
        break;
 8007d58:	e004      	b.n	8007d64 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	76bb      	strb	r3, [r7, #26]
        break;
 8007d62:	bf00      	nop
    }

    if (pclk != 0U)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	4a19      	ldr	r2, [pc, #100]	; (8007dd4 <UART_SetConfig+0x59c>)
 8007d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d74:	461a      	mov	r2, r3
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	441a      	add	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	2b0f      	cmp	r3, #15
 8007d94:	d908      	bls.n	8007da8 <UART_SetConfig+0x570>
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9c:	d204      	bcs.n	8007da8 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	e001      	b.n	8007dac <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007dc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007dd4:	08009e18 	.word	0x08009e18
 8007dd8:	00f42400 	.word	0x00f42400

08007ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eda:	d10a      	bne.n	8007ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f30:	f7fa ffb0 	bl	8002e94 <HAL_GetTick>
 8007f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d10e      	bne.n	8007f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f82c 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e022      	b.n	8007fa8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d10e      	bne.n	8007f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f816 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e00c      	b.n	8007fa8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc0:	e062      	b.n	8008088 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d05e      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fca:	f7fa ff63 	bl	8002e94 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d11d      	bne.n	800801c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fee:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0201 	bic.w	r2, r2, #1
 8007ffe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2220      	movs	r2, #32
 800800c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e045      	b.n	80080a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d02e      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008038:	d126      	bne.n	8008088 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008042:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008052:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2220      	movs	r2, #32
 8008078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e00f      	b.n	80080a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4013      	ands	r3, r2
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	429a      	cmp	r2, r3
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d08d      	beq.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e027      	b.n	8008116 <HAL_UARTEx_DisableFifoMode+0x66>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2224      	movs	r2, #36	; 0x24
 80080d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0201 	bic.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008136:	2302      	movs	r3, #2
 8008138:	e02d      	b.n	8008196 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2224      	movs	r2, #36	; 0x24
 8008146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0201 	bic.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f850 	bl	800821c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e02d      	b.n	8008212 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2224      	movs	r2, #36	; 0x24
 80081c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0201 	bic.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f812 	bl	800821c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b089      	sub	sp, #36	; 0x24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008224:	4a2f      	ldr	r2, [pc, #188]	; (80082e4 <UARTEx_SetNbDataToProcess+0xc8>)
 8008226:	f107 0314 	add.w	r3, r7, #20
 800822a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800822e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008232:	4a2d      	ldr	r2, [pc, #180]	; (80082e8 <UARTEx_SetNbDataToProcess+0xcc>)
 8008234:	f107 030c 	add.w	r3, r7, #12
 8008238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800823c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008244:	2b00      	cmp	r3, #0
 8008246:	d108      	bne.n	800825a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008258:	e03d      	b.n	80082d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800825a:	2308      	movs	r3, #8
 800825c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800825e:	2308      	movs	r3, #8
 8008260:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	0e5b      	lsrs	r3, r3, #25
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	0f5b      	lsrs	r3, r3, #29
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008282:	7fbb      	ldrb	r3, [r7, #30]
 8008284:	7f3a      	ldrb	r2, [r7, #28]
 8008286:	f107 0120 	add.w	r1, r7, #32
 800828a:	440a      	add	r2, r1
 800828c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008290:	fb02 f303 	mul.w	r3, r2, r3
 8008294:	7f3a      	ldrb	r2, [r7, #28]
 8008296:	f107 0120 	add.w	r1, r7, #32
 800829a:	440a      	add	r2, r1
 800829c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80082a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80082ac:	7ffb      	ldrb	r3, [r7, #31]
 80082ae:	7f7a      	ldrb	r2, [r7, #29]
 80082b0:	f107 0120 	add.w	r1, r7, #32
 80082b4:	440a      	add	r2, r1
 80082b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80082ba:	fb02 f303 	mul.w	r3, r2, r3
 80082be:	7f7a      	ldrb	r2, [r7, #29]
 80082c0:	f107 0120 	add.w	r1, r7, #32
 80082c4:	440a      	add	r2, r1
 80082c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80082ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082d6:	bf00      	nop
 80082d8:	3724      	adds	r7, #36	; 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	08009dc0 	.word	0x08009dc0
 80082e8:	08009dc8 	.word	0x08009dc8

080082ec <__errno>:
 80082ec:	4b01      	ldr	r3, [pc, #4]	; (80082f4 <__errno+0x8>)
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20000040 	.word	0x20000040

080082f8 <__libc_init_array>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4e0d      	ldr	r6, [pc, #52]	; (8008330 <__libc_init_array+0x38>)
 80082fc:	4c0d      	ldr	r4, [pc, #52]	; (8008334 <__libc_init_array+0x3c>)
 80082fe:	1ba4      	subs	r4, r4, r6
 8008300:	10a4      	asrs	r4, r4, #2
 8008302:	2500      	movs	r5, #0
 8008304:	42a5      	cmp	r5, r4
 8008306:	d109      	bne.n	800831c <__libc_init_array+0x24>
 8008308:	4e0b      	ldr	r6, [pc, #44]	; (8008338 <__libc_init_array+0x40>)
 800830a:	4c0c      	ldr	r4, [pc, #48]	; (800833c <__libc_init_array+0x44>)
 800830c:	f001 fd3a 	bl	8009d84 <_init>
 8008310:	1ba4      	subs	r4, r4, r6
 8008312:	10a4      	asrs	r4, r4, #2
 8008314:	2500      	movs	r5, #0
 8008316:	42a5      	cmp	r5, r4
 8008318:	d105      	bne.n	8008326 <__libc_init_array+0x2e>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008320:	4798      	blx	r3
 8008322:	3501      	adds	r5, #1
 8008324:	e7ee      	b.n	8008304 <__libc_init_array+0xc>
 8008326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800832a:	4798      	blx	r3
 800832c:	3501      	adds	r5, #1
 800832e:	e7f2      	b.n	8008316 <__libc_init_array+0x1e>
 8008330:	08009ee8 	.word	0x08009ee8
 8008334:	08009ee8 	.word	0x08009ee8
 8008338:	08009ee8 	.word	0x08009ee8
 800833c:	08009eec 	.word	0x08009eec

08008340 <memset>:
 8008340:	4402      	add	r2, r0
 8008342:	4603      	mov	r3, r0
 8008344:	4293      	cmp	r3, r2
 8008346:	d100      	bne.n	800834a <memset+0xa>
 8008348:	4770      	bx	lr
 800834a:	f803 1b01 	strb.w	r1, [r3], #1
 800834e:	e7f9      	b.n	8008344 <memset+0x4>

08008350 <_puts_r>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	460e      	mov	r6, r1
 8008354:	4605      	mov	r5, r0
 8008356:	b118      	cbz	r0, 8008360 <_puts_r+0x10>
 8008358:	6983      	ldr	r3, [r0, #24]
 800835a:	b90b      	cbnz	r3, 8008360 <_puts_r+0x10>
 800835c:	f000 fa0c 	bl	8008778 <__sinit>
 8008360:	69ab      	ldr	r3, [r5, #24]
 8008362:	68ac      	ldr	r4, [r5, #8]
 8008364:	b913      	cbnz	r3, 800836c <_puts_r+0x1c>
 8008366:	4628      	mov	r0, r5
 8008368:	f000 fa06 	bl	8008778 <__sinit>
 800836c:	4b23      	ldr	r3, [pc, #140]	; (80083fc <_puts_r+0xac>)
 800836e:	429c      	cmp	r4, r3
 8008370:	d117      	bne.n	80083a2 <_puts_r+0x52>
 8008372:	686c      	ldr	r4, [r5, #4]
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	071b      	lsls	r3, r3, #28
 8008378:	d51d      	bpl.n	80083b6 <_puts_r+0x66>
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	b1db      	cbz	r3, 80083b6 <_puts_r+0x66>
 800837e:	3e01      	subs	r6, #1
 8008380:	68a3      	ldr	r3, [r4, #8]
 8008382:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008386:	3b01      	subs	r3, #1
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	b9e9      	cbnz	r1, 80083c8 <_puts_r+0x78>
 800838c:	2b00      	cmp	r3, #0
 800838e:	da2e      	bge.n	80083ee <_puts_r+0x9e>
 8008390:	4622      	mov	r2, r4
 8008392:	210a      	movs	r1, #10
 8008394:	4628      	mov	r0, r5
 8008396:	f000 f83f 	bl	8008418 <__swbuf_r>
 800839a:	3001      	adds	r0, #1
 800839c:	d011      	beq.n	80083c2 <_puts_r+0x72>
 800839e:	200a      	movs	r0, #10
 80083a0:	e011      	b.n	80083c6 <_puts_r+0x76>
 80083a2:	4b17      	ldr	r3, [pc, #92]	; (8008400 <_puts_r+0xb0>)
 80083a4:	429c      	cmp	r4, r3
 80083a6:	d101      	bne.n	80083ac <_puts_r+0x5c>
 80083a8:	68ac      	ldr	r4, [r5, #8]
 80083aa:	e7e3      	b.n	8008374 <_puts_r+0x24>
 80083ac:	4b15      	ldr	r3, [pc, #84]	; (8008404 <_puts_r+0xb4>)
 80083ae:	429c      	cmp	r4, r3
 80083b0:	bf08      	it	eq
 80083b2:	68ec      	ldreq	r4, [r5, #12]
 80083b4:	e7de      	b.n	8008374 <_puts_r+0x24>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4628      	mov	r0, r5
 80083ba:	f000 f87f 	bl	80084bc <__swsetup_r>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d0dd      	beq.n	800837e <_puts_r+0x2e>
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da04      	bge.n	80083d6 <_puts_r+0x86>
 80083cc:	69a2      	ldr	r2, [r4, #24]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	dc06      	bgt.n	80083e0 <_puts_r+0x90>
 80083d2:	290a      	cmp	r1, #10
 80083d4:	d004      	beq.n	80083e0 <_puts_r+0x90>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	6022      	str	r2, [r4, #0]
 80083dc:	7019      	strb	r1, [r3, #0]
 80083de:	e7cf      	b.n	8008380 <_puts_r+0x30>
 80083e0:	4622      	mov	r2, r4
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 f818 	bl	8008418 <__swbuf_r>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d1c9      	bne.n	8008380 <_puts_r+0x30>
 80083ec:	e7e9      	b.n	80083c2 <_puts_r+0x72>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	200a      	movs	r0, #10
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	6022      	str	r2, [r4, #0]
 80083f6:	7018      	strb	r0, [r3, #0]
 80083f8:	e7e5      	b.n	80083c6 <_puts_r+0x76>
 80083fa:	bf00      	nop
 80083fc:	08009e54 	.word	0x08009e54
 8008400:	08009e74 	.word	0x08009e74
 8008404:	08009e34 	.word	0x08009e34

08008408 <puts>:
 8008408:	4b02      	ldr	r3, [pc, #8]	; (8008414 <puts+0xc>)
 800840a:	4601      	mov	r1, r0
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f7ff bf9f 	b.w	8008350 <_puts_r>
 8008412:	bf00      	nop
 8008414:	20000040 	.word	0x20000040

08008418 <__swbuf_r>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	460e      	mov	r6, r1
 800841c:	4614      	mov	r4, r2
 800841e:	4605      	mov	r5, r0
 8008420:	b118      	cbz	r0, 800842a <__swbuf_r+0x12>
 8008422:	6983      	ldr	r3, [r0, #24]
 8008424:	b90b      	cbnz	r3, 800842a <__swbuf_r+0x12>
 8008426:	f000 f9a7 	bl	8008778 <__sinit>
 800842a:	4b21      	ldr	r3, [pc, #132]	; (80084b0 <__swbuf_r+0x98>)
 800842c:	429c      	cmp	r4, r3
 800842e:	d12a      	bne.n	8008486 <__swbuf_r+0x6e>
 8008430:	686c      	ldr	r4, [r5, #4]
 8008432:	69a3      	ldr	r3, [r4, #24]
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	071a      	lsls	r2, r3, #28
 800843a:	d52e      	bpl.n	800849a <__swbuf_r+0x82>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	b363      	cbz	r3, 800849a <__swbuf_r+0x82>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	6963      	ldr	r3, [r4, #20]
 8008448:	b2f6      	uxtb	r6, r6
 800844a:	4283      	cmp	r3, r0
 800844c:	4637      	mov	r7, r6
 800844e:	dc04      	bgt.n	800845a <__swbuf_r+0x42>
 8008450:	4621      	mov	r1, r4
 8008452:	4628      	mov	r0, r5
 8008454:	f000 f926 	bl	80086a4 <_fflush_r>
 8008458:	bb28      	cbnz	r0, 80084a6 <__swbuf_r+0x8e>
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	3b01      	subs	r3, #1
 800845e:	60a3      	str	r3, [r4, #8]
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	701e      	strb	r6, [r3, #0]
 8008468:	6963      	ldr	r3, [r4, #20]
 800846a:	3001      	adds	r0, #1
 800846c:	4283      	cmp	r3, r0
 800846e:	d004      	beq.n	800847a <__swbuf_r+0x62>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	07db      	lsls	r3, r3, #31
 8008474:	d519      	bpl.n	80084aa <__swbuf_r+0x92>
 8008476:	2e0a      	cmp	r6, #10
 8008478:	d117      	bne.n	80084aa <__swbuf_r+0x92>
 800847a:	4621      	mov	r1, r4
 800847c:	4628      	mov	r0, r5
 800847e:	f000 f911 	bl	80086a4 <_fflush_r>
 8008482:	b190      	cbz	r0, 80084aa <__swbuf_r+0x92>
 8008484:	e00f      	b.n	80084a6 <__swbuf_r+0x8e>
 8008486:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <__swbuf_r+0x9c>)
 8008488:	429c      	cmp	r4, r3
 800848a:	d101      	bne.n	8008490 <__swbuf_r+0x78>
 800848c:	68ac      	ldr	r4, [r5, #8]
 800848e:	e7d0      	b.n	8008432 <__swbuf_r+0x1a>
 8008490:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <__swbuf_r+0xa0>)
 8008492:	429c      	cmp	r4, r3
 8008494:	bf08      	it	eq
 8008496:	68ec      	ldreq	r4, [r5, #12]
 8008498:	e7cb      	b.n	8008432 <__swbuf_r+0x1a>
 800849a:	4621      	mov	r1, r4
 800849c:	4628      	mov	r0, r5
 800849e:	f000 f80d 	bl	80084bc <__swsetup_r>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d0cc      	beq.n	8008440 <__swbuf_r+0x28>
 80084a6:	f04f 37ff 	mov.w	r7, #4294967295
 80084aa:	4638      	mov	r0, r7
 80084ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ae:	bf00      	nop
 80084b0:	08009e54 	.word	0x08009e54
 80084b4:	08009e74 	.word	0x08009e74
 80084b8:	08009e34 	.word	0x08009e34

080084bc <__swsetup_r>:
 80084bc:	4b32      	ldr	r3, [pc, #200]	; (8008588 <__swsetup_r+0xcc>)
 80084be:	b570      	push	{r4, r5, r6, lr}
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	4606      	mov	r6, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	b125      	cbz	r5, 80084d2 <__swsetup_r+0x16>
 80084c8:	69ab      	ldr	r3, [r5, #24]
 80084ca:	b913      	cbnz	r3, 80084d2 <__swsetup_r+0x16>
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f953 	bl	8008778 <__sinit>
 80084d2:	4b2e      	ldr	r3, [pc, #184]	; (800858c <__swsetup_r+0xd0>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	d10f      	bne.n	80084f8 <__swsetup_r+0x3c>
 80084d8:	686c      	ldr	r4, [r5, #4]
 80084da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084de:	b29a      	uxth	r2, r3
 80084e0:	0715      	lsls	r5, r2, #28
 80084e2:	d42c      	bmi.n	800853e <__swsetup_r+0x82>
 80084e4:	06d0      	lsls	r0, r2, #27
 80084e6:	d411      	bmi.n	800850c <__swsetup_r+0x50>
 80084e8:	2209      	movs	r2, #9
 80084ea:	6032      	str	r2, [r6, #0]
 80084ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295
 80084f6:	e03e      	b.n	8008576 <__swsetup_r+0xba>
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <__swsetup_r+0xd4>)
 80084fa:	429c      	cmp	r4, r3
 80084fc:	d101      	bne.n	8008502 <__swsetup_r+0x46>
 80084fe:	68ac      	ldr	r4, [r5, #8]
 8008500:	e7eb      	b.n	80084da <__swsetup_r+0x1e>
 8008502:	4b24      	ldr	r3, [pc, #144]	; (8008594 <__swsetup_r+0xd8>)
 8008504:	429c      	cmp	r4, r3
 8008506:	bf08      	it	eq
 8008508:	68ec      	ldreq	r4, [r5, #12]
 800850a:	e7e6      	b.n	80084da <__swsetup_r+0x1e>
 800850c:	0751      	lsls	r1, r2, #29
 800850e:	d512      	bpl.n	8008536 <__swsetup_r+0x7a>
 8008510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008512:	b141      	cbz	r1, 8008526 <__swsetup_r+0x6a>
 8008514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008518:	4299      	cmp	r1, r3
 800851a:	d002      	beq.n	8008522 <__swsetup_r+0x66>
 800851c:	4630      	mov	r0, r6
 800851e:	f000 fa19 	bl	8008954 <_free_r>
 8008522:	2300      	movs	r3, #0
 8008524:	6363      	str	r3, [r4, #52]	; 0x34
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	2300      	movs	r3, #0
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f043 0308 	orr.w	r3, r3, #8
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	b94b      	cbnz	r3, 8008556 <__swsetup_r+0x9a>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854c:	d003      	beq.n	8008556 <__swsetup_r+0x9a>
 800854e:	4621      	mov	r1, r4
 8008550:	4630      	mov	r0, r6
 8008552:	f000 f9bf 	bl	80088d4 <__smakebuf_r>
 8008556:	89a2      	ldrh	r2, [r4, #12]
 8008558:	f012 0301 	ands.w	r3, r2, #1
 800855c:	d00c      	beq.n	8008578 <__swsetup_r+0xbc>
 800855e:	2300      	movs	r3, #0
 8008560:	60a3      	str	r3, [r4, #8]
 8008562:	6963      	ldr	r3, [r4, #20]
 8008564:	425b      	negs	r3, r3
 8008566:	61a3      	str	r3, [r4, #24]
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	b953      	cbnz	r3, 8008582 <__swsetup_r+0xc6>
 800856c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008570:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008574:	d1ba      	bne.n	80084ec <__swsetup_r+0x30>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	0792      	lsls	r2, r2, #30
 800857a:	bf58      	it	pl
 800857c:	6963      	ldrpl	r3, [r4, #20]
 800857e:	60a3      	str	r3, [r4, #8]
 8008580:	e7f2      	b.n	8008568 <__swsetup_r+0xac>
 8008582:	2000      	movs	r0, #0
 8008584:	e7f7      	b.n	8008576 <__swsetup_r+0xba>
 8008586:	bf00      	nop
 8008588:	20000040 	.word	0x20000040
 800858c:	08009e54 	.word	0x08009e54
 8008590:	08009e74 	.word	0x08009e74
 8008594:	08009e34 	.word	0x08009e34

08008598 <__sflush_r>:
 8008598:	898a      	ldrh	r2, [r1, #12]
 800859a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859e:	4605      	mov	r5, r0
 80085a0:	0710      	lsls	r0, r2, #28
 80085a2:	460c      	mov	r4, r1
 80085a4:	d458      	bmi.n	8008658 <__sflush_r+0xc0>
 80085a6:	684b      	ldr	r3, [r1, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dc05      	bgt.n	80085b8 <__sflush_r+0x20>
 80085ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dc02      	bgt.n	80085b8 <__sflush_r+0x20>
 80085b2:	2000      	movs	r0, #0
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ba:	2e00      	cmp	r6, #0
 80085bc:	d0f9      	beq.n	80085b2 <__sflush_r+0x1a>
 80085be:	2300      	movs	r3, #0
 80085c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085c4:	682f      	ldr	r7, [r5, #0]
 80085c6:	6a21      	ldr	r1, [r4, #32]
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	d032      	beq.n	8008632 <__sflush_r+0x9a>
 80085cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	075a      	lsls	r2, r3, #29
 80085d2:	d505      	bpl.n	80085e0 <__sflush_r+0x48>
 80085d4:	6863      	ldr	r3, [r4, #4]
 80085d6:	1ac0      	subs	r0, r0, r3
 80085d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085da:	b10b      	cbz	r3, 80085e0 <__sflush_r+0x48>
 80085dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085de:	1ac0      	subs	r0, r0, r3
 80085e0:	2300      	movs	r3, #0
 80085e2:	4602      	mov	r2, r0
 80085e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085e6:	6a21      	ldr	r1, [r4, #32]
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b0      	blx	r6
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	d106      	bne.n	8008600 <__sflush_r+0x68>
 80085f2:	6829      	ldr	r1, [r5, #0]
 80085f4:	291d      	cmp	r1, #29
 80085f6:	d848      	bhi.n	800868a <__sflush_r+0xf2>
 80085f8:	4a29      	ldr	r2, [pc, #164]	; (80086a0 <__sflush_r+0x108>)
 80085fa:	40ca      	lsrs	r2, r1
 80085fc:	07d6      	lsls	r6, r2, #31
 80085fe:	d544      	bpl.n	800868a <__sflush_r+0xf2>
 8008600:	2200      	movs	r2, #0
 8008602:	6062      	str	r2, [r4, #4]
 8008604:	04d9      	lsls	r1, r3, #19
 8008606:	6922      	ldr	r2, [r4, #16]
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	d504      	bpl.n	8008616 <__sflush_r+0x7e>
 800860c:	1c42      	adds	r2, r0, #1
 800860e:	d101      	bne.n	8008614 <__sflush_r+0x7c>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b903      	cbnz	r3, 8008616 <__sflush_r+0x7e>
 8008614:	6560      	str	r0, [r4, #84]	; 0x54
 8008616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008618:	602f      	str	r7, [r5, #0]
 800861a:	2900      	cmp	r1, #0
 800861c:	d0c9      	beq.n	80085b2 <__sflush_r+0x1a>
 800861e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008622:	4299      	cmp	r1, r3
 8008624:	d002      	beq.n	800862c <__sflush_r+0x94>
 8008626:	4628      	mov	r0, r5
 8008628:	f000 f994 	bl	8008954 <_free_r>
 800862c:	2000      	movs	r0, #0
 800862e:	6360      	str	r0, [r4, #52]	; 0x34
 8008630:	e7c0      	b.n	80085b4 <__sflush_r+0x1c>
 8008632:	2301      	movs	r3, #1
 8008634:	4628      	mov	r0, r5
 8008636:	47b0      	blx	r6
 8008638:	1c41      	adds	r1, r0, #1
 800863a:	d1c8      	bne.n	80085ce <__sflush_r+0x36>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c5      	beq.n	80085ce <__sflush_r+0x36>
 8008642:	2b1d      	cmp	r3, #29
 8008644:	d001      	beq.n	800864a <__sflush_r+0xb2>
 8008646:	2b16      	cmp	r3, #22
 8008648:	d101      	bne.n	800864e <__sflush_r+0xb6>
 800864a:	602f      	str	r7, [r5, #0]
 800864c:	e7b1      	b.n	80085b2 <__sflush_r+0x1a>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	e7ad      	b.n	80085b4 <__sflush_r+0x1c>
 8008658:	690f      	ldr	r7, [r1, #16]
 800865a:	2f00      	cmp	r7, #0
 800865c:	d0a9      	beq.n	80085b2 <__sflush_r+0x1a>
 800865e:	0793      	lsls	r3, r2, #30
 8008660:	680e      	ldr	r6, [r1, #0]
 8008662:	bf08      	it	eq
 8008664:	694b      	ldreq	r3, [r1, #20]
 8008666:	600f      	str	r7, [r1, #0]
 8008668:	bf18      	it	ne
 800866a:	2300      	movne	r3, #0
 800866c:	eba6 0807 	sub.w	r8, r6, r7
 8008670:	608b      	str	r3, [r1, #8]
 8008672:	f1b8 0f00 	cmp.w	r8, #0
 8008676:	dd9c      	ble.n	80085b2 <__sflush_r+0x1a>
 8008678:	4643      	mov	r3, r8
 800867a:	463a      	mov	r2, r7
 800867c:	6a21      	ldr	r1, [r4, #32]
 800867e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008680:	4628      	mov	r0, r5
 8008682:	47b0      	blx	r6
 8008684:	2800      	cmp	r0, #0
 8008686:	dc06      	bgt.n	8008696 <__sflush_r+0xfe>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	e78e      	b.n	80085b4 <__sflush_r+0x1c>
 8008696:	4407      	add	r7, r0
 8008698:	eba8 0800 	sub.w	r8, r8, r0
 800869c:	e7e9      	b.n	8008672 <__sflush_r+0xda>
 800869e:	bf00      	nop
 80086a0:	20400001 	.word	0x20400001

080086a4 <_fflush_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	4605      	mov	r5, r0
 80086aa:	460c      	mov	r4, r1
 80086ac:	b1db      	cbz	r3, 80086e6 <_fflush_r+0x42>
 80086ae:	b118      	cbz	r0, 80086b8 <_fflush_r+0x14>
 80086b0:	6983      	ldr	r3, [r0, #24]
 80086b2:	b90b      	cbnz	r3, 80086b8 <_fflush_r+0x14>
 80086b4:	f000 f860 	bl	8008778 <__sinit>
 80086b8:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <_fflush_r+0x48>)
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d109      	bne.n	80086d2 <_fflush_r+0x2e>
 80086be:	686c      	ldr	r4, [r5, #4]
 80086c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c4:	b17b      	cbz	r3, 80086e6 <_fflush_r+0x42>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4628      	mov	r0, r5
 80086ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ce:	f7ff bf63 	b.w	8008598 <__sflush_r>
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <_fflush_r+0x4c>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d101      	bne.n	80086dc <_fflush_r+0x38>
 80086d8:	68ac      	ldr	r4, [r5, #8]
 80086da:	e7f1      	b.n	80086c0 <_fflush_r+0x1c>
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <_fflush_r+0x50>)
 80086de:	429c      	cmp	r4, r3
 80086e0:	bf08      	it	eq
 80086e2:	68ec      	ldreq	r4, [r5, #12]
 80086e4:	e7ec      	b.n	80086c0 <_fflush_r+0x1c>
 80086e6:	2000      	movs	r0, #0
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	bf00      	nop
 80086ec:	08009e54 	.word	0x08009e54
 80086f0:	08009e74 	.word	0x08009e74
 80086f4:	08009e34 	.word	0x08009e34

080086f8 <std>:
 80086f8:	2300      	movs	r3, #0
 80086fa:	b510      	push	{r4, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008702:	6083      	str	r3, [r0, #8]
 8008704:	8181      	strh	r1, [r0, #12]
 8008706:	6643      	str	r3, [r0, #100]	; 0x64
 8008708:	81c2      	strh	r2, [r0, #14]
 800870a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800870e:	6183      	str	r3, [r0, #24]
 8008710:	4619      	mov	r1, r3
 8008712:	2208      	movs	r2, #8
 8008714:	305c      	adds	r0, #92	; 0x5c
 8008716:	f7ff fe13 	bl	8008340 <memset>
 800871a:	4b05      	ldr	r3, [pc, #20]	; (8008730 <std+0x38>)
 800871c:	6263      	str	r3, [r4, #36]	; 0x24
 800871e:	4b05      	ldr	r3, [pc, #20]	; (8008734 <std+0x3c>)
 8008720:	62a3      	str	r3, [r4, #40]	; 0x28
 8008722:	4b05      	ldr	r3, [pc, #20]	; (8008738 <std+0x40>)
 8008724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008726:	4b05      	ldr	r3, [pc, #20]	; (800873c <std+0x44>)
 8008728:	6224      	str	r4, [r4, #32]
 800872a:	6323      	str	r3, [r4, #48]	; 0x30
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	08008ac5 	.word	0x08008ac5
 8008734:	08008ae7 	.word	0x08008ae7
 8008738:	08008b1f 	.word	0x08008b1f
 800873c:	08008b43 	.word	0x08008b43

08008740 <_cleanup_r>:
 8008740:	4901      	ldr	r1, [pc, #4]	; (8008748 <_cleanup_r+0x8>)
 8008742:	f000 b885 	b.w	8008850 <_fwalk_reent>
 8008746:	bf00      	nop
 8008748:	080086a5 	.word	0x080086a5

0800874c <__sfmoreglue>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	1e4a      	subs	r2, r1, #1
 8008750:	2568      	movs	r5, #104	; 0x68
 8008752:	4355      	muls	r5, r2
 8008754:	460e      	mov	r6, r1
 8008756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800875a:	f000 f949 	bl	80089f0 <_malloc_r>
 800875e:	4604      	mov	r4, r0
 8008760:	b140      	cbz	r0, 8008774 <__sfmoreglue+0x28>
 8008762:	2100      	movs	r1, #0
 8008764:	e9c0 1600 	strd	r1, r6, [r0]
 8008768:	300c      	adds	r0, #12
 800876a:	60a0      	str	r0, [r4, #8]
 800876c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008770:	f7ff fde6 	bl	8008340 <memset>
 8008774:	4620      	mov	r0, r4
 8008776:	bd70      	pop	{r4, r5, r6, pc}

08008778 <__sinit>:
 8008778:	6983      	ldr	r3, [r0, #24]
 800877a:	b510      	push	{r4, lr}
 800877c:	4604      	mov	r4, r0
 800877e:	bb33      	cbnz	r3, 80087ce <__sinit+0x56>
 8008780:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008784:	6503      	str	r3, [r0, #80]	; 0x50
 8008786:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <__sinit+0x58>)
 8008788:	4a12      	ldr	r2, [pc, #72]	; (80087d4 <__sinit+0x5c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6282      	str	r2, [r0, #40]	; 0x28
 800878e:	4298      	cmp	r0, r3
 8008790:	bf04      	itt	eq
 8008792:	2301      	moveq	r3, #1
 8008794:	6183      	streq	r3, [r0, #24]
 8008796:	f000 f81f 	bl	80087d8 <__sfp>
 800879a:	6060      	str	r0, [r4, #4]
 800879c:	4620      	mov	r0, r4
 800879e:	f000 f81b 	bl	80087d8 <__sfp>
 80087a2:	60a0      	str	r0, [r4, #8]
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 f817 	bl	80087d8 <__sfp>
 80087aa:	2200      	movs	r2, #0
 80087ac:	60e0      	str	r0, [r4, #12]
 80087ae:	2104      	movs	r1, #4
 80087b0:	6860      	ldr	r0, [r4, #4]
 80087b2:	f7ff ffa1 	bl	80086f8 <std>
 80087b6:	2201      	movs	r2, #1
 80087b8:	2109      	movs	r1, #9
 80087ba:	68a0      	ldr	r0, [r4, #8]
 80087bc:	f7ff ff9c 	bl	80086f8 <std>
 80087c0:	2202      	movs	r2, #2
 80087c2:	2112      	movs	r1, #18
 80087c4:	68e0      	ldr	r0, [r4, #12]
 80087c6:	f7ff ff97 	bl	80086f8 <std>
 80087ca:	2301      	movs	r3, #1
 80087cc:	61a3      	str	r3, [r4, #24]
 80087ce:	bd10      	pop	{r4, pc}
 80087d0:	08009e30 	.word	0x08009e30
 80087d4:	08008741 	.word	0x08008741

080087d8 <__sfp>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <__sfp+0x70>)
 80087dc:	681e      	ldr	r6, [r3, #0]
 80087de:	69b3      	ldr	r3, [r6, #24]
 80087e0:	4607      	mov	r7, r0
 80087e2:	b913      	cbnz	r3, 80087ea <__sfp+0x12>
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7ff ffc7 	bl	8008778 <__sinit>
 80087ea:	3648      	adds	r6, #72	; 0x48
 80087ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	d503      	bpl.n	80087fc <__sfp+0x24>
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	b133      	cbz	r3, 8008806 <__sfp+0x2e>
 80087f8:	6836      	ldr	r6, [r6, #0]
 80087fa:	e7f7      	b.n	80087ec <__sfp+0x14>
 80087fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008800:	b16d      	cbz	r5, 800881e <__sfp+0x46>
 8008802:	3468      	adds	r4, #104	; 0x68
 8008804:	e7f4      	b.n	80087f0 <__sfp+0x18>
 8008806:	2104      	movs	r1, #4
 8008808:	4638      	mov	r0, r7
 800880a:	f7ff ff9f 	bl	800874c <__sfmoreglue>
 800880e:	6030      	str	r0, [r6, #0]
 8008810:	2800      	cmp	r0, #0
 8008812:	d1f1      	bne.n	80087f8 <__sfp+0x20>
 8008814:	230c      	movs	r3, #12
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	4604      	mov	r4, r0
 800881a:	4620      	mov	r0, r4
 800881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881e:	4b0b      	ldr	r3, [pc, #44]	; (800884c <__sfp+0x74>)
 8008820:	6665      	str	r5, [r4, #100]	; 0x64
 8008822:	e9c4 5500 	strd	r5, r5, [r4]
 8008826:	60a5      	str	r5, [r4, #8]
 8008828:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800882c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008830:	2208      	movs	r2, #8
 8008832:	4629      	mov	r1, r5
 8008834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008838:	f7ff fd82 	bl	8008340 <memset>
 800883c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008844:	e7e9      	b.n	800881a <__sfp+0x42>
 8008846:	bf00      	nop
 8008848:	08009e30 	.word	0x08009e30
 800884c:	ffff0001 	.word	0xffff0001

08008850 <_fwalk_reent>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	4680      	mov	r8, r0
 8008856:	4689      	mov	r9, r1
 8008858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800885c:	2600      	movs	r6, #0
 800885e:	b914      	cbnz	r4, 8008866 <_fwalk_reent+0x16>
 8008860:	4630      	mov	r0, r6
 8008862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008866:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800886a:	3f01      	subs	r7, #1
 800886c:	d501      	bpl.n	8008872 <_fwalk_reent+0x22>
 800886e:	6824      	ldr	r4, [r4, #0]
 8008870:	e7f5      	b.n	800885e <_fwalk_reent+0xe>
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d907      	bls.n	8008888 <_fwalk_reent+0x38>
 8008878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800887c:	3301      	adds	r3, #1
 800887e:	d003      	beq.n	8008888 <_fwalk_reent+0x38>
 8008880:	4629      	mov	r1, r5
 8008882:	4640      	mov	r0, r8
 8008884:	47c8      	blx	r9
 8008886:	4306      	orrs	r6, r0
 8008888:	3568      	adds	r5, #104	; 0x68
 800888a:	e7ee      	b.n	800886a <_fwalk_reent+0x1a>

0800888c <__swhatbuf_r>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	460e      	mov	r6, r1
 8008890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008894:	2900      	cmp	r1, #0
 8008896:	b096      	sub	sp, #88	; 0x58
 8008898:	4614      	mov	r4, r2
 800889a:	461d      	mov	r5, r3
 800889c:	da07      	bge.n	80088ae <__swhatbuf_r+0x22>
 800889e:	2300      	movs	r3, #0
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	89b3      	ldrh	r3, [r6, #12]
 80088a4:	061a      	lsls	r2, r3, #24
 80088a6:	d410      	bmi.n	80088ca <__swhatbuf_r+0x3e>
 80088a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ac:	e00e      	b.n	80088cc <__swhatbuf_r+0x40>
 80088ae:	466a      	mov	r2, sp
 80088b0:	f000 f96e 	bl	8008b90 <_fstat_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	dbf2      	blt.n	800889e <__swhatbuf_r+0x12>
 80088b8:	9a01      	ldr	r2, [sp, #4]
 80088ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088c2:	425a      	negs	r2, r3
 80088c4:	415a      	adcs	r2, r3
 80088c6:	602a      	str	r2, [r5, #0]
 80088c8:	e7ee      	b.n	80088a8 <__swhatbuf_r+0x1c>
 80088ca:	2340      	movs	r3, #64	; 0x40
 80088cc:	2000      	movs	r0, #0
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	b016      	add	sp, #88	; 0x58
 80088d2:	bd70      	pop	{r4, r5, r6, pc}

080088d4 <__smakebuf_r>:
 80088d4:	898b      	ldrh	r3, [r1, #12]
 80088d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088d8:	079d      	lsls	r5, r3, #30
 80088da:	4606      	mov	r6, r0
 80088dc:	460c      	mov	r4, r1
 80088de:	d507      	bpl.n	80088f0 <__smakebuf_r+0x1c>
 80088e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	2301      	movs	r3, #1
 80088ea:	6163      	str	r3, [r4, #20]
 80088ec:	b002      	add	sp, #8
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	ab01      	add	r3, sp, #4
 80088f2:	466a      	mov	r2, sp
 80088f4:	f7ff ffca 	bl	800888c <__swhatbuf_r>
 80088f8:	9900      	ldr	r1, [sp, #0]
 80088fa:	4605      	mov	r5, r0
 80088fc:	4630      	mov	r0, r6
 80088fe:	f000 f877 	bl	80089f0 <_malloc_r>
 8008902:	b948      	cbnz	r0, 8008918 <__smakebuf_r+0x44>
 8008904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008908:	059a      	lsls	r2, r3, #22
 800890a:	d4ef      	bmi.n	80088ec <__smakebuf_r+0x18>
 800890c:	f023 0303 	bic.w	r3, r3, #3
 8008910:	f043 0302 	orr.w	r3, r3, #2
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	e7e3      	b.n	80088e0 <__smakebuf_r+0xc>
 8008918:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <__smakebuf_r+0x7c>)
 800891a:	62b3      	str	r3, [r6, #40]	; 0x28
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	9b00      	ldr	r3, [sp, #0]
 8008928:	6163      	str	r3, [r4, #20]
 800892a:	9b01      	ldr	r3, [sp, #4]
 800892c:	6120      	str	r0, [r4, #16]
 800892e:	b15b      	cbz	r3, 8008948 <__smakebuf_r+0x74>
 8008930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008934:	4630      	mov	r0, r6
 8008936:	f000 f93d 	bl	8008bb4 <_isatty_r>
 800893a:	b128      	cbz	r0, 8008948 <__smakebuf_r+0x74>
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	f023 0303 	bic.w	r3, r3, #3
 8008942:	f043 0301 	orr.w	r3, r3, #1
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	431d      	orrs	r5, r3
 800894c:	81a5      	strh	r5, [r4, #12]
 800894e:	e7cd      	b.n	80088ec <__smakebuf_r+0x18>
 8008950:	08008741 	.word	0x08008741

08008954 <_free_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4605      	mov	r5, r0
 8008958:	2900      	cmp	r1, #0
 800895a:	d045      	beq.n	80089e8 <_free_r+0x94>
 800895c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008960:	1f0c      	subs	r4, r1, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfb8      	it	lt
 8008966:	18e4      	addlt	r4, r4, r3
 8008968:	f000 f946 	bl	8008bf8 <__malloc_lock>
 800896c:	4a1f      	ldr	r2, [pc, #124]	; (80089ec <_free_r+0x98>)
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	4610      	mov	r0, r2
 8008972:	b933      	cbnz	r3, 8008982 <_free_r+0x2e>
 8008974:	6063      	str	r3, [r4, #4]
 8008976:	6014      	str	r4, [r2, #0]
 8008978:	4628      	mov	r0, r5
 800897a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800897e:	f000 b93c 	b.w	8008bfa <__malloc_unlock>
 8008982:	42a3      	cmp	r3, r4
 8008984:	d90c      	bls.n	80089a0 <_free_r+0x4c>
 8008986:	6821      	ldr	r1, [r4, #0]
 8008988:	1862      	adds	r2, r4, r1
 800898a:	4293      	cmp	r3, r2
 800898c:	bf04      	itt	eq
 800898e:	681a      	ldreq	r2, [r3, #0]
 8008990:	685b      	ldreq	r3, [r3, #4]
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	bf04      	itt	eq
 8008996:	1852      	addeq	r2, r2, r1
 8008998:	6022      	streq	r2, [r4, #0]
 800899a:	6004      	str	r4, [r0, #0]
 800899c:	e7ec      	b.n	8008978 <_free_r+0x24>
 800899e:	4613      	mov	r3, r2
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	b10a      	cbz	r2, 80089a8 <_free_r+0x54>
 80089a4:	42a2      	cmp	r2, r4
 80089a6:	d9fa      	bls.n	800899e <_free_r+0x4a>
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	1858      	adds	r0, r3, r1
 80089ac:	42a0      	cmp	r0, r4
 80089ae:	d10b      	bne.n	80089c8 <_free_r+0x74>
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	4401      	add	r1, r0
 80089b4:	1858      	adds	r0, r3, r1
 80089b6:	4282      	cmp	r2, r0
 80089b8:	6019      	str	r1, [r3, #0]
 80089ba:	d1dd      	bne.n	8008978 <_free_r+0x24>
 80089bc:	6810      	ldr	r0, [r2, #0]
 80089be:	6852      	ldr	r2, [r2, #4]
 80089c0:	605a      	str	r2, [r3, #4]
 80089c2:	4401      	add	r1, r0
 80089c4:	6019      	str	r1, [r3, #0]
 80089c6:	e7d7      	b.n	8008978 <_free_r+0x24>
 80089c8:	d902      	bls.n	80089d0 <_free_r+0x7c>
 80089ca:	230c      	movs	r3, #12
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	e7d3      	b.n	8008978 <_free_r+0x24>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	1821      	adds	r1, r4, r0
 80089d4:	428a      	cmp	r2, r1
 80089d6:	bf04      	itt	eq
 80089d8:	6811      	ldreq	r1, [r2, #0]
 80089da:	6852      	ldreq	r2, [r2, #4]
 80089dc:	6062      	str	r2, [r4, #4]
 80089de:	bf04      	itt	eq
 80089e0:	1809      	addeq	r1, r1, r0
 80089e2:	6021      	streq	r1, [r4, #0]
 80089e4:	605c      	str	r4, [r3, #4]
 80089e6:	e7c7      	b.n	8008978 <_free_r+0x24>
 80089e8:	bd38      	pop	{r3, r4, r5, pc}
 80089ea:	bf00      	nop
 80089ec:	200000f4 	.word	0x200000f4

080089f0 <_malloc_r>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	1ccd      	adds	r5, r1, #3
 80089f4:	f025 0503 	bic.w	r5, r5, #3
 80089f8:	3508      	adds	r5, #8
 80089fa:	2d0c      	cmp	r5, #12
 80089fc:	bf38      	it	cc
 80089fe:	250c      	movcc	r5, #12
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	4606      	mov	r6, r0
 8008a04:	db01      	blt.n	8008a0a <_malloc_r+0x1a>
 8008a06:	42a9      	cmp	r1, r5
 8008a08:	d903      	bls.n	8008a12 <_malloc_r+0x22>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	2000      	movs	r0, #0
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	f000 f8f1 	bl	8008bf8 <__malloc_lock>
 8008a16:	4a21      	ldr	r2, [pc, #132]	; (8008a9c <_malloc_r+0xac>)
 8008a18:	6814      	ldr	r4, [r2, #0]
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	b991      	cbnz	r1, 8008a44 <_malloc_r+0x54>
 8008a1e:	4c20      	ldr	r4, [pc, #128]	; (8008aa0 <_malloc_r+0xb0>)
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	b91b      	cbnz	r3, 8008a2c <_malloc_r+0x3c>
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 f83d 	bl	8008aa4 <_sbrk_r>
 8008a2a:	6020      	str	r0, [r4, #0]
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f000 f838 	bl	8008aa4 <_sbrk_r>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d124      	bne.n	8008a82 <_malloc_r+0x92>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	6033      	str	r3, [r6, #0]
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f000 f8dc 	bl	8008bfa <__malloc_unlock>
 8008a42:	e7e4      	b.n	8008a0e <_malloc_r+0x1e>
 8008a44:	680b      	ldr	r3, [r1, #0]
 8008a46:	1b5b      	subs	r3, r3, r5
 8008a48:	d418      	bmi.n	8008a7c <_malloc_r+0x8c>
 8008a4a:	2b0b      	cmp	r3, #11
 8008a4c:	d90f      	bls.n	8008a6e <_malloc_r+0x7e>
 8008a4e:	600b      	str	r3, [r1, #0]
 8008a50:	50cd      	str	r5, [r1, r3]
 8008a52:	18cc      	adds	r4, r1, r3
 8008a54:	4630      	mov	r0, r6
 8008a56:	f000 f8d0 	bl	8008bfa <__malloc_unlock>
 8008a5a:	f104 000b 	add.w	r0, r4, #11
 8008a5e:	1d23      	adds	r3, r4, #4
 8008a60:	f020 0007 	bic.w	r0, r0, #7
 8008a64:	1ac3      	subs	r3, r0, r3
 8008a66:	d0d3      	beq.n	8008a10 <_malloc_r+0x20>
 8008a68:	425a      	negs	r2, r3
 8008a6a:	50e2      	str	r2, [r4, r3]
 8008a6c:	e7d0      	b.n	8008a10 <_malloc_r+0x20>
 8008a6e:	428c      	cmp	r4, r1
 8008a70:	684b      	ldr	r3, [r1, #4]
 8008a72:	bf16      	itet	ne
 8008a74:	6063      	strne	r3, [r4, #4]
 8008a76:	6013      	streq	r3, [r2, #0]
 8008a78:	460c      	movne	r4, r1
 8008a7a:	e7eb      	b.n	8008a54 <_malloc_r+0x64>
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	6849      	ldr	r1, [r1, #4]
 8008a80:	e7cc      	b.n	8008a1c <_malloc_r+0x2c>
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d005      	beq.n	8008a98 <_malloc_r+0xa8>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f000 f808 	bl	8008aa4 <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d0cf      	beq.n	8008a38 <_malloc_r+0x48>
 8008a98:	6025      	str	r5, [r4, #0]
 8008a9a:	e7db      	b.n	8008a54 <_malloc_r+0x64>
 8008a9c:	200000f4 	.word	0x200000f4
 8008aa0:	200000f8 	.word	0x200000f8

08008aa4 <_sbrk_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4c06      	ldr	r4, [pc, #24]	; (8008ac0 <_sbrk_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4605      	mov	r5, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	f7fa f8f2 	bl	8002c98 <_sbrk>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_sbrk_r+0x1a>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_sbrk_r+0x1a>
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20000658 	.word	0x20000658

08008ac4 <__sread>:
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	f000 f896 	bl	8008bfc <_read_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	bfab      	itete	ge
 8008ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ad8:	181b      	addge	r3, r3, r0
 8008ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ade:	bfac      	ite	ge
 8008ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ae2:	81a3      	strhlt	r3, [r4, #12]
 8008ae4:	bd10      	pop	{r4, pc}

08008ae6 <__swrite>:
 8008ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	461f      	mov	r7, r3
 8008aec:	898b      	ldrh	r3, [r1, #12]
 8008aee:	05db      	lsls	r3, r3, #23
 8008af0:	4605      	mov	r5, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	4616      	mov	r6, r2
 8008af6:	d505      	bpl.n	8008b04 <__swrite+0x1e>
 8008af8:	2302      	movs	r3, #2
 8008afa:	2200      	movs	r2, #0
 8008afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b00:	f000 f868 	bl	8008bd4 <_lseek_r>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	4628      	mov	r0, r5
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	f000 b817 	b.w	8008b4c <_write_r>

08008b1e <__sseek>:
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	460c      	mov	r4, r1
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 f855 	bl	8008bd4 <_lseek_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	bf15      	itete	ne
 8008b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strheq	r3, [r4, #12]
 8008b3c:	bf18      	it	ne
 8008b3e:	81a3      	strhne	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__sclose>:
 8008b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b46:	f000 b813 	b.w	8008b70 <_close_r>
	...

08008b4c <_write_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4c07      	ldr	r4, [pc, #28]	; (8008b6c <_write_r+0x20>)
 8008b50:	4605      	mov	r5, r0
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	6022      	str	r2, [r4, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f7fa f84c 	bl	8002bf8 <_write>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_write_r+0x1e>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_write_r+0x1e>
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000658 	.word	0x20000658

08008b70 <_close_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4c06      	ldr	r4, [pc, #24]	; (8008b8c <_close_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4605      	mov	r5, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	f7fa f858 	bl	8002c30 <_close>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_close_r+0x1a>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_close_r+0x1a>
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000658 	.word	0x20000658

08008b90 <_fstat_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4c07      	ldr	r4, [pc, #28]	; (8008bb0 <_fstat_r+0x20>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4605      	mov	r5, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	f7fa f853 	bl	8002c48 <_fstat>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d102      	bne.n	8008bac <_fstat_r+0x1c>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	b103      	cbz	r3, 8008bac <_fstat_r+0x1c>
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000658 	.word	0x20000658

08008bb4 <_isatty_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4c06      	ldr	r4, [pc, #24]	; (8008bd0 <_isatty_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4605      	mov	r5, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	f7fa f852 	bl	8002c68 <_isatty>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_isatty_r+0x1a>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_isatty_r+0x1a>
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000658 	.word	0x20000658

08008bd4 <_lseek_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4c07      	ldr	r4, [pc, #28]	; (8008bf4 <_lseek_r+0x20>)
 8008bd8:	4605      	mov	r5, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7fa f84b 	bl	8002c7e <_lseek>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_lseek_r+0x1e>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_lseek_r+0x1e>
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000658 	.word	0x20000658

08008bf8 <__malloc_lock>:
 8008bf8:	4770      	bx	lr

08008bfa <__malloc_unlock>:
 8008bfa:	4770      	bx	lr

08008bfc <_read_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4c07      	ldr	r4, [pc, #28]	; (8008c1c <_read_r+0x20>)
 8008c00:	4605      	mov	r5, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	2200      	movs	r2, #0
 8008c08:	6022      	str	r2, [r4, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f7f9 ffd7 	bl	8002bbe <_read>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_read_r+0x1e>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_read_r+0x1e>
 8008c18:	602b      	str	r3, [r5, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000658 	.word	0x20000658

08008c20 <pow>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	ed2d 8b04 	vpush	{d8-d9}
 8008c28:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008efc <pow+0x2dc>
 8008c2c:	b08d      	sub	sp, #52	; 0x34
 8008c2e:	ec57 6b10 	vmov	r6, r7, d0
 8008c32:	ec55 4b11 	vmov	r4, r5, d1
 8008c36:	f000 f9bf 	bl	8008fb8 <__ieee754_pow>
 8008c3a:	f999 3000 	ldrsb.w	r3, [r9]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	eeb0 8a40 	vmov.f32	s16, s0
 8008c46:	eef0 8a60 	vmov.f32	s17, s1
 8008c4a:	46c8      	mov	r8, r9
 8008c4c:	d05f      	beq.n	8008d0e <pow+0xee>
 8008c4e:	4622      	mov	r2, r4
 8008c50:	462b      	mov	r3, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7f7 ff29 	bl	8000aac <__aeabi_dcmpun>
 8008c5a:	4683      	mov	fp, r0
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d156      	bne.n	8008d0e <pow+0xee>
 8008c60:	4632      	mov	r2, r6
 8008c62:	463b      	mov	r3, r7
 8008c64:	4630      	mov	r0, r6
 8008c66:	4639      	mov	r1, r7
 8008c68:	f7f7 ff20 	bl	8000aac <__aeabi_dcmpun>
 8008c6c:	9001      	str	r0, [sp, #4]
 8008c6e:	b1e8      	cbz	r0, 8008cac <pow+0x8c>
 8008c70:	2200      	movs	r2, #0
 8008c72:	2300      	movs	r3, #0
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fee6 	bl	8000a48 <__aeabi_dcmpeq>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d046      	beq.n	8008d0e <pow+0xee>
 8008c80:	2301      	movs	r3, #1
 8008c82:	9302      	str	r3, [sp, #8]
 8008c84:	4b96      	ldr	r3, [pc, #600]	; (8008ee0 <pow+0x2c0>)
 8008c86:	9303      	str	r3, [sp, #12]
 8008c88:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <pow+0x2c4>)
 8008c8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008c8e:	2200      	movs	r2, #0
 8008c90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c94:	9b00      	ldr	r3, [sp, #0]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008c9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ca0:	d033      	beq.n	8008d0a <pow+0xea>
 8008ca2:	a802      	add	r0, sp, #8
 8008ca4:	f000 ff57 	bl	8009b56 <matherr>
 8008ca8:	bb48      	cbnz	r0, 8008cfe <pow+0xde>
 8008caa:	e05d      	b.n	8008d68 <pow+0x148>
 8008cac:	f04f 0a00 	mov.w	sl, #0
 8008cb0:	f04f 0b00 	mov.w	fp, #0
 8008cb4:	4652      	mov	r2, sl
 8008cb6:	465b      	mov	r3, fp
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 fec4 	bl	8000a48 <__aeabi_dcmpeq>
 8008cc0:	ec4b ab19 	vmov	d9, sl, fp
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d054      	beq.n	8008d72 <pow+0x152>
 8008cc8:	4652      	mov	r2, sl
 8008cca:	465b      	mov	r3, fp
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7f7 feba 	bl	8000a48 <__aeabi_dcmpeq>
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	b318      	cbz	r0, 8008d20 <pow+0x100>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	9302      	str	r3, [sp, #8]
 8008cdc:	4b80      	ldr	r3, [pc, #512]	; (8008ee0 <pow+0x2c0>)
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	9b01      	ldr	r3, [sp, #4]
 8008ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008cea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008cee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0d5      	beq.n	8008ca2 <pow+0x82>
 8008cf6:	4b7b      	ldr	r3, [pc, #492]	; (8008ee4 <pow+0x2c4>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d00:	b11b      	cbz	r3, 8008d0a <pow+0xea>
 8008d02:	f7ff faf3 	bl	80082ec <__errno>
 8008d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8008d12:	eef0 0a68 	vmov.f32	s1, s17
 8008d16:	b00d      	add	sp, #52	; 0x34
 8008d18:	ecbd 8b04 	vpop	{d8-d9}
 8008d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d20:	ec45 4b10 	vmov	d0, r4, r5
 8008d24:	f000 ff0f 	bl	8009b46 <finite>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d0f0      	beq.n	8008d0e <pow+0xee>
 8008d2c:	4652      	mov	r2, sl
 8008d2e:	465b      	mov	r3, fp
 8008d30:	4620      	mov	r0, r4
 8008d32:	4629      	mov	r1, r5
 8008d34:	f7f7 fe92 	bl	8000a5c <__aeabi_dcmplt>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d0e8      	beq.n	8008d0e <pow+0xee>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	4b67      	ldr	r3, [pc, #412]	; (8008ee0 <pow+0x2c0>)
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	f999 3000 	ldrsb.w	r3, [r9]
 8008d48:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008d4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008d50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008d54:	b913      	cbnz	r3, 8008d5c <pow+0x13c>
 8008d56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008d5a:	e7a2      	b.n	8008ca2 <pow+0x82>
 8008d5c:	4962      	ldr	r1, [pc, #392]	; (8008ee8 <pow+0x2c8>)
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d19c      	bne.n	8008ca2 <pow+0x82>
 8008d68:	f7ff fac0 	bl	80082ec <__errno>
 8008d6c:	2321      	movs	r3, #33	; 0x21
 8008d6e:	6003      	str	r3, [r0, #0]
 8008d70:	e7c5      	b.n	8008cfe <pow+0xde>
 8008d72:	eeb0 0a48 	vmov.f32	s0, s16
 8008d76:	eef0 0a68 	vmov.f32	s1, s17
 8008d7a:	f000 fee4 	bl	8009b46 <finite>
 8008d7e:	9000      	str	r0, [sp, #0]
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f040 8081 	bne.w	8008e88 <pow+0x268>
 8008d86:	ec47 6b10 	vmov	d0, r6, r7
 8008d8a:	f000 fedc 	bl	8009b46 <finite>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d07a      	beq.n	8008e88 <pow+0x268>
 8008d92:	ec45 4b10 	vmov	d0, r4, r5
 8008d96:	f000 fed6 	bl	8009b46 <finite>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d074      	beq.n	8008e88 <pow+0x268>
 8008d9e:	ec53 2b18 	vmov	r2, r3, d8
 8008da2:	ee18 0a10 	vmov	r0, s16
 8008da6:	4619      	mov	r1, r3
 8008da8:	f7f7 fe80 	bl	8000aac <__aeabi_dcmpun>
 8008dac:	f999 9000 	ldrsb.w	r9, [r9]
 8008db0:	4b4b      	ldr	r3, [pc, #300]	; (8008ee0 <pow+0x2c0>)
 8008db2:	b1b0      	cbz	r0, 8008de2 <pow+0x1c2>
 8008db4:	2201      	movs	r2, #1
 8008db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dba:	9b00      	ldr	r3, [sp, #0]
 8008dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8008dbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008dc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008dc6:	f1b9 0f00 	cmp.w	r9, #0
 8008dca:	d0c4      	beq.n	8008d56 <pow+0x136>
 8008dcc:	4652      	mov	r2, sl
 8008dce:	465b      	mov	r3, fp
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	4659      	mov	r1, fp
 8008dd4:	f7f7 fcfa 	bl	80007cc <__aeabi_ddiv>
 8008dd8:	f1b9 0f02 	cmp.w	r9, #2
 8008ddc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008de0:	e7c1      	b.n	8008d66 <pow+0x146>
 8008de2:	2203      	movs	r2, #3
 8008de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008de8:	900a      	str	r0, [sp, #40]	; 0x28
 8008dea:	4629      	mov	r1, r5
 8008dec:	4620      	mov	r0, r4
 8008dee:	2200      	movs	r2, #0
 8008df0:	4b3e      	ldr	r3, [pc, #248]	; (8008eec <pow+0x2cc>)
 8008df2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008df6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008dfa:	f7f7 fbbd 	bl	8000578 <__aeabi_dmul>
 8008dfe:	4604      	mov	r4, r0
 8008e00:	460d      	mov	r5, r1
 8008e02:	f1b9 0f00 	cmp.w	r9, #0
 8008e06:	d124      	bne.n	8008e52 <pow+0x232>
 8008e08:	4b39      	ldr	r3, [pc, #228]	; (8008ef0 <pow+0x2d0>)
 8008e0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008e0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e12:	4630      	mov	r0, r6
 8008e14:	4652      	mov	r2, sl
 8008e16:	465b      	mov	r3, fp
 8008e18:	4639      	mov	r1, r7
 8008e1a:	f7f7 fe1f 	bl	8000a5c <__aeabi_dcmplt>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d056      	beq.n	8008ed0 <pow+0x2b0>
 8008e22:	ec45 4b10 	vmov	d0, r4, r5
 8008e26:	f000 fea3 	bl	8009b70 <rint>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	ec51 0b10 	vmov	r0, r1, d0
 8008e32:	f7f7 fe09 	bl	8000a48 <__aeabi_dcmpeq>
 8008e36:	b920      	cbnz	r0, 8008e42 <pow+0x222>
 8008e38:	4b2e      	ldr	r3, [pc, #184]	; (8008ef4 <pow+0x2d4>)
 8008e3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008e3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e42:	f998 3000 	ldrsb.w	r3, [r8]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d142      	bne.n	8008ed0 <pow+0x2b0>
 8008e4a:	f7ff fa4f 	bl	80082ec <__errno>
 8008e4e:	2322      	movs	r3, #34	; 0x22
 8008e50:	e78d      	b.n	8008d6e <pow+0x14e>
 8008e52:	4b29      	ldr	r3, [pc, #164]	; (8008ef8 <pow+0x2d8>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	4652      	mov	r2, sl
 8008e5e:	465b      	mov	r3, fp
 8008e60:	4639      	mov	r1, r7
 8008e62:	f7f7 fdfb 	bl	8000a5c <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d0eb      	beq.n	8008e42 <pow+0x222>
 8008e6a:	ec45 4b10 	vmov	d0, r4, r5
 8008e6e:	f000 fe7f 	bl	8009b70 <rint>
 8008e72:	4622      	mov	r2, r4
 8008e74:	462b      	mov	r3, r5
 8008e76:	ec51 0b10 	vmov	r0, r1, d0
 8008e7a:	f7f7 fde5 	bl	8000a48 <__aeabi_dcmpeq>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d1df      	bne.n	8008e42 <pow+0x222>
 8008e82:	2200      	movs	r2, #0
 8008e84:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <pow+0x2c8>)
 8008e86:	e7da      	b.n	8008e3e <pow+0x21e>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	ec51 0b18 	vmov	r0, r1, d8
 8008e90:	f7f7 fdda 	bl	8000a48 <__aeabi_dcmpeq>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	f43f af3a 	beq.w	8008d0e <pow+0xee>
 8008e9a:	ec47 6b10 	vmov	d0, r6, r7
 8008e9e:	f000 fe52 	bl	8009b46 <finite>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f43f af33 	beq.w	8008d0e <pow+0xee>
 8008ea8:	ec45 4b10 	vmov	d0, r4, r5
 8008eac:	f000 fe4b 	bl	8009b46 <finite>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f43f af2c 	beq.w	8008d0e <pow+0xee>
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	9302      	str	r3, [sp, #8]
 8008eba:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <pow+0x2c0>)
 8008ebc:	9303      	str	r3, [sp, #12]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ec6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008eca:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008ece:	e7b8      	b.n	8008e42 <pow+0x222>
 8008ed0:	a802      	add	r0, sp, #8
 8008ed2:	f000 fe40 	bl	8009b56 <matherr>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f47f af11 	bne.w	8008cfe <pow+0xde>
 8008edc:	e7b5      	b.n	8008e4a <pow+0x22a>
 8008ede:	bf00      	nop
 8008ee0:	08009e94 	.word	0x08009e94
 8008ee4:	3ff00000 	.word	0x3ff00000
 8008ee8:	fff00000 	.word	0xfff00000
 8008eec:	3fe00000 	.word	0x3fe00000
 8008ef0:	47efffff 	.word	0x47efffff
 8008ef4:	c7efffff 	.word	0xc7efffff
 8008ef8:	7ff00000 	.word	0x7ff00000
 8008efc:	200000a4 	.word	0x200000a4

08008f00 <sqrt>:
 8008f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f04:	ed2d 8b02 	vpush	{d8}
 8008f08:	b08b      	sub	sp, #44	; 0x2c
 8008f0a:	ec55 4b10 	vmov	r4, r5, d0
 8008f0e:	f000 fd61 	bl	80099d4 <__ieee754_sqrt>
 8008f12:	4b26      	ldr	r3, [pc, #152]	; (8008fac <sqrt+0xac>)
 8008f14:	eeb0 8a40 	vmov.f32	s16, s0
 8008f18:	eef0 8a60 	vmov.f32	s17, s1
 8008f1c:	f993 6000 	ldrsb.w	r6, [r3]
 8008f20:	1c73      	adds	r3, r6, #1
 8008f22:	d02a      	beq.n	8008f7a <sqrt+0x7a>
 8008f24:	4622      	mov	r2, r4
 8008f26:	462b      	mov	r3, r5
 8008f28:	4620      	mov	r0, r4
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 fdbe 	bl	8000aac <__aeabi_dcmpun>
 8008f30:	4607      	mov	r7, r0
 8008f32:	bb10      	cbnz	r0, 8008f7a <sqrt+0x7a>
 8008f34:	f04f 0800 	mov.w	r8, #0
 8008f38:	f04f 0900 	mov.w	r9, #0
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	464b      	mov	r3, r9
 8008f40:	4620      	mov	r0, r4
 8008f42:	4629      	mov	r1, r5
 8008f44:	f7f7 fd8a 	bl	8000a5c <__aeabi_dcmplt>
 8008f48:	b1b8      	cbz	r0, 8008f7a <sqrt+0x7a>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <sqrt+0xb0>)
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	9708      	str	r7, [sp, #32]
 8008f54:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008f58:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f5c:	b9b6      	cbnz	r6, 8008f8c <sqrt+0x8c>
 8008f5e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008f62:	4668      	mov	r0, sp
 8008f64:	f000 fdf7 	bl	8009b56 <matherr>
 8008f68:	b1d0      	cbz	r0, 8008fa0 <sqrt+0xa0>
 8008f6a:	9b08      	ldr	r3, [sp, #32]
 8008f6c:	b11b      	cbz	r3, 8008f76 <sqrt+0x76>
 8008f6e:	f7ff f9bd 	bl	80082ec <__errno>
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	6003      	str	r3, [r0, #0]
 8008f76:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8008f7e:	eef0 0a68 	vmov.f32	s1, s17
 8008f82:	b00b      	add	sp, #44	; 0x2c
 8008f84:	ecbd 8b02 	vpop	{d8}
 8008f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f8c:	4642      	mov	r2, r8
 8008f8e:	464b      	mov	r3, r9
 8008f90:	4640      	mov	r0, r8
 8008f92:	4649      	mov	r1, r9
 8008f94:	f7f7 fc1a 	bl	80007cc <__aeabi_ddiv>
 8008f98:	2e02      	cmp	r6, #2
 8008f9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f9e:	d1e0      	bne.n	8008f62 <sqrt+0x62>
 8008fa0:	f7ff f9a4 	bl	80082ec <__errno>
 8008fa4:	2321      	movs	r3, #33	; 0x21
 8008fa6:	6003      	str	r3, [r0, #0]
 8008fa8:	e7df      	b.n	8008f6a <sqrt+0x6a>
 8008faa:	bf00      	nop
 8008fac:	200000a4 	.word	0x200000a4
 8008fb0:	08009e98 	.word	0x08009e98
 8008fb4:	00000000 	.word	0x00000000

08008fb8 <__ieee754_pow>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	b091      	sub	sp, #68	; 0x44
 8008fbe:	ed8d 1b00 	vstr	d1, [sp]
 8008fc2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008fc6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008fca:	ea58 0302 	orrs.w	r3, r8, r2
 8008fce:	ec57 6b10 	vmov	r6, r7, d0
 8008fd2:	f000 84be 	beq.w	8009952 <__ieee754_pow+0x99a>
 8008fd6:	4b7a      	ldr	r3, [pc, #488]	; (80091c0 <__ieee754_pow+0x208>)
 8008fd8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	463d      	mov	r5, r7
 8008fe0:	ee10 aa10 	vmov	sl, s0
 8008fe4:	dc09      	bgt.n	8008ffa <__ieee754_pow+0x42>
 8008fe6:	d103      	bne.n	8008ff0 <__ieee754_pow+0x38>
 8008fe8:	b93e      	cbnz	r6, 8008ffa <__ieee754_pow+0x42>
 8008fea:	45a0      	cmp	r8, r4
 8008fec:	dc0d      	bgt.n	800900a <__ieee754_pow+0x52>
 8008fee:	e001      	b.n	8008ff4 <__ieee754_pow+0x3c>
 8008ff0:	4598      	cmp	r8, r3
 8008ff2:	dc02      	bgt.n	8008ffa <__ieee754_pow+0x42>
 8008ff4:	4598      	cmp	r8, r3
 8008ff6:	d10e      	bne.n	8009016 <__ieee754_pow+0x5e>
 8008ff8:	b16a      	cbz	r2, 8009016 <__ieee754_pow+0x5e>
 8008ffa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ffe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009002:	ea54 030a 	orrs.w	r3, r4, sl
 8009006:	f000 84a4 	beq.w	8009952 <__ieee754_pow+0x99a>
 800900a:	486e      	ldr	r0, [pc, #440]	; (80091c4 <__ieee754_pow+0x20c>)
 800900c:	b011      	add	sp, #68	; 0x44
 800900e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009012:	f000 bda5 	b.w	8009b60 <nan>
 8009016:	2d00      	cmp	r5, #0
 8009018:	da53      	bge.n	80090c2 <__ieee754_pow+0x10a>
 800901a:	4b6b      	ldr	r3, [pc, #428]	; (80091c8 <__ieee754_pow+0x210>)
 800901c:	4598      	cmp	r8, r3
 800901e:	dc4d      	bgt.n	80090bc <__ieee754_pow+0x104>
 8009020:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009024:	4598      	cmp	r8, r3
 8009026:	dd4c      	ble.n	80090c2 <__ieee754_pow+0x10a>
 8009028:	ea4f 5328 	mov.w	r3, r8, asr #20
 800902c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009030:	2b14      	cmp	r3, #20
 8009032:	dd26      	ble.n	8009082 <__ieee754_pow+0xca>
 8009034:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009038:	fa22 f103 	lsr.w	r1, r2, r3
 800903c:	fa01 f303 	lsl.w	r3, r1, r3
 8009040:	4293      	cmp	r3, r2
 8009042:	d13e      	bne.n	80090c2 <__ieee754_pow+0x10a>
 8009044:	f001 0101 	and.w	r1, r1, #1
 8009048:	f1c1 0b02 	rsb	fp, r1, #2
 800904c:	2a00      	cmp	r2, #0
 800904e:	d15b      	bne.n	8009108 <__ieee754_pow+0x150>
 8009050:	4b5b      	ldr	r3, [pc, #364]	; (80091c0 <__ieee754_pow+0x208>)
 8009052:	4598      	cmp	r8, r3
 8009054:	d124      	bne.n	80090a0 <__ieee754_pow+0xe8>
 8009056:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800905a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800905e:	ea53 030a 	orrs.w	r3, r3, sl
 8009062:	f000 8476 	beq.w	8009952 <__ieee754_pow+0x99a>
 8009066:	4b59      	ldr	r3, [pc, #356]	; (80091cc <__ieee754_pow+0x214>)
 8009068:	429c      	cmp	r4, r3
 800906a:	dd2d      	ble.n	80090c8 <__ieee754_pow+0x110>
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	f280 8473 	bge.w	800995a <__ieee754_pow+0x9a2>
 8009074:	2000      	movs	r0, #0
 8009076:	2100      	movs	r1, #0
 8009078:	ec41 0b10 	vmov	d0, r0, r1
 800907c:	b011      	add	sp, #68	; 0x44
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	2a00      	cmp	r2, #0
 8009084:	d13e      	bne.n	8009104 <__ieee754_pow+0x14c>
 8009086:	f1c3 0314 	rsb	r3, r3, #20
 800908a:	fa48 f103 	asr.w	r1, r8, r3
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	4543      	cmp	r3, r8
 8009094:	f040 8469 	bne.w	800996a <__ieee754_pow+0x9b2>
 8009098:	f001 0101 	and.w	r1, r1, #1
 800909c:	f1c1 0b02 	rsb	fp, r1, #2
 80090a0:	4b4b      	ldr	r3, [pc, #300]	; (80091d0 <__ieee754_pow+0x218>)
 80090a2:	4598      	cmp	r8, r3
 80090a4:	d118      	bne.n	80090d8 <__ieee754_pow+0x120>
 80090a6:	f1b9 0f00 	cmp.w	r9, #0
 80090aa:	f280 845a 	bge.w	8009962 <__ieee754_pow+0x9aa>
 80090ae:	4948      	ldr	r1, [pc, #288]	; (80091d0 <__ieee754_pow+0x218>)
 80090b0:	4632      	mov	r2, r6
 80090b2:	463b      	mov	r3, r7
 80090b4:	2000      	movs	r0, #0
 80090b6:	f7f7 fb89 	bl	80007cc <__aeabi_ddiv>
 80090ba:	e7dd      	b.n	8009078 <__ieee754_pow+0xc0>
 80090bc:	f04f 0b02 	mov.w	fp, #2
 80090c0:	e7c4      	b.n	800904c <__ieee754_pow+0x94>
 80090c2:	f04f 0b00 	mov.w	fp, #0
 80090c6:	e7c1      	b.n	800904c <__ieee754_pow+0x94>
 80090c8:	f1b9 0f00 	cmp.w	r9, #0
 80090cc:	dad2      	bge.n	8009074 <__ieee754_pow+0xbc>
 80090ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80090d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80090d6:	e7cf      	b.n	8009078 <__ieee754_pow+0xc0>
 80090d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80090dc:	d106      	bne.n	80090ec <__ieee754_pow+0x134>
 80090de:	4632      	mov	r2, r6
 80090e0:	463b      	mov	r3, r7
 80090e2:	4610      	mov	r0, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	f7f7 fa47 	bl	8000578 <__aeabi_dmul>
 80090ea:	e7c5      	b.n	8009078 <__ieee754_pow+0xc0>
 80090ec:	4b39      	ldr	r3, [pc, #228]	; (80091d4 <__ieee754_pow+0x21c>)
 80090ee:	4599      	cmp	r9, r3
 80090f0:	d10a      	bne.n	8009108 <__ieee754_pow+0x150>
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	db08      	blt.n	8009108 <__ieee754_pow+0x150>
 80090f6:	ec47 6b10 	vmov	d0, r6, r7
 80090fa:	b011      	add	sp, #68	; 0x44
 80090fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	f000 bc68 	b.w	80099d4 <__ieee754_sqrt>
 8009104:	f04f 0b00 	mov.w	fp, #0
 8009108:	ec47 6b10 	vmov	d0, r6, r7
 800910c:	f000 fd12 	bl	8009b34 <fabs>
 8009110:	ec51 0b10 	vmov	r0, r1, d0
 8009114:	f1ba 0f00 	cmp.w	sl, #0
 8009118:	d127      	bne.n	800916a <__ieee754_pow+0x1b2>
 800911a:	b124      	cbz	r4, 8009126 <__ieee754_pow+0x16e>
 800911c:	4b2c      	ldr	r3, [pc, #176]	; (80091d0 <__ieee754_pow+0x218>)
 800911e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009122:	429a      	cmp	r2, r3
 8009124:	d121      	bne.n	800916a <__ieee754_pow+0x1b2>
 8009126:	f1b9 0f00 	cmp.w	r9, #0
 800912a:	da05      	bge.n	8009138 <__ieee754_pow+0x180>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	2000      	movs	r0, #0
 8009132:	4927      	ldr	r1, [pc, #156]	; (80091d0 <__ieee754_pow+0x218>)
 8009134:	f7f7 fb4a 	bl	80007cc <__aeabi_ddiv>
 8009138:	2d00      	cmp	r5, #0
 800913a:	da9d      	bge.n	8009078 <__ieee754_pow+0xc0>
 800913c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009140:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009144:	ea54 030b 	orrs.w	r3, r4, fp
 8009148:	d108      	bne.n	800915c <__ieee754_pow+0x1a4>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4610      	mov	r0, r2
 8009150:	4619      	mov	r1, r3
 8009152:	f7f7 f859 	bl	8000208 <__aeabi_dsub>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	e7ac      	b.n	80090b6 <__ieee754_pow+0xfe>
 800915c:	f1bb 0f01 	cmp.w	fp, #1
 8009160:	d18a      	bne.n	8009078 <__ieee754_pow+0xc0>
 8009162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009166:	4619      	mov	r1, r3
 8009168:	e786      	b.n	8009078 <__ieee754_pow+0xc0>
 800916a:	0fed      	lsrs	r5, r5, #31
 800916c:	1e6b      	subs	r3, r5, #1
 800916e:	930d      	str	r3, [sp, #52]	; 0x34
 8009170:	ea5b 0303 	orrs.w	r3, fp, r3
 8009174:	d102      	bne.n	800917c <__ieee754_pow+0x1c4>
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	e7e8      	b.n	800914e <__ieee754_pow+0x196>
 800917c:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <__ieee754_pow+0x220>)
 800917e:	4598      	cmp	r8, r3
 8009180:	f340 80fe 	ble.w	8009380 <__ieee754_pow+0x3c8>
 8009184:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009188:	4598      	cmp	r8, r3
 800918a:	dd0a      	ble.n	80091a2 <__ieee754_pow+0x1ea>
 800918c:	4b0f      	ldr	r3, [pc, #60]	; (80091cc <__ieee754_pow+0x214>)
 800918e:	429c      	cmp	r4, r3
 8009190:	dc0d      	bgt.n	80091ae <__ieee754_pow+0x1f6>
 8009192:	f1b9 0f00 	cmp.w	r9, #0
 8009196:	f6bf af6d 	bge.w	8009074 <__ieee754_pow+0xbc>
 800919a:	a307      	add	r3, pc, #28	; (adr r3, 80091b8 <__ieee754_pow+0x200>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	e79f      	b.n	80090e2 <__ieee754_pow+0x12a>
 80091a2:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <__ieee754_pow+0x224>)
 80091a4:	429c      	cmp	r4, r3
 80091a6:	ddf4      	ble.n	8009192 <__ieee754_pow+0x1da>
 80091a8:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <__ieee754_pow+0x218>)
 80091aa:	429c      	cmp	r4, r3
 80091ac:	dd18      	ble.n	80091e0 <__ieee754_pow+0x228>
 80091ae:	f1b9 0f00 	cmp.w	r9, #0
 80091b2:	dcf2      	bgt.n	800919a <__ieee754_pow+0x1e2>
 80091b4:	e75e      	b.n	8009074 <__ieee754_pow+0xbc>
 80091b6:	bf00      	nop
 80091b8:	8800759c 	.word	0x8800759c
 80091bc:	7e37e43c 	.word	0x7e37e43c
 80091c0:	7ff00000 	.word	0x7ff00000
 80091c4:	08009e9c 	.word	0x08009e9c
 80091c8:	433fffff 	.word	0x433fffff
 80091cc:	3fefffff 	.word	0x3fefffff
 80091d0:	3ff00000 	.word	0x3ff00000
 80091d4:	3fe00000 	.word	0x3fe00000
 80091d8:	41e00000 	.word	0x41e00000
 80091dc:	3feffffe 	.word	0x3feffffe
 80091e0:	2200      	movs	r2, #0
 80091e2:	4b63      	ldr	r3, [pc, #396]	; (8009370 <__ieee754_pow+0x3b8>)
 80091e4:	f7f7 f810 	bl	8000208 <__aeabi_dsub>
 80091e8:	a355      	add	r3, pc, #340	; (adr r3, 8009340 <__ieee754_pow+0x388>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	f7f7 f9c1 	bl	8000578 <__aeabi_dmul>
 80091f6:	a354      	add	r3, pc, #336	; (adr r3, 8009348 <__ieee754_pow+0x390>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	4620      	mov	r0, r4
 8009202:	4629      	mov	r1, r5
 8009204:	f7f7 f9b8 	bl	8000578 <__aeabi_dmul>
 8009208:	2200      	movs	r2, #0
 800920a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800920e:	4b59      	ldr	r3, [pc, #356]	; (8009374 <__ieee754_pow+0x3bc>)
 8009210:	4620      	mov	r0, r4
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 f9b0 	bl	8000578 <__aeabi_dmul>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	a14c      	add	r1, pc, #304	; (adr r1, 8009350 <__ieee754_pow+0x398>)
 800921e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009222:	f7f6 fff1 	bl	8000208 <__aeabi_dsub>
 8009226:	4622      	mov	r2, r4
 8009228:	462b      	mov	r3, r5
 800922a:	f7f7 f9a5 	bl	8000578 <__aeabi_dmul>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	2000      	movs	r0, #0
 8009234:	4950      	ldr	r1, [pc, #320]	; (8009378 <__ieee754_pow+0x3c0>)
 8009236:	f7f6 ffe7 	bl	8000208 <__aeabi_dsub>
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	4680      	mov	r8, r0
 8009240:	4689      	mov	r9, r1
 8009242:	4620      	mov	r0, r4
 8009244:	4629      	mov	r1, r5
 8009246:	f7f7 f997 	bl	8000578 <__aeabi_dmul>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4640      	mov	r0, r8
 8009250:	4649      	mov	r1, r9
 8009252:	f7f7 f991 	bl	8000578 <__aeabi_dmul>
 8009256:	a340      	add	r3, pc, #256	; (adr r3, 8009358 <__ieee754_pow+0x3a0>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f7 f98c 	bl	8000578 <__aeabi_dmul>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009268:	f7f6 ffce 	bl	8000208 <__aeabi_dsub>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4604      	mov	r4, r0
 8009272:	460d      	mov	r5, r1
 8009274:	4630      	mov	r0, r6
 8009276:	4639      	mov	r1, r7
 8009278:	f7f6 ffc8 	bl	800020c <__adddf3>
 800927c:	2000      	movs	r0, #0
 800927e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009282:	4632      	mov	r2, r6
 8009284:	463b      	mov	r3, r7
 8009286:	f7f6 ffbf 	bl	8000208 <__aeabi_dsub>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f6 ffb9 	bl	8000208 <__aeabi_dsub>
 8009296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009298:	f10b 33ff 	add.w	r3, fp, #4294967295
 800929c:	4313      	orrs	r3, r2
 800929e:	4606      	mov	r6, r0
 80092a0:	460f      	mov	r7, r1
 80092a2:	f040 81eb 	bne.w	800967c <__ieee754_pow+0x6c4>
 80092a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009360 <__ieee754_pow+0x3a8>
 80092aa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80092ae:	2400      	movs	r4, #0
 80092b0:	4622      	mov	r2, r4
 80092b2:	462b      	mov	r3, r5
 80092b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092bc:	f7f6 ffa4 	bl	8000208 <__aeabi_dsub>
 80092c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c4:	f7f7 f958 	bl	8000578 <__aeabi_dmul>
 80092c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092cc:	4680      	mov	r8, r0
 80092ce:	4689      	mov	r9, r1
 80092d0:	4630      	mov	r0, r6
 80092d2:	4639      	mov	r1, r7
 80092d4:	f7f7 f950 	bl	8000578 <__aeabi_dmul>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4640      	mov	r0, r8
 80092de:	4649      	mov	r1, r9
 80092e0:	f7f6 ff94 	bl	800020c <__adddf3>
 80092e4:	4622      	mov	r2, r4
 80092e6:	462b      	mov	r3, r5
 80092e8:	4680      	mov	r8, r0
 80092ea:	4689      	mov	r9, r1
 80092ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f0:	f7f7 f942 	bl	8000578 <__aeabi_dmul>
 80092f4:	460b      	mov	r3, r1
 80092f6:	4604      	mov	r4, r0
 80092f8:	460d      	mov	r5, r1
 80092fa:	4602      	mov	r2, r0
 80092fc:	4649      	mov	r1, r9
 80092fe:	4640      	mov	r0, r8
 8009300:	e9cd 4500 	strd	r4, r5, [sp]
 8009304:	f7f6 ff82 	bl	800020c <__adddf3>
 8009308:	4b1c      	ldr	r3, [pc, #112]	; (800937c <__ieee754_pow+0x3c4>)
 800930a:	4299      	cmp	r1, r3
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	468b      	mov	fp, r1
 8009312:	f340 82f7 	ble.w	8009904 <__ieee754_pow+0x94c>
 8009316:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800931a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800931e:	4303      	orrs	r3, r0
 8009320:	f000 81ea 	beq.w	80096f8 <__ieee754_pow+0x740>
 8009324:	a310      	add	r3, pc, #64	; (adr r3, 8009368 <__ieee754_pow+0x3b0>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800932e:	f7f7 f923 	bl	8000578 <__aeabi_dmul>
 8009332:	a30d      	add	r3, pc, #52	; (adr r3, 8009368 <__ieee754_pow+0x3b0>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	e6d5      	b.n	80090e6 <__ieee754_pow+0x12e>
 800933a:	bf00      	nop
 800933c:	f3af 8000 	nop.w
 8009340:	60000000 	.word	0x60000000
 8009344:	3ff71547 	.word	0x3ff71547
 8009348:	f85ddf44 	.word	0xf85ddf44
 800934c:	3e54ae0b 	.word	0x3e54ae0b
 8009350:	55555555 	.word	0x55555555
 8009354:	3fd55555 	.word	0x3fd55555
 8009358:	652b82fe 	.word	0x652b82fe
 800935c:	3ff71547 	.word	0x3ff71547
 8009360:	00000000 	.word	0x00000000
 8009364:	bff00000 	.word	0xbff00000
 8009368:	8800759c 	.word	0x8800759c
 800936c:	7e37e43c 	.word	0x7e37e43c
 8009370:	3ff00000 	.word	0x3ff00000
 8009374:	3fd00000 	.word	0x3fd00000
 8009378:	3fe00000 	.word	0x3fe00000
 800937c:	408fffff 	.word	0x408fffff
 8009380:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	da05      	bge.n	8009396 <__ieee754_pow+0x3de>
 800938a:	4bd3      	ldr	r3, [pc, #844]	; (80096d8 <__ieee754_pow+0x720>)
 800938c:	f7f7 f8f4 	bl	8000578 <__aeabi_dmul>
 8009390:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009394:	460c      	mov	r4, r1
 8009396:	1523      	asrs	r3, r4, #20
 8009398:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800939c:	4413      	add	r3, r2
 800939e:	9309      	str	r3, [sp, #36]	; 0x24
 80093a0:	4bce      	ldr	r3, [pc, #824]	; (80096dc <__ieee754_pow+0x724>)
 80093a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80093a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80093aa:	429c      	cmp	r4, r3
 80093ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80093b0:	dd08      	ble.n	80093c4 <__ieee754_pow+0x40c>
 80093b2:	4bcb      	ldr	r3, [pc, #812]	; (80096e0 <__ieee754_pow+0x728>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	f340 815e 	ble.w	8009676 <__ieee754_pow+0x6be>
 80093ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093bc:	3301      	adds	r3, #1
 80093be:	9309      	str	r3, [sp, #36]	; 0x24
 80093c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80093c4:	f04f 0a00 	mov.w	sl, #0
 80093c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80093cc:	930c      	str	r3, [sp, #48]	; 0x30
 80093ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093d0:	4bc4      	ldr	r3, [pc, #784]	; (80096e4 <__ieee754_pow+0x72c>)
 80093d2:	4413      	add	r3, r2
 80093d4:	ed93 7b00 	vldr	d7, [r3]
 80093d8:	4629      	mov	r1, r5
 80093da:	ec53 2b17 	vmov	r2, r3, d7
 80093de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093e6:	f7f6 ff0f 	bl	8000208 <__aeabi_dsub>
 80093ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093ee:	4606      	mov	r6, r0
 80093f0:	460f      	mov	r7, r1
 80093f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093f6:	f7f6 ff09 	bl	800020c <__adddf3>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	2000      	movs	r0, #0
 8009400:	49b9      	ldr	r1, [pc, #740]	; (80096e8 <__ieee754_pow+0x730>)
 8009402:	f7f7 f9e3 	bl	80007cc <__aeabi_ddiv>
 8009406:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	f7f7 f8b1 	bl	8000578 <__aeabi_dmul>
 8009416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800941a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800941e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009422:	2300      	movs	r3, #0
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800942a:	106d      	asrs	r5, r5, #1
 800942c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009430:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009434:	2200      	movs	r2, #0
 8009436:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	4614      	mov	r4, r2
 8009440:	461d      	mov	r5, r3
 8009442:	f7f7 f899 	bl	8000578 <__aeabi_dmul>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4630      	mov	r0, r6
 800944c:	4639      	mov	r1, r7
 800944e:	f7f6 fedb 	bl	8000208 <__aeabi_dsub>
 8009452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f6 fed3 	bl	8000208 <__aeabi_dsub>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800946a:	f7f6 fecd 	bl	8000208 <__aeabi_dsub>
 800946e:	4642      	mov	r2, r8
 8009470:	464b      	mov	r3, r9
 8009472:	f7f7 f881 	bl	8000578 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4630      	mov	r0, r6
 800947c:	4639      	mov	r1, r7
 800947e:	f7f6 fec3 	bl	8000208 <__aeabi_dsub>
 8009482:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009486:	f7f7 f877 	bl	8000578 <__aeabi_dmul>
 800948a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800948e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009492:	4610      	mov	r0, r2
 8009494:	4619      	mov	r1, r3
 8009496:	f7f7 f86f 	bl	8000578 <__aeabi_dmul>
 800949a:	a37b      	add	r3, pc, #492	; (adr r3, 8009688 <__ieee754_pow+0x6d0>)
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	f7f7 f868 	bl	8000578 <__aeabi_dmul>
 80094a8:	a379      	add	r3, pc, #484	; (adr r3, 8009690 <__ieee754_pow+0x6d8>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f7f6 fead 	bl	800020c <__adddf3>
 80094b2:	4622      	mov	r2, r4
 80094b4:	462b      	mov	r3, r5
 80094b6:	f7f7 f85f 	bl	8000578 <__aeabi_dmul>
 80094ba:	a377      	add	r3, pc, #476	; (adr r3, 8009698 <__ieee754_pow+0x6e0>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f6 fea4 	bl	800020c <__adddf3>
 80094c4:	4622      	mov	r2, r4
 80094c6:	462b      	mov	r3, r5
 80094c8:	f7f7 f856 	bl	8000578 <__aeabi_dmul>
 80094cc:	a374      	add	r3, pc, #464	; (adr r3, 80096a0 <__ieee754_pow+0x6e8>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f6 fe9b 	bl	800020c <__adddf3>
 80094d6:	4622      	mov	r2, r4
 80094d8:	462b      	mov	r3, r5
 80094da:	f7f7 f84d 	bl	8000578 <__aeabi_dmul>
 80094de:	a372      	add	r3, pc, #456	; (adr r3, 80096a8 <__ieee754_pow+0x6f0>)
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	f7f6 fe92 	bl	800020c <__adddf3>
 80094e8:	4622      	mov	r2, r4
 80094ea:	462b      	mov	r3, r5
 80094ec:	f7f7 f844 	bl	8000578 <__aeabi_dmul>
 80094f0:	a36f      	add	r3, pc, #444	; (adr r3, 80096b0 <__ieee754_pow+0x6f8>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f7f6 fe89 	bl	800020c <__adddf3>
 80094fa:	4622      	mov	r2, r4
 80094fc:	4606      	mov	r6, r0
 80094fe:	460f      	mov	r7, r1
 8009500:	462b      	mov	r3, r5
 8009502:	4620      	mov	r0, r4
 8009504:	4629      	mov	r1, r5
 8009506:	f7f7 f837 	bl	8000578 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4630      	mov	r0, r6
 8009510:	4639      	mov	r1, r7
 8009512:	f7f7 f831 	bl	8000578 <__aeabi_dmul>
 8009516:	4642      	mov	r2, r8
 8009518:	4604      	mov	r4, r0
 800951a:	460d      	mov	r5, r1
 800951c:	464b      	mov	r3, r9
 800951e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009522:	f7f6 fe73 	bl	800020c <__adddf3>
 8009526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800952a:	f7f7 f825 	bl	8000578 <__aeabi_dmul>
 800952e:	4622      	mov	r2, r4
 8009530:	462b      	mov	r3, r5
 8009532:	f7f6 fe6b 	bl	800020c <__adddf3>
 8009536:	4642      	mov	r2, r8
 8009538:	4606      	mov	r6, r0
 800953a:	460f      	mov	r7, r1
 800953c:	464b      	mov	r3, r9
 800953e:	4640      	mov	r0, r8
 8009540:	4649      	mov	r1, r9
 8009542:	f7f7 f819 	bl	8000578 <__aeabi_dmul>
 8009546:	2200      	movs	r2, #0
 8009548:	4b68      	ldr	r3, [pc, #416]	; (80096ec <__ieee754_pow+0x734>)
 800954a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800954e:	f7f6 fe5d 	bl	800020c <__adddf3>
 8009552:	4632      	mov	r2, r6
 8009554:	463b      	mov	r3, r7
 8009556:	f7f6 fe59 	bl	800020c <__adddf3>
 800955a:	9802      	ldr	r0, [sp, #8]
 800955c:	460d      	mov	r5, r1
 800955e:	4604      	mov	r4, r0
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4640      	mov	r0, r8
 8009566:	4649      	mov	r1, r9
 8009568:	f7f7 f806 	bl	8000578 <__aeabi_dmul>
 800956c:	2200      	movs	r2, #0
 800956e:	4680      	mov	r8, r0
 8009570:	4689      	mov	r9, r1
 8009572:	4b5e      	ldr	r3, [pc, #376]	; (80096ec <__ieee754_pow+0x734>)
 8009574:	4620      	mov	r0, r4
 8009576:	4629      	mov	r1, r5
 8009578:	f7f6 fe46 	bl	8000208 <__aeabi_dsub>
 800957c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009580:	f7f6 fe42 	bl	8000208 <__aeabi_dsub>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	f7f6 fe3c 	bl	8000208 <__aeabi_dsub>
 8009590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009594:	f7f6 fff0 	bl	8000578 <__aeabi_dmul>
 8009598:	4622      	mov	r2, r4
 800959a:	4606      	mov	r6, r0
 800959c:	460f      	mov	r7, r1
 800959e:	462b      	mov	r3, r5
 80095a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095a4:	f7f6 ffe8 	bl	8000578 <__aeabi_dmul>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4630      	mov	r0, r6
 80095ae:	4639      	mov	r1, r7
 80095b0:	f7f6 fe2c 	bl	800020c <__adddf3>
 80095b4:	4606      	mov	r6, r0
 80095b6:	460f      	mov	r7, r1
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4640      	mov	r0, r8
 80095be:	4649      	mov	r1, r9
 80095c0:	f7f6 fe24 	bl	800020c <__adddf3>
 80095c4:	9802      	ldr	r0, [sp, #8]
 80095c6:	a33c      	add	r3, pc, #240	; (adr r3, 80096b8 <__ieee754_pow+0x700>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	4604      	mov	r4, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	f7f6 ffd2 	bl	8000578 <__aeabi_dmul>
 80095d4:	4642      	mov	r2, r8
 80095d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095da:	464b      	mov	r3, r9
 80095dc:	4620      	mov	r0, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 fe12 	bl	8000208 <__aeabi_dsub>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f6 fe0c 	bl	8000208 <__aeabi_dsub>
 80095f0:	a333      	add	r3, pc, #204	; (adr r3, 80096c0 <__ieee754_pow+0x708>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 ffbf 	bl	8000578 <__aeabi_dmul>
 80095fa:	a333      	add	r3, pc, #204	; (adr r3, 80096c8 <__ieee754_pow+0x710>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	4606      	mov	r6, r0
 8009602:	460f      	mov	r7, r1
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f7f6 ffb6 	bl	8000578 <__aeabi_dmul>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f6 fdfa 	bl	800020c <__adddf3>
 8009618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800961a:	4b35      	ldr	r3, [pc, #212]	; (80096f0 <__ieee754_pow+0x738>)
 800961c:	4413      	add	r3, r2
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	f7f6 fdf3 	bl	800020c <__adddf3>
 8009626:	4604      	mov	r4, r0
 8009628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800962a:	460d      	mov	r5, r1
 800962c:	f7f6 ff3a 	bl	80004a4 <__aeabi_i2d>
 8009630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009632:	4b30      	ldr	r3, [pc, #192]	; (80096f4 <__ieee754_pow+0x73c>)
 8009634:	4413      	add	r3, r2
 8009636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	4622      	mov	r2, r4
 8009640:	462b      	mov	r3, r5
 8009642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009646:	f7f6 fde1 	bl	800020c <__adddf3>
 800964a:	4642      	mov	r2, r8
 800964c:	464b      	mov	r3, r9
 800964e:	f7f6 fddd 	bl	800020c <__adddf3>
 8009652:	4632      	mov	r2, r6
 8009654:	463b      	mov	r3, r7
 8009656:	f7f6 fdd9 	bl	800020c <__adddf3>
 800965a:	9802      	ldr	r0, [sp, #8]
 800965c:	4632      	mov	r2, r6
 800965e:	463b      	mov	r3, r7
 8009660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009664:	f7f6 fdd0 	bl	8000208 <__aeabi_dsub>
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	f7f6 fdcc 	bl	8000208 <__aeabi_dsub>
 8009670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009674:	e607      	b.n	8009286 <__ieee754_pow+0x2ce>
 8009676:	f04f 0a01 	mov.w	sl, #1
 800967a:	e6a5      	b.n	80093c8 <__ieee754_pow+0x410>
 800967c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80096d0 <__ieee754_pow+0x718>
 8009680:	e613      	b.n	80092aa <__ieee754_pow+0x2f2>
 8009682:	bf00      	nop
 8009684:	f3af 8000 	nop.w
 8009688:	4a454eef 	.word	0x4a454eef
 800968c:	3fca7e28 	.word	0x3fca7e28
 8009690:	93c9db65 	.word	0x93c9db65
 8009694:	3fcd864a 	.word	0x3fcd864a
 8009698:	a91d4101 	.word	0xa91d4101
 800969c:	3fd17460 	.word	0x3fd17460
 80096a0:	518f264d 	.word	0x518f264d
 80096a4:	3fd55555 	.word	0x3fd55555
 80096a8:	db6fabff 	.word	0xdb6fabff
 80096ac:	3fdb6db6 	.word	0x3fdb6db6
 80096b0:	33333303 	.word	0x33333303
 80096b4:	3fe33333 	.word	0x3fe33333
 80096b8:	e0000000 	.word	0xe0000000
 80096bc:	3feec709 	.word	0x3feec709
 80096c0:	dc3a03fd 	.word	0xdc3a03fd
 80096c4:	3feec709 	.word	0x3feec709
 80096c8:	145b01f5 	.word	0x145b01f5
 80096cc:	be3e2fe0 	.word	0xbe3e2fe0
 80096d0:	00000000 	.word	0x00000000
 80096d4:	3ff00000 	.word	0x3ff00000
 80096d8:	43400000 	.word	0x43400000
 80096dc:	0003988e 	.word	0x0003988e
 80096e0:	000bb679 	.word	0x000bb679
 80096e4:	08009ea0 	.word	0x08009ea0
 80096e8:	3ff00000 	.word	0x3ff00000
 80096ec:	40080000 	.word	0x40080000
 80096f0:	08009ec0 	.word	0x08009ec0
 80096f4:	08009eb0 	.word	0x08009eb0
 80096f8:	a3b4      	add	r3, pc, #720	; (adr r3, 80099cc <__ieee754_pow+0xa14>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 fd83 	bl	800020c <__adddf3>
 8009706:	4622      	mov	r2, r4
 8009708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800970c:	462b      	mov	r3, r5
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 fd79 	bl	8000208 <__aeabi_dsub>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800971e:	f7f7 f9bb 	bl	8000a98 <__aeabi_dcmpgt>
 8009722:	2800      	cmp	r0, #0
 8009724:	f47f adfe 	bne.w	8009324 <__ieee754_pow+0x36c>
 8009728:	4aa3      	ldr	r2, [pc, #652]	; (80099b8 <__ieee754_pow+0xa00>)
 800972a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800972e:	4293      	cmp	r3, r2
 8009730:	f340 810a 	ble.w	8009948 <__ieee754_pow+0x990>
 8009734:	151b      	asrs	r3, r3, #20
 8009736:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800973a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800973e:	fa4a f303 	asr.w	r3, sl, r3
 8009742:	445b      	add	r3, fp
 8009744:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009748:	4e9c      	ldr	r6, [pc, #624]	; (80099bc <__ieee754_pow+0xa04>)
 800974a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800974e:	4116      	asrs	r6, r2
 8009750:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009754:	2000      	movs	r0, #0
 8009756:	ea23 0106 	bic.w	r1, r3, r6
 800975a:	f1c2 0214 	rsb	r2, r2, #20
 800975e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009762:	fa4a fa02 	asr.w	sl, sl, r2
 8009766:	f1bb 0f00 	cmp.w	fp, #0
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4620      	mov	r0, r4
 8009770:	4629      	mov	r1, r5
 8009772:	bfb8      	it	lt
 8009774:	f1ca 0a00 	rsblt	sl, sl, #0
 8009778:	f7f6 fd46 	bl	8000208 <__aeabi_dsub>
 800977c:	e9cd 0100 	strd	r0, r1, [sp]
 8009780:	4642      	mov	r2, r8
 8009782:	464b      	mov	r3, r9
 8009784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009788:	f7f6 fd40 	bl	800020c <__adddf3>
 800978c:	2000      	movs	r0, #0
 800978e:	a378      	add	r3, pc, #480	; (adr r3, 8009970 <__ieee754_pow+0x9b8>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	4604      	mov	r4, r0
 8009796:	460d      	mov	r5, r1
 8009798:	f7f6 feee 	bl	8000578 <__aeabi_dmul>
 800979c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097a0:	4606      	mov	r6, r0
 80097a2:	460f      	mov	r7, r1
 80097a4:	4620      	mov	r0, r4
 80097a6:	4629      	mov	r1, r5
 80097a8:	f7f6 fd2e 	bl	8000208 <__aeabi_dsub>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4640      	mov	r0, r8
 80097b2:	4649      	mov	r1, r9
 80097b4:	f7f6 fd28 	bl	8000208 <__aeabi_dsub>
 80097b8:	a36f      	add	r3, pc, #444	; (adr r3, 8009978 <__ieee754_pow+0x9c0>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fedb 	bl	8000578 <__aeabi_dmul>
 80097c2:	a36f      	add	r3, pc, #444	; (adr r3, 8009980 <__ieee754_pow+0x9c8>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	4680      	mov	r8, r0
 80097ca:	4689      	mov	r9, r1
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	f7f6 fed2 	bl	8000578 <__aeabi_dmul>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4640      	mov	r0, r8
 80097da:	4649      	mov	r1, r9
 80097dc:	f7f6 fd16 	bl	800020c <__adddf3>
 80097e0:	4604      	mov	r4, r0
 80097e2:	460d      	mov	r5, r1
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f6 fd0e 	bl	800020c <__adddf3>
 80097f0:	4632      	mov	r2, r6
 80097f2:	463b      	mov	r3, r7
 80097f4:	4680      	mov	r8, r0
 80097f6:	4689      	mov	r9, r1
 80097f8:	f7f6 fd06 	bl	8000208 <__aeabi_dsub>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4620      	mov	r0, r4
 8009802:	4629      	mov	r1, r5
 8009804:	f7f6 fd00 	bl	8000208 <__aeabi_dsub>
 8009808:	4642      	mov	r2, r8
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	464b      	mov	r3, r9
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f6 feb0 	bl	8000578 <__aeabi_dmul>
 8009818:	a35b      	add	r3, pc, #364	; (adr r3, 8009988 <__ieee754_pow+0x9d0>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	4604      	mov	r4, r0
 8009820:	460d      	mov	r5, r1
 8009822:	f7f6 fea9 	bl	8000578 <__aeabi_dmul>
 8009826:	a35a      	add	r3, pc, #360	; (adr r3, 8009990 <__ieee754_pow+0x9d8>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 fcec 	bl	8000208 <__aeabi_dsub>
 8009830:	4622      	mov	r2, r4
 8009832:	462b      	mov	r3, r5
 8009834:	f7f6 fea0 	bl	8000578 <__aeabi_dmul>
 8009838:	a357      	add	r3, pc, #348	; (adr r3, 8009998 <__ieee754_pow+0x9e0>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fce5 	bl	800020c <__adddf3>
 8009842:	4622      	mov	r2, r4
 8009844:	462b      	mov	r3, r5
 8009846:	f7f6 fe97 	bl	8000578 <__aeabi_dmul>
 800984a:	a355      	add	r3, pc, #340	; (adr r3, 80099a0 <__ieee754_pow+0x9e8>)
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f7f6 fcda 	bl	8000208 <__aeabi_dsub>
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	f7f6 fe8e 	bl	8000578 <__aeabi_dmul>
 800985c:	a352      	add	r3, pc, #328	; (adr r3, 80099a8 <__ieee754_pow+0x9f0>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fcd3 	bl	800020c <__adddf3>
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	f7f6 fe85 	bl	8000578 <__aeabi_dmul>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f6 fcc7 	bl	8000208 <__aeabi_dsub>
 800987a:	4604      	mov	r4, r0
 800987c:	460d      	mov	r5, r1
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4640      	mov	r0, r8
 8009884:	4649      	mov	r1, r9
 8009886:	f7f6 fe77 	bl	8000578 <__aeabi_dmul>
 800988a:	2200      	movs	r2, #0
 800988c:	e9cd 0100 	strd	r0, r1, [sp]
 8009890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009894:	4620      	mov	r0, r4
 8009896:	4629      	mov	r1, r5
 8009898:	f7f6 fcb6 	bl	8000208 <__aeabi_dsub>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a4:	f7f6 ff92 	bl	80007cc <__aeabi_ddiv>
 80098a8:	4632      	mov	r2, r6
 80098aa:	4604      	mov	r4, r0
 80098ac:	460d      	mov	r5, r1
 80098ae:	463b      	mov	r3, r7
 80098b0:	4640      	mov	r0, r8
 80098b2:	4649      	mov	r1, r9
 80098b4:	f7f6 fe60 	bl	8000578 <__aeabi_dmul>
 80098b8:	4632      	mov	r2, r6
 80098ba:	463b      	mov	r3, r7
 80098bc:	f7f6 fca6 	bl	800020c <__adddf3>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4620      	mov	r0, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	f7f6 fc9e 	bl	8000208 <__aeabi_dsub>
 80098cc:	4642      	mov	r2, r8
 80098ce:	464b      	mov	r3, r9
 80098d0:	f7f6 fc9a 	bl	8000208 <__aeabi_dsub>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	2000      	movs	r0, #0
 80098da:	4939      	ldr	r1, [pc, #228]	; (80099c0 <__ieee754_pow+0xa08>)
 80098dc:	f7f6 fc94 	bl	8000208 <__aeabi_dsub>
 80098e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80098e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	da2f      	bge.n	800994e <__ieee754_pow+0x996>
 80098ee:	4650      	mov	r0, sl
 80098f0:	ec43 2b10 	vmov	d0, r2, r3
 80098f4:	f000 f9c0 	bl	8009c78 <scalbn>
 80098f8:	ec51 0b10 	vmov	r0, r1, d0
 80098fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009900:	f7ff bbf1 	b.w	80090e6 <__ieee754_pow+0x12e>
 8009904:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <__ieee754_pow+0xa0c>)
 8009906:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800990a:	429e      	cmp	r6, r3
 800990c:	f77f af0c 	ble.w	8009728 <__ieee754_pow+0x770>
 8009910:	4b2d      	ldr	r3, [pc, #180]	; (80099c8 <__ieee754_pow+0xa10>)
 8009912:	440b      	add	r3, r1
 8009914:	4303      	orrs	r3, r0
 8009916:	d00b      	beq.n	8009930 <__ieee754_pow+0x978>
 8009918:	a325      	add	r3, pc, #148	; (adr r3, 80099b0 <__ieee754_pow+0x9f8>)
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009922:	f7f6 fe29 	bl	8000578 <__aeabi_dmul>
 8009926:	a322      	add	r3, pc, #136	; (adr r3, 80099b0 <__ieee754_pow+0x9f8>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7ff bbdb 	b.w	80090e6 <__ieee754_pow+0x12e>
 8009930:	4622      	mov	r2, r4
 8009932:	462b      	mov	r3, r5
 8009934:	f7f6 fc68 	bl	8000208 <__aeabi_dsub>
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	f7f7 f8a2 	bl	8000a84 <__aeabi_dcmpge>
 8009940:	2800      	cmp	r0, #0
 8009942:	f43f aef1 	beq.w	8009728 <__ieee754_pow+0x770>
 8009946:	e7e7      	b.n	8009918 <__ieee754_pow+0x960>
 8009948:	f04f 0a00 	mov.w	sl, #0
 800994c:	e718      	b.n	8009780 <__ieee754_pow+0x7c8>
 800994e:	4621      	mov	r1, r4
 8009950:	e7d4      	b.n	80098fc <__ieee754_pow+0x944>
 8009952:	2000      	movs	r0, #0
 8009954:	491a      	ldr	r1, [pc, #104]	; (80099c0 <__ieee754_pow+0xa08>)
 8009956:	f7ff bb8f 	b.w	8009078 <__ieee754_pow+0xc0>
 800995a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800995e:	f7ff bb8b 	b.w	8009078 <__ieee754_pow+0xc0>
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	f7ff bb87 	b.w	8009078 <__ieee754_pow+0xc0>
 800996a:	4693      	mov	fp, r2
 800996c:	f7ff bb98 	b.w	80090a0 <__ieee754_pow+0xe8>
 8009970:	00000000 	.word	0x00000000
 8009974:	3fe62e43 	.word	0x3fe62e43
 8009978:	fefa39ef 	.word	0xfefa39ef
 800997c:	3fe62e42 	.word	0x3fe62e42
 8009980:	0ca86c39 	.word	0x0ca86c39
 8009984:	be205c61 	.word	0xbe205c61
 8009988:	72bea4d0 	.word	0x72bea4d0
 800998c:	3e663769 	.word	0x3e663769
 8009990:	c5d26bf1 	.word	0xc5d26bf1
 8009994:	3ebbbd41 	.word	0x3ebbbd41
 8009998:	af25de2c 	.word	0xaf25de2c
 800999c:	3f11566a 	.word	0x3f11566a
 80099a0:	16bebd93 	.word	0x16bebd93
 80099a4:	3f66c16c 	.word	0x3f66c16c
 80099a8:	5555553e 	.word	0x5555553e
 80099ac:	3fc55555 	.word	0x3fc55555
 80099b0:	c2f8f359 	.word	0xc2f8f359
 80099b4:	01a56e1f 	.word	0x01a56e1f
 80099b8:	3fe00000 	.word	0x3fe00000
 80099bc:	000fffff 	.word	0x000fffff
 80099c0:	3ff00000 	.word	0x3ff00000
 80099c4:	4090cbff 	.word	0x4090cbff
 80099c8:	3f6f3400 	.word	0x3f6f3400
 80099cc:	652b82fe 	.word	0x652b82fe
 80099d0:	3c971547 	.word	0x3c971547

080099d4 <__ieee754_sqrt>:
 80099d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d8:	4955      	ldr	r1, [pc, #340]	; (8009b30 <__ieee754_sqrt+0x15c>)
 80099da:	ec55 4b10 	vmov	r4, r5, d0
 80099de:	43a9      	bics	r1, r5
 80099e0:	462b      	mov	r3, r5
 80099e2:	462a      	mov	r2, r5
 80099e4:	d112      	bne.n	8009a0c <__ieee754_sqrt+0x38>
 80099e6:	ee10 2a10 	vmov	r2, s0
 80099ea:	ee10 0a10 	vmov	r0, s0
 80099ee:	4629      	mov	r1, r5
 80099f0:	f7f6 fdc2 	bl	8000578 <__aeabi_dmul>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4620      	mov	r0, r4
 80099fa:	4629      	mov	r1, r5
 80099fc:	f7f6 fc06 	bl	800020c <__adddf3>
 8009a00:	4604      	mov	r4, r0
 8009a02:	460d      	mov	r5, r1
 8009a04:	ec45 4b10 	vmov	d0, r4, r5
 8009a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	ee10 0a10 	vmov	r0, s0
 8009a12:	4621      	mov	r1, r4
 8009a14:	dc0f      	bgt.n	8009a36 <__ieee754_sqrt+0x62>
 8009a16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a1a:	4330      	orrs	r0, r6
 8009a1c:	d0f2      	beq.n	8009a04 <__ieee754_sqrt+0x30>
 8009a1e:	b155      	cbz	r5, 8009a36 <__ieee754_sqrt+0x62>
 8009a20:	ee10 2a10 	vmov	r2, s0
 8009a24:	4620      	mov	r0, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fbee 	bl	8000208 <__aeabi_dsub>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	f7f6 fecc 	bl	80007cc <__aeabi_ddiv>
 8009a34:	e7e4      	b.n	8009a00 <__ieee754_sqrt+0x2c>
 8009a36:	151b      	asrs	r3, r3, #20
 8009a38:	d073      	beq.n	8009b22 <__ieee754_sqrt+0x14e>
 8009a3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a3e:	07dd      	lsls	r5, r3, #31
 8009a40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009a44:	bf48      	it	mi
 8009a46:	0fc8      	lsrmi	r0, r1, #31
 8009a48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009a4c:	bf44      	itt	mi
 8009a4e:	0049      	lslmi	r1, r1, #1
 8009a50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009a54:	2500      	movs	r5, #0
 8009a56:	1058      	asrs	r0, r3, #1
 8009a58:	0fcb      	lsrs	r3, r1, #31
 8009a5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009a5e:	0049      	lsls	r1, r1, #1
 8009a60:	2316      	movs	r3, #22
 8009a62:	462c      	mov	r4, r5
 8009a64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009a68:	19a7      	adds	r7, r4, r6
 8009a6a:	4297      	cmp	r7, r2
 8009a6c:	bfde      	ittt	le
 8009a6e:	19bc      	addle	r4, r7, r6
 8009a70:	1bd2      	suble	r2, r2, r7
 8009a72:	19ad      	addle	r5, r5, r6
 8009a74:	0fcf      	lsrs	r7, r1, #31
 8009a76:	3b01      	subs	r3, #1
 8009a78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009a7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a84:	d1f0      	bne.n	8009a68 <__ieee754_sqrt+0x94>
 8009a86:	f04f 0c20 	mov.w	ip, #32
 8009a8a:	469e      	mov	lr, r3
 8009a8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a90:	42a2      	cmp	r2, r4
 8009a92:	eb06 070e 	add.w	r7, r6, lr
 8009a96:	dc02      	bgt.n	8009a9e <__ieee754_sqrt+0xca>
 8009a98:	d112      	bne.n	8009ac0 <__ieee754_sqrt+0xec>
 8009a9a:	428f      	cmp	r7, r1
 8009a9c:	d810      	bhi.n	8009ac0 <__ieee754_sqrt+0xec>
 8009a9e:	2f00      	cmp	r7, #0
 8009aa0:	eb07 0e06 	add.w	lr, r7, r6
 8009aa4:	da42      	bge.n	8009b2c <__ieee754_sqrt+0x158>
 8009aa6:	f1be 0f00 	cmp.w	lr, #0
 8009aaa:	db3f      	blt.n	8009b2c <__ieee754_sqrt+0x158>
 8009aac:	f104 0801 	add.w	r8, r4, #1
 8009ab0:	1b12      	subs	r2, r2, r4
 8009ab2:	428f      	cmp	r7, r1
 8009ab4:	bf88      	it	hi
 8009ab6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009aba:	1bc9      	subs	r1, r1, r7
 8009abc:	4433      	add	r3, r6
 8009abe:	4644      	mov	r4, r8
 8009ac0:	0052      	lsls	r2, r2, #1
 8009ac2:	f1bc 0c01 	subs.w	ip, ip, #1
 8009ac6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009aca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ace:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ad2:	d1dd      	bne.n	8009a90 <__ieee754_sqrt+0xbc>
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	d006      	beq.n	8009ae6 <__ieee754_sqrt+0x112>
 8009ad8:	1c5c      	adds	r4, r3, #1
 8009ada:	bf13      	iteet	ne
 8009adc:	3301      	addne	r3, #1
 8009ade:	3501      	addeq	r5, #1
 8009ae0:	4663      	moveq	r3, ip
 8009ae2:	f023 0301 	bicne.w	r3, r3, #1
 8009ae6:	106a      	asrs	r2, r5, #1
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	07e9      	lsls	r1, r5, #31
 8009aec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009af0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009af4:	bf48      	it	mi
 8009af6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009afa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009afe:	461c      	mov	r4, r3
 8009b00:	e780      	b.n	8009a04 <__ieee754_sqrt+0x30>
 8009b02:	0aca      	lsrs	r2, r1, #11
 8009b04:	3815      	subs	r0, #21
 8009b06:	0549      	lsls	r1, r1, #21
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	d0fa      	beq.n	8009b02 <__ieee754_sqrt+0x12e>
 8009b0c:	02d6      	lsls	r6, r2, #11
 8009b0e:	d50a      	bpl.n	8009b26 <__ieee754_sqrt+0x152>
 8009b10:	f1c3 0420 	rsb	r4, r3, #32
 8009b14:	fa21 f404 	lsr.w	r4, r1, r4
 8009b18:	1e5d      	subs	r5, r3, #1
 8009b1a:	4099      	lsls	r1, r3
 8009b1c:	4322      	orrs	r2, r4
 8009b1e:	1b43      	subs	r3, r0, r5
 8009b20:	e78b      	b.n	8009a3a <__ieee754_sqrt+0x66>
 8009b22:	4618      	mov	r0, r3
 8009b24:	e7f0      	b.n	8009b08 <__ieee754_sqrt+0x134>
 8009b26:	0052      	lsls	r2, r2, #1
 8009b28:	3301      	adds	r3, #1
 8009b2a:	e7ef      	b.n	8009b0c <__ieee754_sqrt+0x138>
 8009b2c:	46a0      	mov	r8, r4
 8009b2e:	e7bf      	b.n	8009ab0 <__ieee754_sqrt+0xdc>
 8009b30:	7ff00000 	.word	0x7ff00000

08009b34 <fabs>:
 8009b34:	ec51 0b10 	vmov	r0, r1, d0
 8009b38:	ee10 2a10 	vmov	r2, s0
 8009b3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b40:	ec43 2b10 	vmov	d0, r2, r3
 8009b44:	4770      	bx	lr

08009b46 <finite>:
 8009b46:	ee10 3a90 	vmov	r3, s1
 8009b4a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009b4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009b52:	0fc0      	lsrs	r0, r0, #31
 8009b54:	4770      	bx	lr

08009b56 <matherr>:
 8009b56:	2000      	movs	r0, #0
 8009b58:	4770      	bx	lr
 8009b5a:	0000      	movs	r0, r0
 8009b5c:	0000      	movs	r0, r0
	...

08009b60 <nan>:
 8009b60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009b68 <nan+0x8>
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	00000000 	.word	0x00000000
 8009b6c:	7ff80000 	.word	0x7ff80000

08009b70 <rint>:
 8009b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b72:	ec51 0b10 	vmov	r0, r1, d0
 8009b76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009b7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009b7e:	2e13      	cmp	r6, #19
 8009b80:	460b      	mov	r3, r1
 8009b82:	ee10 4a10 	vmov	r4, s0
 8009b86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009b8a:	dc56      	bgt.n	8009c3a <rint+0xca>
 8009b8c:	2e00      	cmp	r6, #0
 8009b8e:	da2b      	bge.n	8009be8 <rint+0x78>
 8009b90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009b94:	4302      	orrs	r2, r0
 8009b96:	d023      	beq.n	8009be0 <rint+0x70>
 8009b98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009b9c:	4302      	orrs	r2, r0
 8009b9e:	4254      	negs	r4, r2
 8009ba0:	4314      	orrs	r4, r2
 8009ba2:	0c4b      	lsrs	r3, r1, #17
 8009ba4:	0b24      	lsrs	r4, r4, #12
 8009ba6:	045b      	lsls	r3, r3, #17
 8009ba8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009bac:	ea44 0103 	orr.w	r1, r4, r3
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	492f      	ldr	r1, [pc, #188]	; (8009c70 <rint+0x100>)
 8009bb4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009bb8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7f6 fb23 	bl	800020c <__adddf3>
 8009bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8009bca:	463b      	mov	r3, r7
 8009bcc:	4632      	mov	r2, r6
 8009bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bd2:	f7f6 fb19 	bl	8000208 <__aeabi_dsub>
 8009bd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009bde:	4639      	mov	r1, r7
 8009be0:	ec41 0b10 	vmov	d0, r0, r1
 8009be4:	b003      	add	sp, #12
 8009be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be8:	4a22      	ldr	r2, [pc, #136]	; (8009c74 <rint+0x104>)
 8009bea:	4132      	asrs	r2, r6
 8009bec:	ea01 0702 	and.w	r7, r1, r2
 8009bf0:	4307      	orrs	r7, r0
 8009bf2:	d0f5      	beq.n	8009be0 <rint+0x70>
 8009bf4:	0852      	lsrs	r2, r2, #1
 8009bf6:	4011      	ands	r1, r2
 8009bf8:	430c      	orrs	r4, r1
 8009bfa:	d00b      	beq.n	8009c14 <rint+0xa4>
 8009bfc:	ea23 0202 	bic.w	r2, r3, r2
 8009c00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c04:	2e13      	cmp	r6, #19
 8009c06:	fa43 f306 	asr.w	r3, r3, r6
 8009c0a:	bf0c      	ite	eq
 8009c0c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009c10:	2400      	movne	r4, #0
 8009c12:	4313      	orrs	r3, r2
 8009c14:	4916      	ldr	r1, [pc, #88]	; (8009c70 <rint+0x100>)
 8009c16:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c20:	4620      	mov	r0, r4
 8009c22:	4629      	mov	r1, r5
 8009c24:	f7f6 faf2 	bl	800020c <__adddf3>
 8009c28:	e9cd 0100 	strd	r0, r1, [sp]
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	462b      	mov	r3, r5
 8009c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c34:	f7f6 fae8 	bl	8000208 <__aeabi_dsub>
 8009c38:	e7d2      	b.n	8009be0 <rint+0x70>
 8009c3a:	2e33      	cmp	r6, #51	; 0x33
 8009c3c:	dd07      	ble.n	8009c4e <rint+0xde>
 8009c3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009c42:	d1cd      	bne.n	8009be0 <rint+0x70>
 8009c44:	ee10 2a10 	vmov	r2, s0
 8009c48:	f7f6 fae0 	bl	800020c <__adddf3>
 8009c4c:	e7c8      	b.n	8009be0 <rint+0x70>
 8009c4e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295
 8009c56:	40f2      	lsrs	r2, r6
 8009c58:	4210      	tst	r0, r2
 8009c5a:	d0c1      	beq.n	8009be0 <rint+0x70>
 8009c5c:	0852      	lsrs	r2, r2, #1
 8009c5e:	4210      	tst	r0, r2
 8009c60:	bf1f      	itttt	ne
 8009c62:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009c66:	ea20 0202 	bicne.w	r2, r0, r2
 8009c6a:	4134      	asrne	r4, r6
 8009c6c:	4314      	orrne	r4, r2
 8009c6e:	e7d1      	b.n	8009c14 <rint+0xa4>
 8009c70:	08009ed0 	.word	0x08009ed0
 8009c74:	000fffff 	.word	0x000fffff

08009c78 <scalbn>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	ec55 4b10 	vmov	r4, r5, d0
 8009c7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009c82:	4606      	mov	r6, r0
 8009c84:	462b      	mov	r3, r5
 8009c86:	b9aa      	cbnz	r2, 8009cb4 <scalbn+0x3c>
 8009c88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c8c:	4323      	orrs	r3, r4
 8009c8e:	d03b      	beq.n	8009d08 <scalbn+0x90>
 8009c90:	4b31      	ldr	r3, [pc, #196]	; (8009d58 <scalbn+0xe0>)
 8009c92:	4629      	mov	r1, r5
 8009c94:	2200      	movs	r2, #0
 8009c96:	ee10 0a10 	vmov	r0, s0
 8009c9a:	f7f6 fc6d 	bl	8000578 <__aeabi_dmul>
 8009c9e:	4b2f      	ldr	r3, [pc, #188]	; (8009d5c <scalbn+0xe4>)
 8009ca0:	429e      	cmp	r6, r3
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	da12      	bge.n	8009cce <scalbn+0x56>
 8009ca8:	a327      	add	r3, pc, #156	; (adr r3, 8009d48 <scalbn+0xd0>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 fc63 	bl	8000578 <__aeabi_dmul>
 8009cb2:	e009      	b.n	8009cc8 <scalbn+0x50>
 8009cb4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009cb8:	428a      	cmp	r2, r1
 8009cba:	d10c      	bne.n	8009cd6 <scalbn+0x5e>
 8009cbc:	ee10 2a10 	vmov	r2, s0
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f7f6 faa2 	bl	800020c <__adddf3>
 8009cc8:	4604      	mov	r4, r0
 8009cca:	460d      	mov	r5, r1
 8009ccc:	e01c      	b.n	8009d08 <scalbn+0x90>
 8009cce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	3a36      	subs	r2, #54	; 0x36
 8009cd6:	4432      	add	r2, r6
 8009cd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009cdc:	428a      	cmp	r2, r1
 8009cde:	dd0b      	ble.n	8009cf8 <scalbn+0x80>
 8009ce0:	ec45 4b11 	vmov	d1, r4, r5
 8009ce4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009d50 <scalbn+0xd8>
 8009ce8:	f000 f83c 	bl	8009d64 <copysign>
 8009cec:	a318      	add	r3, pc, #96	; (adr r3, 8009d50 <scalbn+0xd8>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	ec51 0b10 	vmov	r0, r1, d0
 8009cf6:	e7da      	b.n	8009cae <scalbn+0x36>
 8009cf8:	2a00      	cmp	r2, #0
 8009cfa:	dd08      	ble.n	8009d0e <scalbn+0x96>
 8009cfc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d08:	ec45 4b10 	vmov	d0, r4, r5
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
 8009d0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009d12:	da0d      	bge.n	8009d30 <scalbn+0xb8>
 8009d14:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009d18:	429e      	cmp	r6, r3
 8009d1a:	ec45 4b11 	vmov	d1, r4, r5
 8009d1e:	dce1      	bgt.n	8009ce4 <scalbn+0x6c>
 8009d20:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009d48 <scalbn+0xd0>
 8009d24:	f000 f81e 	bl	8009d64 <copysign>
 8009d28:	a307      	add	r3, pc, #28	; (adr r3, 8009d48 <scalbn+0xd0>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	e7e0      	b.n	8009cf2 <scalbn+0x7a>
 8009d30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d34:	3236      	adds	r2, #54	; 0x36
 8009d36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	2200      	movs	r2, #0
 8009d44:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <scalbn+0xe8>)
 8009d46:	e7b2      	b.n	8009cae <scalbn+0x36>
 8009d48:	c2f8f359 	.word	0xc2f8f359
 8009d4c:	01a56e1f 	.word	0x01a56e1f
 8009d50:	8800759c 	.word	0x8800759c
 8009d54:	7e37e43c 	.word	0x7e37e43c
 8009d58:	43500000 	.word	0x43500000
 8009d5c:	ffff3cb0 	.word	0xffff3cb0
 8009d60:	3c900000 	.word	0x3c900000

08009d64 <copysign>:
 8009d64:	ec51 0b10 	vmov	r0, r1, d0
 8009d68:	ee11 0a90 	vmov	r0, s3
 8009d6c:	ee10 2a10 	vmov	r2, s0
 8009d70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009d74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009d78:	ea41 0300 	orr.w	r3, r1, r0
 8009d7c:	ec43 2b10 	vmov	d0, r2, r3
 8009d80:	4770      	bx	lr
	...

08009d84 <_init>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	bf00      	nop
 8009d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	469e      	mov	lr, r3
 8009d8e:	4770      	bx	lr

08009d90 <_fini>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	bf00      	nop
 8009d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d96:	bc08      	pop	{r3}
 8009d98:	469e      	mov	lr, r3
 8009d9a:	4770      	bx	lr
